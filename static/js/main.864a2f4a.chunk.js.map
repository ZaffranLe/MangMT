{"version":3,"sources":["component/feature/binary-algorithms/udp-checksum-example.png","component/feature/binary-algorithms/hamming-code-example.jpg","component/feature/binary-algorithms/crc-example.png","component/layout/Navbar.js","component/layout/SideMenu.js","component/feature/shortest-path/dijkstra-algorithm.js","component/feature/shortest-path/bellman-ford-algorithm.js","component/feature/shortest-path/ShortestPath.js","component/feature/schedule/schedule-algorithm.js","component/feature/schedule/schedule.js","component/feature/binary-algorithms/udp-checksum-algorithm.js","component/feature/binary-algorithms/hamming-algorithm.js","component/feature/binary-algorithms/BinaryAlgorithms.js","component/feature/binary-algorithms/crc-algorithm.js","routes.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","SideMenu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleItemClick","e","_ref","name","setState","activeItem","state","react_default","a","createElement","Sidebar","as","Menu","animation","icon","inverted","vertical","visible","width","Item","Icon","react_router_dom","to","active","onClick","_","require","data","nodes","id","links","myConfig","height","highlightDegree","highlightOpacity","linkHighlightBehavior","nodeHighlightBehavior","node","color","fontColor","fontSize","fontWeight","highlightColor","highlightFontSize","highlightFontWeight","highlightStrokeColor","highlightStrokeWidth","labelProperty","mouseCursor","opacity","renderLabel","size","strokeColor","strokeWidth","svg","symbolType","link","d3","gravity","NodeModal","handleAddLinkForm","numOfLink","handleChange","currentLink","objectSpread","defineProperty","target","value","handleCreateLink","_this$state","currentNode","link1","distance","source","push","link2","label","toast","success","currentNodeLinks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","length","error","handleRemoveLink","arguments","Boolean","linksFiltered","filter","created","nextProps","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_this2","_this$state2","_this$props","nodeModal","handleCloseModal","rows","_loop","i","Grid","Row","key","Column","Input","type","Button","negative","onChange","positive","Modal","open","onClose","Header","Content","Segment","content","map","row","indexx","Actions","ShortestPath","_this3","numOfNode","String","fromCharCode","handleOpenModal","currentNodeLink","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","handleChangePathColor","way","split","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","console","log","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","forceUpdate","getDijkstraResult","dijkstraTables","results","_loop2","obj","currentValue","values","marked","_loop3","_nodes","_i","otherNodes","cloneDeep","other","min","markedNodes","parseInt","slice","_loop4","result","dijkstraTable","headerCells","footerCells","cells","cell","lastNode","bodyRows","dijkstra","panes","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","table","menuItem","render","Tab","Pane","Table","index","HeaderCell","Body","cellIndex","Cell","Footer","_iterator6","dijkstraResult","getBellmanFordResult","bellmanFordResults","bellmanFordResult","originalNodes","originalNode","_originalNodes","startNode","firstNodes","originalNodesClone","otherNode","_i2","_firstNodes","firstNode","currentNodes","_i3","_currentNodes","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","indexOf","nodeList","_i4","_results","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","resultNode","sort","node1","node2","minValue","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","nodeValue","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","singleResult","bellmanFord","idx","react","handleChooseAccordion","titleProps","newIndex","activeIndex","handleCalculate","handleChangeTextArea","dataTA","textArea","linkText","_this4","_this$state3","Fragment","ShortestPath_NodeModal","lib","config","onClickNode","Accordion","Title","max","Form","TextArea","schedule","employees","NamNH20","group","maxShift","dayShift","dayShiftAsFirst","dayShiftAsSecond","firstOnSecondRate","options","weekendShift","dayWithG2","DatNT11","VanQTH","TungPT15","ThoVH3","GiangHT7","ToanNV32","LucNV6","LongTT2","AnhNTV9","TuanNA106","SangDV4","ThuyNN9","HuanHV3","TuTT17","DungNT173","checkDayOption","date","option","getDate","checkGroupOf2Emp","emp1","emp2","chooseRandom","Math","floor","random","chooseEmployee","empId","listOption","day","removeEmployeeFromList","list","splice","isWeekend","getDay","DragAndDropCalendar","withDragAndDrop","Calendar","empColor","bgColor","TuanLPM","moment","locale","localizer","momentLocalizer","allViews","keys","Views","k","ColoredDateCellWrapper","children","React","cloneElement","Children","only","style","backgroundColor","Schedule","createSchedule","year","month","weekends","scheduled","numOfDaysInMonth","Date","employeesClone","listEmployeeId","randomEmp1","days","_listEmployeeId","emp","reverse","sortBy","chooseEmp1","chooseEmp2","listEmployeeIdClone","currentDay","rate","shift1","shift2","_schedule","getSchedule","events","event1","event2","moveEvent","_ref2","event","start","end","droppedOnAllDaySlot","isAllDay","allDay","updatedEvent","nextEvents","toConsumableArray","handleSelect","_ref3","title","window","prompt","concat","getFullYear","getMonth","forEach","selectable","onEventDrop","views","step","defaultDate","components","timeSlotWrapper","onSelectSlot","eventPropGetter","BIN_CARRY_OUT","sum2Bin","bin1","bin2","sum","isCarryOut","bin","isExponentOf2","num","log2","round","hammingCode","word","charCodeAt","toString","bitArr","shift","pList","binaries","j","_pList","countBit1","bit","join","calculateHammingCode","udpChecksumExample","hammingCodeExample","crcExample","ImageModal","img","imgModal","Image","src","bordered","fluid","BinaryAlgorithms","handleZoomImage","handleChangeInput","algorithm","parentElement","dataset","calculateUDPChecksum","binaryString","udp16bNumbers","_udp16bNumbers","udpChecksum","char","fixHammingCode","resultFix","hammingCodeAsObjects","falseCount","_pList2","bitObj","wrongBitIndex","_pList3","originalBinaries","calculateCrc","crc","G","D","r","crcCalculate","g","Field","data-name","data-algorithm","disabled","Divider","BinaryAlgorithms_ImageModal","Routes","react_router","path","component","App","dropdownMenuStyle","display","handleToggleDropdownMenu","newState","assign","className","padded","layout_SideMenu","floated","routes","react_toastify","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.864a2f4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/udp-checksum-example.979d92c8.png\";","module.exports = __webpack_public_path__ + \"static/media/hamming-code-example.50d928f8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/crc-example.680335b0.png\";","import React, { Component } from \"react\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nimport {\r\n  Grid,\r\n  Input,\r\n  Menu\r\n} from \"semantic-ui-react\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <Grid padded>\r\n        <Menu borderless inverted fluid>\r\n          <Menu.Item header as=\"a\">\r\n            Tung Le\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Grid, Menu, Sidebar, Icon } from \"semantic-ui-react\";\r\n\r\nclass SideMenu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeItem: \"\"\r\n    };\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\r\n\r\n  render() {\r\n    const { activeItem } = this.state;\r\n    return (\r\n      <Sidebar\r\n        as={Menu}\r\n        animation=\"push\"\r\n        icon=\"labeled\"\r\n        inverted\r\n        vertical\r\n        visible={true}\r\n        width=\"thin\"\r\n      >\r\n        <Menu.Item as=\"a\">\r\n          <Icon name=\"home\" />\r\n          Home\r\n        </Menu.Item>\r\n        <Link to=\"/feature/dijkstra\">\r\n          <Menu.Item\r\n            name=\"dijkstra\"\r\n            active={activeItem === \"dijkstra\"}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            Dijkstra / Bellman-Ford\r\n          </Menu.Item>\r\n        </Link>\r\n        <Link to=\"/feature/schedule\">\r\n          <Menu.Item\r\n            name=\"schedule\"\r\n            active={activeItem === \"schedule\"}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            NOC NET Schedule\r\n          </Menu.Item>\r\n        </Link>\r\n        <Link to=\"/feature/binary-algorithms\">\r\n          <Menu.Item\r\n            name=\"binary-algorithms\"\r\n            active={activeItem === \"binary-algorithms\"}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            Binary algorithms\r\n          </Menu.Item>\r\n        </Link>\r\n        {/* <Link to=\"/feature/ip-subnet-v4\"> */}\r\n        <Menu.Item\r\n          name=\"ip-subnet-v4\"\r\n          active={activeItem === \"ip-subnet-v4\"}\r\n          onClick={this.handleItemClick}\r\n        >\r\n          IPv4 Subnet\r\n        </Menu.Item>\r\n        {/* </Link> */}\r\n      </Sidebar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideMenu;\r\n","const _ = require(\"lodash\");\r\n\r\nexport default function dijkstra(data) {\r\n  const nodes = [];\r\n  const results = [];\r\n  for (let node of data.nodes) {\r\n    let obj = {};\r\n    obj.node = node.id;\r\n    obj.way = node.id;\r\n    obj.currentValue = 0;\r\n    obj.values = [];\r\n    obj.links = data.links.filter(link => {\r\n      return link.source === node.id;\r\n    });\r\n    obj.marked = false;\r\n    nodes.push(obj);\r\n  }\r\n\r\n  for (let node of nodes) {\r\n    let otherNodes = _.cloneDeep(\r\n      nodes.filter(other => {\r\n        return other !== node;\r\n      })\r\n    );\r\n    let min = 0;\r\n    let markedNodes = [];\r\n    let currentNode = _.cloneDeep(node);\r\n    markedNodes.push(node);\r\n    while (markedNodes.length < nodes.length) {\r\n      for (let other of otherNodes) {\r\n        for (let link of currentNode.links) {\r\n          if (link.target === other.node) {\r\n            if (other.currentValue !== 0) {\r\n              if (\r\n                other.currentValue >\r\n                currentNode.currentValue + parseInt(link.distance, 10)\r\n              ) {\r\n                other.way = currentNode.way + other.node;\r\n                other.currentValue =\r\n                  currentNode.currentValue + parseInt(link.distance, 10);\r\n              }\r\n            } else {\r\n              other.way = currentNode.way + other.way;\r\n              other.currentValue = currentNode.currentValue + parseInt(link.distance, 10);\r\n            }\r\n          }\r\n        }\r\n        if ((min > other.currentValue || min === 0) && other.currentValue > 0) {\r\n          min = other.currentValue;\r\n        }\r\n        let obj = {};\r\n        obj[\"value\"] = other.currentValue;\r\n        obj[\"lastNode\"] = other.way.slice(\r\n          other.way.length - 2,\r\n          other.way.length - 1\r\n        );\r\n        other.values.push(obj);\r\n      }\r\n      for (let other of otherNodes) {\r\n        if (other.currentValue === min) {\r\n          other.marked = true;\r\n          currentNode = _.cloneDeep(other);\r\n          // console.log(currentNode);\r\n          markedNodes.push(other);\r\n          otherNodes = otherNodes.filter(node => {\r\n            return node !== other;\r\n          });\r\n          // console.log(otherNodes);\r\n          min = 0;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    results.push(markedNodes);\r\n  }\r\n  console.log(results);\r\n  const dijkstraTables = [];\r\n  results.map(result => {\r\n    let dijkstraTable = {};\r\n    dijkstraTable.headerCells = [];\r\n    dijkstraTable.bodyRows = [];\r\n    dijkstraTable.footerCells = [];\r\n    result.map(node => {\r\n      dijkstraTable.headerCells.push(node[\"node\"]);\r\n      dijkstraTable.footerCells.push(node[\"way\"]);\r\n    });\r\n    for (let i = 0; i < result.length; i++) {\r\n      let cells = [];\r\n      result.map(node => {\r\n        let cell = {};\r\n        cell.marked = false;\r\n        if (Boolean(node[\"values\"][i])) {\r\n          cell.value = node[\"values\"][i][\"value\"];\r\n          cell.lastNode = node[\"values\"][i][\"lastNode\"];\r\n          if (i === node[\"values\"].length - 1) {\r\n            cell.marked = true;\r\n          }\r\n        } else {\r\n          cell.value = \"-\";\r\n          cell.lastNode = \"-\";\r\n        }\r\n        cells.push(cell);\r\n      });\r\n      dijkstraTable.bodyRows.push(cells);\r\n    }\r\n    dijkstraTables.push(dijkstraTable);\r\n  });\r\n  return dijkstraTables;\r\n}\r\n","const _ = require(\"lodash\");\r\n\r\n// const data = {\r\n//   nodes: [\r\n//     {\r\n//       id: \"A\"\r\n//     },\r\n//     {\r\n//       id: \"B\"\r\n//     },\r\n//     {\r\n//       id: \"C\"\r\n//     },\r\n//     {\r\n//       id: \"D\"\r\n//     },\r\n//     {\r\n//       id: \"E\"\r\n//     },\r\n//     {\r\n//       id: \"F\"\r\n//     }\r\n//   ],\r\n//   links: [\r\n//     {\r\n//       source: \"A\",\r\n//       target: \"B\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     },\r\n//     {\r\n//       source: \"B\",\r\n//       target: \"A\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     },\r\n//     {\r\n//       source: \"A\",\r\n//       target: \"C\",\r\n//       label: 1,\r\n//       distance: 1\r\n//     },\r\n//     {\r\n//       source: \"C\",\r\n//       target: \"A\",\r\n//       label: 1,\r\n//       distance: 1\r\n//     },\r\n//     {\r\n//       source: \"C\",\r\n//       target: \"E\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     },\r\n//     {\r\n//       source: \"E\",\r\n//       target: \"C\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     },\r\n//     {\r\n//       source: \"E\",\r\n//       target: \"B\",\r\n//       label: 5,\r\n//       distance: 5\r\n//     },\r\n//     {\r\n//       source: \"B\",\r\n//       target: \"E\",\r\n//       label: 5,\r\n//       distance: 5\r\n//     },\r\n//     {\r\n//       source: \"E\",\r\n//       target: \"D\",\r\n//       label: 3,\r\n//       distance: 3\r\n//     },\r\n//     {\r\n//       source: \"D\",\r\n//       target: \"E\",\r\n//       label: 3,\r\n//       distance: 3\r\n//     },\r\n//     {\r\n//       source: \"D\",\r\n//       target: \"B\",\r\n//       label: 4,\r\n//       distance: 4\r\n//     },\r\n//     {\r\n//       source: \"B\",\r\n//       target: \"D\",\r\n//       label: 4,\r\n//       distance: 4\r\n//     },\r\n//     {\r\n//       source: \"F\",\r\n//       target: \"D\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     },\r\n//     {\r\n//       source: \"D\",\r\n//       target: \"F\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     }\r\n//   ]\r\n// };\r\n\r\nexport default function bellmanFord(data) {\r\n  const bellmanFordResult = [];\r\n  const originalNodes = [];\r\n  for (let node of data.nodes) {\r\n    let obj = {};\r\n    obj.node = node.id;\r\n    obj.way = node.id;\r\n    obj.currentValue = 0;\r\n    obj.links = data.links.filter(link => {\r\n      return link.source === node.id;\r\n    });\r\n    obj.marked = false;\r\n    originalNodes.push(obj);\r\n  }\r\n  for (let originalNode of originalNodes) {\r\n    const results = [];\r\n\r\n    let startNode = _.cloneDeep(originalNode);\r\n    let firstNodes = [];\r\n    let originalNodesClone = _.cloneDeep(originalNodes);\r\n    for (let link of startNode.links) {\r\n      for (let otherNode of originalNodesClone) {\r\n        if (link.target === otherNode.node) {\r\n          otherNode.currentValue = parseInt(link.distance, 10);\r\n          firstNodes.push(otherNode);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let firstNode of firstNodes) {\r\n      let currentNodes = [firstNode];\r\n      let nodes = _.cloneDeep(originalNodesClone);\r\n      for (let node of nodes) {\r\n        if (node !== firstNode) {\r\n          node.currentValue = 0;\r\n        }\r\n      }\r\n\r\n      while (currentNodes.length > 0) {\r\n        for (let currentNode of currentNodes) {\r\n          currentNode.marked = false;\r\n          for (let link of currentNode.links) {\r\n            for (let otherNode of nodes) {\r\n              if (link.target === otherNode.node) {\r\n                if (link.target !== firstNode.node) {\r\n                  if (\r\n                    otherNode.currentValue === 0 ||\r\n                    otherNode.currentValue >\r\n                      currentNode.currentValue + parseInt(link.distance, 10)\r\n                  ) {\r\n                    otherNode.currentValue =\r\n                      currentNode.currentValue + parseInt(link.distance, 10);\r\n                    otherNode.marked = true;\r\n                    otherNode.way = currentNode.way + otherNode.node;\r\n                  }\r\n                } else {\r\n                  otherNode.currentValue = firstNode.currentValue;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        currentNodes = currentNodes.filter(node => {\r\n          return node.marked;\r\n        });\r\n        for (let node of nodes) {\r\n          if (currentNodes.indexOf(node) === -1 && node.marked) {\r\n            currentNodes.push(node);\r\n          }\r\n        }\r\n      }\r\n      nodes = nodes.filter(node => {\r\n        return node.node !== startNode.node;\r\n      });\r\n      results.push(nodes);\r\n    }\r\n\r\n    let nodeList = _.cloneDeep(data.nodes);\r\n    for (let node of nodeList) {\r\n      node[\"values\"] = [];\r\n      for (let result of results) {\r\n        for (let resultNode of result) {\r\n          if (resultNode.node === node.id) {\r\n            node[\"values\"].push(resultNode);\r\n          }\r\n        }\r\n      }\r\n      node[\"values\"].sort((node1, node2) => {\r\n        return node1.way > node2.way;\r\n      });\r\n      if (node[\"values\"].length > 0) {\r\n        let minValue = node[\"values\"][0][\"currentValue\"];\r\n        for (let nodeValue of node[\"values\"]) {\r\n          if (minValue > nodeValue[\"currentValue\"]) {\r\n            minValue = nodeValue[\"currentValue\"];\r\n          }\r\n        }\r\n        for (let nodeValue of node[\"values\"]) {\r\n          if (minValue === nodeValue[\"currentValue\"]) {\r\n            nodeValue[\"marked\"] = true;\r\n            nodeValue[\"way\"] = startNode.node + nodeValue[\"way\"];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    firstNodes.sort((node1, node2) => {\r\n      return node1.way > node2.way;\r\n    });\r\n    let singleResult = {};\r\n    singleResult[\"firstNodes\"] = _.cloneDeep(firstNodes);\r\n    singleResult[\"startNode\"] = _.cloneDeep(startNode);\r\n    singleResult[\"nodeList\"] = nodeList.filter(node => {\r\n      return node[\"values\"].length > 0;\r\n    });\r\n    bellmanFordResult.push(singleResult);\r\n  }\r\n  return bellmanFordResult;\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  Segment,\r\n  Header,\r\n  Grid,\r\n  Input,\r\n  Modal,\r\n  Button,\r\n  Tab,\r\n  Accordion,\r\n  Icon,\r\n  Table,\r\n  TextArea,\r\n  Form\r\n} from \"semantic-ui-react\";\r\nimport { Graph } from \"react-d3-graph\";\r\nimport { toast } from \"react-toastify\";\r\nimport dijkstra from \"./dijkstra-algorithm\";\r\nimport bellmanFord from \"./bellman-ford-algorithm\";\r\nconst data = {\r\n  nodes: [\r\n    {\r\n      id: \"A\"\r\n    },\r\n  ],\r\n  links: []\r\n};\r\n\r\nconst myConfig = {\r\n  height: 400,\r\n  highlightDegree: 1,\r\n  highlightOpacity: 0.2,\r\n  linkHighlightBehavior: true,\r\n  nodeHighlightBehavior: true,\r\n  width: 775,\r\n  node: {\r\n    color: \"#fff\",\r\n    fontColor: \"black\",\r\n    fontSize: 20,\r\n    fontWeight: \"normal\",\r\n    highlightColor: \"red\",\r\n    highlightFontSize: 20,\r\n    highlightFontWeight: \"bold\",\r\n    highlightStrokeColor: \"SAME\",\r\n    highlightStrokeWidth: 1.5,\r\n    labelProperty: \"name\",\r\n    mouseCursor: \"pointer\",\r\n    opacity: 1,\r\n    renderLabel: true,\r\n    size: 450,\r\n    strokeColor: \"#000\",\r\n    strokeWidth: 1.5,\r\n    svg: \"\",\r\n    symbolType: \"circle\"\r\n  },\r\n  link: {\r\n    color: \"#d3d3d3\",\r\n    fontColor: \"black\",\r\n    fontSize: 20,\r\n    fontWeight: \"normal\",\r\n    highlightColor: \"blue\",\r\n    highlightFontSize: 20,\r\n    highlightFontWeight: \"normal\",\r\n    labelProperty: \"label\",\r\n    mouseCursor: \"pointer\",\r\n    opacity: 1,\r\n    renderLabel: true,\r\n    strokeWidth: 4\r\n  },\r\n  d3: {\r\n    gravity: -500\r\n  }\r\n};\r\n\r\nclass NodeModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentNode: \"\",\r\n      numOfLink: 0,\r\n      currentNodeLinks: [],\r\n      currentLink: {\r\n        source: \"\",\r\n        target: \"\",\r\n        label: 0,\r\n        color: \"#d3d3d3\",\r\n        distance: 0\r\n      },\r\n      created: false\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const { currentNode } = nextProps;\r\n    const currentNodeLinks = [];\r\n    for (let link of data.links) {\r\n      if (link.source === currentNode) {\r\n        currentNodeLinks.push(link);\r\n      }\r\n    }\r\n    this.setState({\r\n      currentNode,\r\n      currentNodeLinks,\r\n      numOfLink: currentNodeLinks.length\r\n    });\r\n  }\r\n\r\n  handleAddLinkForm = () => {\r\n    this.setState({\r\n      numOfLink: this.state.numOfLink + 1\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      currentLink: {\r\n        ...this.state.currentLink,\r\n        [e.target.name]: e.target.value\r\n      }\r\n    });\r\n  };\r\n\r\n  handleCreateLink = () => {\r\n    const { currentLink, currentNode } = this.state;\r\n    const links = data.links;\r\n    let link1 = currentLink;\r\n    if (currentLink.distance !== 0 && currentLink.target !== \"\") {\r\n      link1.source = currentNode;\r\n      links.push(link1);\r\n      let link2 = {};\r\n      link2.source = link1.target;\r\n      link2.target = currentNode;\r\n      link2.distance = link1.distance;\r\n      link2.label = link1.distance;\r\n      links.push(link2);\r\n      toast.success(\"Create link succeed!\");\r\n      const currentNodeLinks = [];\r\n      for (let link of data.links) {\r\n        if (link.source === currentNode) {\r\n          currentNodeLinks.push(link);\r\n        }\r\n      }\r\n      this.setState({\r\n        currentNodeLinks,\r\n        numOfLink: currentNodeLinks.length\r\n      });\r\n    } else {\r\n      toast.error(\"Create link failed!\");\r\n    }\r\n  };\r\n\r\n  handleRemoveLink = (link = null) => {\r\n    if (Boolean(link)) {\r\n      let linksFiltered = data.links.filter(value => {\r\n        if (\r\n          (value.source === link.source && value.target === link.target) ||\r\n          (value.source === link.target && value.target === link.source)\r\n        ) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      data.links = linksFiltered;\r\n    }\r\n    this.setState({\r\n      numOfLink: this.state.numOfLink - 1\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      numOfLink,\r\n      currentNodeLinks,\r\n      currentNode,\r\n      currentLink\r\n    } = this.state;\r\n    const { nodeModal, handleCloseModal } = this.props;\r\n    const rows = [];\r\n    for (let i = 0; i < numOfLink; i++) {\r\n      if (i < currentNodeLinks.length) {\r\n        rows.push(\r\n          <Grid.Row key={i}>\r\n            <Grid.Column width={6}>\r\n              <Input\r\n                label=\"Target\"\r\n                value={currentNodeLinks[i].target}\r\n                type=\"text\"\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n              <Input\r\n                label=\"Distance\"\r\n                value={currentNodeLinks[i].distance}\r\n                type=\"number\"\r\n              />\r\n              <Button\r\n                onClick={() => this.handleRemoveLink(currentNodeLinks[i])}\r\n                negative\r\n                icon=\"trash\"\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        );\r\n      } else {\r\n        rows.push(\r\n          <Grid.Row key={i}>\r\n            <Grid.Column width={6}>\r\n              <Input\r\n                onChange={this.handleChange}\r\n                name=\"target\"\r\n                label=\"Target\"\r\n                type=\"text\"\r\n                value={currentLink.target}\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n              <Input\r\n                onChange={this.handleChange}\r\n                name=\"distance\"\r\n                label=\"Distance\"\r\n                type=\"number\"\r\n                value={currentLink.distance}\r\n              />\r\n              <Button\r\n                onClick={this.handleCreateLink}\r\n                positive\r\n                icon=\"checkmark\"\r\n              />\r\n              <Button\r\n                onClick={() => this.handleRemoveLink()}\r\n                negative\r\n                icon=\"trash\"\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <Modal open={nodeModal} onClose={handleCloseModal}>\r\n        <Modal.Header>Node {currentNode} config</Modal.Header>\r\n        <Modal.Content>\r\n          <Segment>\r\n            <Button\r\n              positive\r\n              onClick={this.handleAddLinkForm}\r\n              content=\"Add link\"\r\n              icon=\"plus\"\r\n            />\r\n          </Segment>\r\n          <Grid>\r\n            {rows.map((row, indexx) => {\r\n              return row;\r\n            })}\r\n          </Grid>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button onClick={handleCloseModal}>Close</Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nclass ShortestPath extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numOfNode: 1,\r\n      currentNode: \"\",\r\n      nodeModal: false,\r\n      dijkstraResult: [],\r\n      bellmanFordResult: [],\r\n      activeIndex: 0,\r\n      textArea: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      numOfNode: data.nodes.length\r\n    });\r\n  }\r\n\r\n  handleChange = e => {\r\n    let numOfNode = e.target.value;\r\n    let nodes = [];\r\n    for (let i = 0; i < numOfNode; i++) {\r\n      let node = {\r\n        id: String.fromCharCode(65 + i)\r\n      };\r\n      nodes.push(node);\r\n    }\r\n    this.setState({\r\n      numOfNode\r\n    });\r\n    data.nodes = nodes;\r\n  };\r\n\r\n  handleOpenModal = currentNode => {\r\n    const currentNodeLink = [];\r\n    for (let link of data.links) {\r\n      if (link.source === currentNode) {\r\n        currentNodeLink.push(link);\r\n      }\r\n    }\r\n    this.setState({\r\n      currentNode,\r\n      nodeModal: true\r\n    });\r\n  };\r\n\r\n  handleCloseModal = () => {\r\n    this.setState({\r\n      nodeModal: false\r\n    });\r\n  };\r\n\r\n  handleChangePathColor = way => {\r\n    const nodes = way.split(\"\");\r\n    for (let link of data.links) {\r\n      link[\"color\"] = \"#d3d3d3\";\r\n    }\r\n    for (let i = 0; i < nodes.length - 1; i++) {\r\n      let source = nodes[i];\r\n      let target = nodes[i + 1];\r\n      console.log(source, target);\r\n      for (let link of data.links) {\r\n        if (\r\n          (link.source === source && link.target === target) ||\r\n          (link.source === target && link.target === source)\r\n        ) {\r\n          link[\"color\"] = \"red\";\r\n        }\r\n      }\r\n    }\r\n    console.log(data.links);\r\n    this.forceUpdate();\r\n  };\r\n\r\n  getDijkstraResult = () => {\r\n    const dijkstraTables = dijkstra(data);\r\n    const panes = [];\r\n    for (let table of dijkstraTables) {\r\n      panes.push({\r\n        menuItem: table.headerCells[0],\r\n        render: () => (\r\n          <Tab.Pane>\r\n            <Table>\r\n              <Table.Header>\r\n                <Table.Row>\r\n                  {table.headerCells.map((cell, index) => {\r\n                    return (\r\n                      <Table.HeaderCell key={index}>{cell}</Table.HeaderCell>\r\n                    );\r\n                  })}\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>\r\n                {table.bodyRows.map((row, index) => {\r\n                  return (\r\n                    <Table.Row key={index}>\r\n                      {row.map((cell, cellIndex) => {\r\n                        return (\r\n                          <Table.Cell key={cellIndex}>\r\n                            ({cell.value},{cell.lastNode}){\" \"}\r\n                            {cell.marked && (\r\n                              <Icon color=\"green\" name=\"checkmark\" />\r\n                            )}\r\n                          </Table.Cell>\r\n                        );\r\n                      })}\r\n                    </Table.Row>\r\n                  );\r\n                })}\r\n              </Table.Body>\r\n              <Table.Footer>\r\n                <Table.Row>\r\n                  {table.footerCells.map((way, index) => {\r\n                    return (\r\n                      <Table.HeaderCell key={index}>\r\n                        {way.length > 1 ? (\r\n                          <Button\r\n                            positive\r\n                            onClick={() => this.handleChangePathColor(way)}\r\n                          >\r\n                            {way}\r\n                          </Button>\r\n                        ) : (\r\n                          \"Shortest way\"\r\n                        )}\r\n                      </Table.HeaderCell>\r\n                    );\r\n                  })}\r\n                </Table.Row>\r\n              </Table.Footer>\r\n            </Table>\r\n          </Tab.Pane>\r\n        )\r\n      });\r\n    }\r\n    this.setState({\r\n      dijkstraResult: panes\r\n    });\r\n  };\r\n\r\n  getBellmanFordResult = () => {\r\n    const bellmanFordResults = bellmanFord(data);\r\n    const panes = [];\r\n    for (let result of bellmanFordResults) {\r\n      panes.push({\r\n        menuItem: result.startNode.node,\r\n        render: () => (\r\n          <Tab.Pane>\r\n            <Table>\r\n              <Table.Header>\r\n                <Table.Row>\r\n                  <Table.HeaderCell>\r\n                    Start: {result.startNode.node}\r\n                  </Table.HeaderCell>\r\n                  {result.firstNodes.map((node, index) => {\r\n                    return (\r\n                      <Table.HeaderCell key={index}>\r\n                        {node.node}\r\n                      </Table.HeaderCell>\r\n                    );\r\n                  })}\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>\r\n                {result.nodeList.map((node, index) => {\r\n                  return (\r\n                    <Table.Row key={index}>\r\n                      <Table.Cell>{node.id}</Table.Cell>\r\n                      {node.values.map((value, idx) => {\r\n                        return (\r\n                          <Table.Cell key={idx}>\r\n                            {value.currentValue}{\" \"}\r\n                            {value.marked && (\r\n                              <Fragment>\r\n                                <Icon color=\"green\" name=\"checkmark\" /> -\r\n                                <Button\r\n                                  positive\r\n                                  onClick={() =>\r\n                                    this.handleChangePathColor(value.way)\r\n                                  }\r\n                                >\r\n                                  {value.way}\r\n                                </Button>\r\n                              </Fragment>\r\n                            )}\r\n                          </Table.Cell>\r\n                        );\r\n                      })}\r\n                    </Table.Row>\r\n                  );\r\n                })}\r\n              </Table.Body>\r\n            </Table>\r\n          </Tab.Pane>\r\n        )\r\n      });\r\n    }\r\n    this.setState({\r\n      bellmanFordResult: panes\r\n    });\r\n  };\r\n\r\n  handleChooseAccordion = (e, titleProps) => {\r\n    const { index } = titleProps;\r\n    const { activeIndex } = this.state;\r\n    const newIndex = activeIndex === index ? -1 : index;\r\n\r\n    this.setState({ activeIndex: newIndex });\r\n  };\r\n\r\n  handleCalculate = () => {\r\n    this.getBellmanFordResult();\r\n    this.getDijkstraResult();\r\n  };\r\n\r\n  handleChangeTextArea = (e, dataTA) => {\r\n    console.log(dataTA.value)\r\n    if (dataTA.value == \"\") {\r\n      data.links = [];\r\n    } else\r\n    if (dataTA.value[dataTA.value.length - 1] === \"\\n\") {\r\n      console.log(dataTA.value);\r\n      let textArea = dataTA.value.slice(0,dataTA.value.length-1).split(\"\\n\");\r\n      console.log(textArea);\r\n      data.links = [];\r\n      for (let linkText of textArea) {\r\n        linkText = linkText.split(\" \");\r\n        let link1 = {};\r\n        link1[\"source\"] = linkText[0];\r\n        link1[\"target\"] = linkText[1];\r\n        link1[\"distance\"] = linkText[2];\r\n        let link2 = {};\r\n        link2[\"label\"] = linkText[2];\r\n        link2[\"source\"] = linkText[1];\r\n        link2[\"target\"] = linkText[0];\r\n        link2[\"distance\"] = linkText[2];\r\n        data.links.push(link1);\r\n        data.links.push(link2);\r\n      }\r\n      console.log(data.links);\r\n    }\r\n    this.forceUpdate();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      currentNode,\r\n      currentNodeLink,\r\n      nodeModal,\r\n      activeIndex,\r\n      dijkstraResult,\r\n      bellmanFordResult\r\n    } = this.state;\r\n    return (\r\n      <>\r\n        <Segment>\r\n          <Header>Shortest Path</Header>\r\n          <NodeModal\r\n            currentNode={currentNode}\r\n            currentNodeLink={currentNodeLink}\r\n            nodeModal={nodeModal}\r\n            handleCloseModal={this.handleCloseModal}\r\n          />\r\n        </Segment>\r\n        <Segment>\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Grid.Column width={8}>\r\n                <Segment>\r\n                  <Graph\r\n                    id=\"node-graph\"\r\n                    data={data}\r\n                    config={myConfig}\r\n                    onClickNode={this.handleOpenModal}\r\n                  />\r\n                </Segment>\r\n              </Grid.Column>\r\n              <Grid.Column width={8}>\r\n                <Grid.Row>\r\n                  <Grid.Column width={16}>\r\n                    <Segment>\r\n                      <Accordion>\r\n                        <Accordion.Title\r\n                          active={activeIndex === 1}\r\n                          index={1}\r\n                          onClick={this.handleChooseAccordion}\r\n                        >\r\n                          <Header>\r\n                            Dijkstra Algorithm <Icon name=\"dropdown\" />\r\n                          </Header>\r\n                        </Accordion.Title>\r\n                        <Accordion.Content active={activeIndex === 1}>\r\n                          <Tab panes={dijkstraResult} />\r\n                        </Accordion.Content>\r\n\r\n                        <Accordion.Title\r\n                          active={activeIndex === 2}\r\n                          index={2}\r\n                          onClick={this.handleChooseAccordion}\r\n                        >\r\n                          <Header>\r\n                            Bellman-Ford Algorithm\r\n                            <Icon name=\"dropdown\" />\r\n                          </Header>\r\n                        </Accordion.Title>\r\n                        <Accordion.Content active={activeIndex === 2}>\r\n                          <Tab panes={bellmanFordResult} />\r\n                        </Accordion.Content>\r\n                      </Accordion>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n          <Segment>\r\n            <Header>Configuration</Header>\r\n            <Grid>\r\n              <Grid.Row>\r\n                <Grid.Column width={3}>\r\n                  <Input\r\n                    name=\"numOfNode\"\r\n                    min={1}\r\n                    max={10}\r\n                    type=\"number\"\r\n                    value={this.state.numOfNode}\r\n                    onChange={this.handleChange}\r\n                    label=\"Number of node\"\r\n                  />\r\n                </Grid.Column>\r\n                <Grid.Column width={11}>\r\n                  {data.nodes.map((node, index) => {\r\n                    return (\r\n                      <Button\r\n                        key={index}\r\n                        color=\"teal\"\r\n                        onClick={() => this.handleOpenModal(node.id)}\r\n                      >\r\n                        {node.id}\r\n                      </Button>\r\n                    );\r\n                  })}\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                  <Button\r\n                    positive\r\n                    onClick={this.handleCalculate}\r\n                    content=\"Find shortest path\"\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n              <Grid.Row>\r\n                <Grid.Column width={16}>\r\n                  <Form>\r\n                    <TextArea onChange={this.handleChangeTextArea} />\r\n                  </Form>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Segment>\r\n        </Segment>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShortestPath;\r\n","import _ from \"lodash\";\r\n\r\nconst LEAD_MAX_SHIFT = 3;\r\nconst PRO_MAX_SHIFT = 4;\r\nconst NORMAL_MAX_SHIFT = 4;\r\n\r\nlet schedule = [];\r\nconst employees = {\r\n  NamNH20: {\r\n    group: 1,\r\n    maxShift: LEAD_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  DatNT11: {\r\n    group: 1,\r\n    maxShift: LEAD_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  VanQTH: {\r\n    group: 1,\r\n    maxShift: LEAD_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  TungPT15: {\r\n    group: 1,\r\n    maxShift: LEAD_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  ThoVH3: {\r\n    group: 1,\r\n    maxShift: PRO_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  GiangHT7: {\r\n    group: 1,\r\n    maxShift: PRO_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [1, 8, 15, 22, 29],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  ToanNV32: {\r\n    group: 1,\r\n    maxShift: PRO_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  LucNV6: {\r\n    group: 1,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  LongTT2: {\r\n    group: 1,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  AnhNTV9: {\r\n    group: 1,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [2, 9, 16, 23, 30, 4, 6, 11, 13, 18, 20, 25, 27],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  TuanNA106: {\r\n    group: 1,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  SangDV4: {\r\n    group: 1,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  ThuyNN9: {\r\n    group: 2,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  HuanHV3: {\r\n    group: 2,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  TuTT17: {\r\n    group: 2,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  DungNT173: {\r\n    group: 2,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  }\r\n};\r\n\r\nfunction checkDayOption(date, option) {\r\n  // 15th day in month = 15\r\n  if (date.getDate() === option) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction checkGroupOf2Emp(emp1, emp2) {\r\n  if (emp1[\"group\"] === 2 && emp2[\"group\"] === 2) {\r\n    return false;\r\n  }\r\n  if (emp1[\"group\"] === 2 || emp2[\"group\"] === 2) {\r\n    if (emp1[\"dayWithG2\"] === 2 || emp2[\"dayWithG2\"] === 2) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction chooseRandom(max, min = 0) {\r\n  let randomPosition = Math.floor(Math.random() * (max - min) + min);\r\n  return randomPosition;\r\n}\r\n\r\nfunction chooseEmployee(empId, listOption, date) {\r\n  let day = date.getDate() - 1;\r\n  if (day > 0) {\r\n    if (Boolean(schedule[day - 1])) {\r\n      if (\r\n        schedule[day - 1][\"firstShift\"] === empId ||\r\n        schedule[day - 1][\"secondShift\"] === empId\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    if (Boolean(schedule[day + 1])) {\r\n      if (\r\n        schedule[day + 1][\"firstShift\"] === empId ||\r\n        schedule[day + 1][\"secondShift\"] === empId\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  for (let option of listOption) {\r\n    if (!checkDayOption(date, option)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction removeEmployeeFromList(empId, list) {\r\n  list.splice(list.indexOf(empId), 1);\r\n}\r\n\r\nfunction isWeekend(date, weekends = []) {\r\n  if (\r\n    weekends.indexOf(date.getDate()) !== -1 ||\r\n    date.getDay() === 0 ||\r\n    date.getDay() === 6\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default function getSchedule(year, month, weekends = []) {\r\n  let scheduled = false;\r\n  const numOfDaysInMonth = new Date(year, month, 0).getDate();\r\n  while (!scheduled) {\r\n    scheduled = true;\r\n    const employeesClone = _.cloneDeep(employees);\r\n    const listEmployeeId = [\r\n      \"NamNH20\",\r\n      \"DatNT11\",\r\n      \"VanQTH\",\r\n      \"TungPT15\",\r\n      \"ToanNV32\",\r\n      \"ThoVH3\",\r\n      \"GiangHT7\",\r\n      \"LucNV6\",\r\n      \"LongTT2\",\r\n      \"AnhNTV9\",\r\n      \"TuanNA106\",\r\n      \"SangDV4\",\r\n      \"ThuyNN9\",\r\n      \"HuanHV3\",\r\n      \"TuTT17\",\r\n      \"DungNT173\"\r\n    ];\r\n    if (numOfDaysInMonth === 31) {\r\n      let randomEmp1 = chooseRandom(listEmployeeId.length, 7);\r\n      let randomEmp2 = chooseRandom(listEmployeeId.length, 7);\r\n      let emp1 = listEmployeeId[randomEmp1];\r\n      let emp2 = listEmployeeId[randomEmp2];\r\n      employeesClone[emp1][\"maxShift\"] += 1;\r\n      employeesClone[emp2][\"maxShift\"] += 1;\r\n    }\r\n    let days = [];\r\n    for (let i = 0; i < numOfDaysInMonth; i++) {\r\n      days[i] = {};\r\n      days[i][\"day\"] = i + 1;\r\n      days[i][\"numOfUnavailable\"] = 0;\r\n    }\r\n    schedule = [];\r\n    for (let emp of listEmployeeId) {\r\n      for (let option of employeesClone[emp][\"options\"]) {\r\n        days[option - 1][\"numOfUnavailable\"] += 1;\r\n      }\r\n    }\r\n    days = _.reverse(_.sortBy(days, [\"numOfUnavailable\"]));\r\n    for (let day of days) {\r\n      let date = new Date(year, month - 1, day[\"day\"]);\r\n      let emp1 = \"\";\r\n      let chooseEmp1 = false;\r\n      let emp2 = \"\";\r\n      let chooseEmp2 = false;\r\n      let listEmployeeIdClone = _.cloneDeep(listEmployeeId);\r\n      while (!chooseEmp1 && !chooseEmp2 && listEmployeeIdClone.length > 0) {\r\n        chooseEmp1 = true;\r\n        let randomNumber1 = chooseRandom(listEmployeeIdClone.length);\r\n        emp1 = listEmployeeIdClone[randomNumber1];\r\n        let listOption = employeesClone[emp1][\"options\"];\r\n        if (!chooseEmployee(emp1, listOption, date)) {\r\n          chooseEmp1 = false;\r\n        }\r\n        if (\r\n          employeesClone[emp1][\"weekendShift\"] > 1 &&\r\n          listEmployeeIdClone.length > 1\r\n        ) {\r\n          chooseEmp1 = false;\r\n        }\r\n        if (!chooseEmp1) {\r\n          removeEmployeeFromList(emp1, listEmployeeIdClone);\r\n          continue;\r\n        }\r\n        chooseEmp1 = true;\r\n        if (emp1 === \"NamNH20\" || emp1 === \"DatNT11\") {\r\n          chooseEmp2 = true;\r\n          emp2 = emp1 === \"NamNH20\" ? \"DatNT11\" : \"NamNH20\";\r\n          let listOption = employeesClone[emp2][\"options\"];\r\n          if (!chooseEmployee(emp2, listOption, date)) {\r\n            removeEmployeeFromList(emp1, listEmployeeIdClone);\r\n            removeEmployeeFromList(emp2, listEmployeeIdClone);\r\n            chooseEmp1 = false;\r\n            chooseEmp2 = false;\r\n            continue;\r\n          }\r\n        }\r\n        let randomNumber2 = 0;\r\n        while (!chooseEmp2 && listEmployeeIdClone.length > 0) {\r\n          chooseEmp2 = true;\r\n          randomNumber2 = chooseRandom(listEmployeeIdClone.length);\r\n          emp2 = listEmployeeIdClone[randomNumber2];\r\n          if (emp2 === \"NamNH20\" || emp2 === \"DatNT11\") {\r\n            chooseEmp2 = false;\r\n          }\r\n          if (emp1 === emp2) {\r\n            chooseEmp2 = false;\r\n          }\r\n          let listOption = employeesClone[emp2][\"options\"];\r\n          if (\r\n            employeesClone[emp1][\"firstOnSecondRate\"] > 1 &&\r\n            employeesClone[emp2][\"firstOnSecondRate\"] > 1\r\n          ) {\r\n            chooseEmp2 = false;\r\n          }\r\n          if (checkGroupOf2Emp(employeesClone[emp1], employeesClone[emp2])) {\r\n            if (!chooseEmployee(emp2, listOption, date)) {\r\n              chooseEmp2 = false;\r\n            }\r\n          } else {\r\n            chooseEmp2 = false;\r\n          }\r\n          if (\r\n            employeesClone[emp2][\"weekendShift\"] > 1 &&\r\n            listEmployeeIdClone.length > 1\r\n          ) {\r\n            chooseEmp2 = false;\r\n          }\r\n          if (!chooseEmp2) {\r\n            removeEmployeeFromList(emp2, listEmployeeIdClone);\r\n            continue;\r\n          }\r\n          chooseEmp2 = true;\r\n        }\r\n        if (chooseEmp1 && chooseEmp2) {\r\n          let currentDay = day[\"day\"];\r\n          schedule[currentDay - 1] = {};\r\n          schedule[currentDay - 1][\"day\"] = currentDay;\r\n\r\n          if (\r\n            employeesClone[emp1][\"group\"] === 2 ||\r\n            employeesClone[emp2][\"group\"] === 2\r\n          ) {\r\n            if (employeesClone[emp1][\"group\"] === 2) {\r\n              employeesClone[emp2][\"dayWithG2\"] += 1;\r\n            } else {\r\n              employeesClone[emp1][\"dayWithG2\"] += 1;\r\n            }\r\n          }\r\n\r\n          let rate =\r\n            employeesClone[emp1][\"firstOnSecondRate\"] -\r\n            employeesClone[emp2][\"firstOnSecondRate\"];\r\n          let shift1 = \"\";\r\n          let shift2 = \"\";\r\n          if (rate > 0) {\r\n            shift1 = emp2;\r\n            shift2 = emp1;\r\n          } else {\r\n            shift1 = emp1;\r\n            shift2 = emp2;\r\n          }\r\n          schedule[currentDay - 1][\"firstShift\"] = shift1;\r\n          employeesClone[shift1][\"dayShift\"] += 1;\r\n          employeesClone[shift1][\"dayShiftAsFirst\"] += 1;\r\n          employeesClone[shift1][\"firstOnSecondRate\"] =\r\n            employeesClone[shift1][\"dayShiftAsFirst\"] /\r\n            employeesClone[shift1][\"dayShiftAsSecond\"];\r\n          schedule[currentDay - 1][\"secondShift\"] = shift2;\r\n          employeesClone[shift2][\"dayShift\"] += 1;\r\n          employeesClone[shift2][\"dayShiftAsSecond\"] += 1;\r\n          employeesClone[shift2][\"firstOnSecondRate\"] =\r\n            employeesClone[shift2][\"dayShiftAsFirst\"] /\r\n            employeesClone[shift2][\"dayShiftAsSecond\"];\r\n          if (isWeekend(date, weekends)) {\r\n            employeesClone[shift1][\"weekendShift\"] += 1;\r\n            employeesClone[shift2][\"weekendShift\"] += 1;\r\n          }\r\n\r\n          if (\r\n            employeesClone[emp1][\"dayShift\"] ===\r\n            employeesClone[emp1][\"maxShift\"]\r\n          ) {\r\n            employeesClone[emp1][\"done\"] = true;\r\n            removeEmployeeFromList(emp1, listEmployeeId);\r\n          }\r\n\r\n          if (\r\n            employeesClone[emp2][\"dayShift\"] ===\r\n            employeesClone[emp2][\"maxShift\"]\r\n          ) {\r\n            employeesClone[emp2][\"done\"] = true;\r\n            removeEmployeeFromList(emp2, listEmployeeId);\r\n          }\r\n        } else {\r\n          removeEmployeeFromList(emp1, listEmployeeIdClone);\r\n        }\r\n      }\r\n    }\r\n    for (let day of schedule) {\r\n      if (!Boolean(day)) {\r\n        scheduled = false;\r\n        break;\r\n      }\r\n    }\r\n    if (scheduled) {\r\n      let result = {};\r\n      result[\"schedule\"] = schedule;\r\n      result[\"employees\"] = employeesClone;\r\n      return result;\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport getSchedule from \"./schedule-algorithm\";\r\nimport {\r\n  Grid,\r\n  Input,\r\n  Segment,\r\n  Header,\r\n  Button,\r\n  Tab,\r\n  Table\r\n} from \"semantic-ui-react\";\r\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.scss\";\r\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\r\n\r\nconst empColor = {\r\n  NamNH20: {\r\n    color: \"black\",\r\n    bgColor: \"#00aa99\"\r\n  },\r\n  DatNT11: {\r\n    color: \"black\",\r\n    bgColor: \"#ff6600\"\r\n  },\r\n  GiangHT7: {\r\n    color: \"black\",\r\n    bgColor: \"#ffcc33\"\r\n  },\r\n  VanQTH: {\r\n    color: \"black\",\r\n    bgColor: \"#ffccff\"\r\n  },\r\n  TungPT15: {\r\n    color: \"white\",\r\n    bgColor: \"#000\"\r\n  },\r\n  ToanNV32: {\r\n    color: \"white\",\r\n    bgColor: \"#999\"\r\n  },\r\n  ThoVH3: {\r\n    color: \"black\",\r\n    bgColor: \"#9999ff\"\r\n  },\r\n  LucNV6: {\r\n    color: \"white\",\r\n    bgColor: \"#00cc00\"\r\n  },\r\n  LongTT2: {\r\n    color: \"black\",\r\n    bgColor: \"#ccff00\"\r\n  },\r\n  AnhNTV9: {\r\n    color: \"black\",\r\n    bgColor: \"#999966\"\r\n  },\r\n  TuanNA106: {\r\n    color: \"black\",\r\n    bgColor: \"#00ffff\"\r\n  },\r\n  SangDV4: {\r\n    color: \"white\",\r\n    bgColor: \"#336600\"\r\n  },\r\n  ThuyNN9: {\r\n    color: \"black\",\r\n    bgColor: \"#dddddd\"\r\n  },\r\n  HuanHV3: {\r\n    color: \"black\",\r\n    bgColor: \"#ffcccc\"\r\n  },\r\n  TuTT17: {\r\n    color: \"white\",\r\n    bgColor: \"#0066cc\"\r\n  },\r\n  DungNT173: {\r\n    color: \"black\",\r\n    bgColor: \"#ff3399\"\r\n  },\r\n  TuanLPM: {\r\n    color: \"black\",\r\n    bgColor: \"#ff9933\"\r\n  }\r\n};\r\n\r\nmoment.locale(\"vi-VN\");\r\nconst localizer = momentLocalizer(moment);\r\n\r\nlet allViews = Object.keys(Views).map(k => Views[k]);\r\n\r\nconst ColoredDateCellWrapper = ({ children }) =>\r\n  React.cloneElement(React.Children.only(children), {\r\n    style: {\r\n      backgroundColor: \"lightblue\"\r\n    }\r\n  });\r\nclass Schedule extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      events: [],\r\n      year: new Date().getFullYear(),\r\n      month: new Date().getMonth()+1,\r\n      employees: {}\r\n    };\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  createSchedule = () => {\r\n    const { year, month } = this.state;\r\n    const result = getSchedule(this.state.year, this.state.month);\r\n    const events = [];\r\n    for (let day of result[\"schedule\"]) {\r\n      const event1 = {};\r\n      const event2 = {};\r\n      if (Boolean(day)) {\r\n        event1[\"title\"] = day[\"firstShift\"];\r\n        event1[\"start\"] = new Date(year, month - 1, day[\"day\"], 7, 0, 0, 0);\r\n        event1[\"end\"] = new Date(year, month - 1, day[\"day\"], 9, 0, 0, 0);\r\n        events.push(event1);\r\n        event2[\"title\"] = day[\"secondShift\"];\r\n        event2[\"start\"] = new Date(year, month - 1, day[\"day\"], 11, 0, 0, 0);\r\n        event2[\"end\"] = new Date(year, month - 1, day[\"day\"], 13, 0, 0, 0);\r\n        events.push(event2);\r\n      }\r\n    }\r\n    this.setState({\r\n      events,\r\n      employees: result[\"employees\"]\r\n    });\r\n  };\r\n\r\n  moveEvent = ({ event, start, end, isAllDay: droppedOnAllDaySlot }) => {\r\n    const { events } = this.state;\r\n\r\n    const idx = events.indexOf(event);\r\n    let allDay = event.allDay;\r\n\r\n    if (!event.allDay && droppedOnAllDaySlot) {\r\n      allDay = true;\r\n    } else if (event.allDay && !droppedOnAllDaySlot) {\r\n      allDay = false;\r\n    }\r\n\r\n    const updatedEvent = { ...event, start, end, allDay };\r\n\r\n    const nextEvents = [...events];\r\n    nextEvents.splice(idx, 1, updatedEvent);\r\n\r\n    this.setState({\r\n      events: nextEvents\r\n    });\r\n  };\r\n\r\n  handleSelect = ({ start, end }) => {\r\n    const title = window.prompt(\"Employee ID\");\r\n    if (title)\r\n      this.setState({\r\n        events: [\r\n          ...this.state.events,\r\n          {\r\n            start,\r\n            end,\r\n            title\r\n          }\r\n        ]\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { employees } = this.state;\r\n    const rows = [];\r\n    Object.keys(employees).forEach((emp, index) => {\r\n      rows.push(\r\n        <Table.Row\r\n          key={index}\r\n          style={{\r\n            backgroundColor: empColor[emp][\"bgColor\"],\r\n            color: empColor[emp][\"color\"]\r\n          }}\r\n        >\r\n          <Table.Cell>{emp}</Table.Cell>\r\n          <Table.Cell>{employees[emp].group}</Table.Cell>\r\n          <Table.Cell>\r\n            {employees[emp].dayShift} - Max: {employees[emp].maxShift}\r\n          </Table.Cell>\r\n          <Table.Cell>{employees[emp].dayShiftAsFirst - 1}</Table.Cell>\r\n          <Table.Cell>{employees[emp].dayShiftAsSecond - 1}</Table.Cell>\r\n          <Table.Cell>{employees[emp].dayWithG2}</Table.Cell>\r\n          <Table.Cell>{employees[emp].weekendShift}</Table.Cell>\r\n          <Table.Cell>{employees[emp].done ? \"True\" : \"False\"} </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    });\r\n\r\n    const panes = [\r\n      {\r\n        menuItem: \"Schedule\",\r\n        render: () => (\r\n          <Segment>\r\n            <DragAndDropCalendar\r\n              selectable\r\n              onEventDrop={this.moveEvent}\r\n              style={{ height: 700 }}\r\n              events={this.state.events}\r\n              views={allViews}\r\n              step={60}\r\n              max={new Date()}\r\n              defaultDate={new Date()}\r\n              components={{\r\n                timeSlotWrapper: ColoredDateCellWrapper\r\n              }}\r\n              onSelectSlot={this.handleSelect}\r\n              localizer={localizer}\r\n              eventPropGetter={event => {\r\n                return {\r\n                  style: {\r\n                    backgroundColor: empColor[event.title][\"bgColor\"],\r\n                    color: empColor[event.title][\"color\"]\r\n                  }\r\n                };\r\n              }}\r\n            />\r\n          </Segment>\r\n        )\r\n      },\r\n      {\r\n        menuItem: \"Info\",\r\n        render: () => (\r\n          <Segment>\r\n            <Table>\r\n              <Table.Header>\r\n                <Table.Row>\r\n                  <Table.HeaderCell>ID</Table.HeaderCell>\r\n                  <Table.HeaderCell>Group</Table.HeaderCell>\r\n                  <Table.HeaderCell>Number of shift</Table.HeaderCell>\r\n                  <Table.HeaderCell>As first</Table.HeaderCell>\r\n                  <Table.HeaderCell>As second</Table.HeaderCell>\r\n                  <Table.HeaderCell>Shift with group 2</Table.HeaderCell>\r\n                  <Table.HeaderCell>Shift on weekend</Table.HeaderCell>\r\n                  <Table.HeaderCell>Done</Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>\r\n                {rows.map(row => {\r\n                  return row;\r\n                })}\r\n              </Table.Body>\r\n            </Table>\r\n          </Segment>\r\n        )\r\n      }\r\n    ];\r\n    return (\r\n      <>\r\n        <Segment>\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Grid.Column width={6}>\r\n                <Header>NOC NET Scheudle</Header>\r\n              </Grid.Column>\r\n              <Grid.Column width={4}>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"year\"\r\n                  label=\"Year\"\r\n                  min={new Date().getFullYear()}\r\n                  onChange={this.handleChange}\r\n                  value={this.state.year}\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column width={4}>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"month\"\r\n                  label=\"Month\"\r\n                  min={1}\r\n                  max={12}\r\n                  onChange={this.handleChange}\r\n                  value={this.state.month}\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column width={2}>\r\n                <Button\r\n                  onClick={this.createSchedule}\r\n                  positive\r\n                  content=\"Create schedule\"\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n        <Segment>\r\n          <Tab panes={panes} />\r\n        </Segment>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Schedule;\r\n","const BIN_CARRY_OUT = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];\r\n\r\nfunction sum2Bin(bin1, bin2) {\r\n  let sum = [];\r\n  let isCarryOut = false;\r\n  for (let i = 15; i >= 0; i--) {\r\n    let bin = bin1[i] + bin2[i];\r\n    if (isCarryOut) {\r\n      bin++;\r\n      isCarryOut = false;\r\n    }\r\n    if (bin >= 2) {\r\n      bin -= 2;\r\n      isCarryOut = true;\r\n    }\r\n    sum[i] = bin;\r\n  }\r\n  if (isCarryOut) {\r\n    return sum2Bin(sum, BIN_CARRY_OUT);\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport default function udp16CheckSum(word) {\r\n  let binaryString = \"\";\r\n  for (let i = 0; i < word.length; i++) {\r\n    binaryString += \"0\" + word[i].charCodeAt(0).toString(2);\r\n  }\r\n  if (word.length % 2) {\r\n    binaryString += \"00000000\";\r\n  }\r\n  console.log(binaryString)\r\n  let udp16bNumbers = [];\r\n  for (let i = 0; i < binaryString.length; i += 16) {\r\n    udp16bNumbers.push(\r\n      binaryString\r\n        .slice(i, i + 16)\r\n        .split(\"\")\r\n        .map(bit => {\r\n          return parseInt(bit, 16);\r\n        })\r\n    );\r\n  }\r\n  for (let num of udp16bNumbers) {\r\n    console.log(num)\r\n  }\r\n  while (udp16bNumbers.length > 1) {\r\n    for (let i = 0; i < udp16bNumbers.length - 1; i++) {\r\n      udp16bNumbers[i] = sum2Bin(udp16bNumbers[i], udp16bNumbers[i + 1]);\r\n      udp16bNumbers.splice(i + 1, 1);\r\n    }\r\n  }\r\n  const result = udp16bNumbers[0]\r\n    .map(bin => {\r\n      if (bin) return \"0\";\r\n      return \"1\";\r\n    })\r\n    .join(\"\");\r\n\r\n  return result;\r\n}","const _ = require(\"lodash\");\r\n\r\nfunction isExponentOf2(num) {\r\n  return Math.log2(num) === Math.round(Math.log2(num));\r\n}\r\n\r\nfunction calculateHammingCode(hammingCode) {\r\n  const pList = [];\r\n  for (let i = 0; i < hammingCode.length; i++) {\r\n    if (isExponentOf2(i + 1)) {\r\n      let binaries = [];\r\n      for (let j = i; j < hammingCode.length; j += (i + 1) * 2) {\r\n        binaries = binaries.concat(\r\n          hammingCode.slice(j, j < hammingCode.length && i + 1 + j)\r\n        );\r\n      }\r\n      let p = {};\r\n      p[\"binaries\"] = binaries.slice(1);\r\n      p[\"index\"] = i;\r\n      pList.push(p);\r\n    }\r\n  }\r\n  console.log(pList);\r\n  for (let p of pList) {\r\n    let countBit1 = 0;\r\n    for (let bit of p[\"binaries\"]) {\r\n      countBit1 += parseInt(bit, 10);\r\n    }\r\n    hammingCode[p[\"index\"]] = countBit1 % 2;\r\n  }\r\n\r\n  return hammingCode.join(\"\");\r\n}\r\n\r\nexport function hammingCode(word) {\r\n  let bin = \"\"; \r\n  for (let char of word) {\r\n    bin += \"0\" + char.charCodeAt(0).toString(2);\r\n  }\r\n  let bitArr = bin.split(\"\");\r\n  let hammingCode = [];\r\n  let index = 0;\r\n  while (bitArr.length > 0) {\r\n    if (!isExponentOf2(index + 1)) {\r\n      hammingCode[index] = parseInt(bitArr.shift(), 10);\r\n    } else {\r\n      hammingCode[index] = false;\r\n    }\r\n    index++;\r\n  }\r\n\r\n  return calculateHammingCode(hammingCode);\r\n}\r\n\r\nexport function fixHammingCode(hammingCode) {\r\n  hammingCode = hammingCode.split(\"\");\r\n  console.log(hammingCode);\r\n  let hammingCodeAsObjects = hammingCode.map((bit, i) => {\r\n    let obj = {};\r\n    obj[\"bit\"] = bit;\r\n    obj[\"index\"] = i;\r\n    obj[\"isTrue\"] = false;\r\n    obj[\"falseCount\"] = 0;\r\n    return obj;\r\n  });\r\n  const pList = [];\r\n  for (let i = 0; i < hammingCodeAsObjects.length; i++) {\r\n    if (isExponentOf2(i + 1)) {\r\n      let binaries = [];\r\n      for (let j = i; j < hammingCodeAsObjects.length; j += (i + 1) * 2) {\r\n        binaries = binaries.concat(\r\n          hammingCodeAsObjects.slice(\r\n            j,\r\n            j < hammingCodeAsObjects.length && i + 1 + j\r\n          )\r\n        );\r\n      }\r\n      let p = {};\r\n      p[\"binaries\"] = binaries.slice(1);\r\n      p[\"parityBit\"] = binaries[0];\r\n      pList.push(p);\r\n    }\r\n  }\r\n  let falseCount = 0;\r\n  for (let p of pList) {\r\n    let countBit1 = 0;\r\n    for (let bitObj of p[\"binaries\"]) {\r\n      countBit1 += parseInt(bitObj[\"bit\"], 10);\r\n    }\r\n    if (p[\"parityBit\"][\"bit\"] == countBit1 % 2) {\r\n      p[\"parityBit\"][\"isTrue\"] = true;\r\n      for (let bitObj of p[\"binaries\"]) {\r\n        bitObj[\"isTrue\"] = true;\r\n      }\r\n    } else {\r\n      p[\"parityBit\"][\"falseCount\"] += 1;\r\n      for (let bitObj of p[\"binaries\"]) {\r\n        bitObj[\"falseCount\"] += 1;\r\n      }\r\n      falseCount++;\r\n    }\r\n  }\r\n\r\n  let wrongBitIndex = -1;\r\n\r\n  for (let p of pList) {\r\n    if (\r\n      !p[\"parityBit\"][\"isTrue\"] &&\r\n      p[\"parityBit\"][\"falseCount\"] === falseCount\r\n    ) {\r\n      wrongBitIndex = p[\"parityBit\"][\"index\"];\r\n      break;\r\n    }\r\n    for (let bitObj of p[\"binaries\"]) {\r\n      if (!bitObj[\"isTrue\"] && bitObj[\"falseCount\"] === falseCount) {\r\n        wrongBitIndex = bitObj[\"index\"];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  let result = {};\r\n  if (wrongBitIndex === -1) {\r\n    result[\"hammingCode\"] = \"Hamming code is good!\";\r\n  } else {\r\n    hammingCode[wrongBitIndex] = hammingCode[wrongBitIndex] == 1 ? \"0\" : \"1\";\r\n  }\r\n  let originalBinaries = hammingCode.filter((bit, i) => {\r\n    return !isExponentOf2(i + 1);\r\n  });\r\n  originalBinaries = originalBinaries.join(\"\");\r\n  hammingCode = hammingCode.join(\"\");\r\n  result[\"hammingCode\"] = hammingCode;\r\n  result[\"char\"] = String.fromCharCode(\r\n    parseInt(originalBinaries, 2).toString(10)\r\n  );\r\n  return result;\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nimport {\r\n  Segment,\r\n  Header,\r\n  Grid,\r\n  Image,\r\n  Modal,\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Divider\r\n} from \"semantic-ui-react\";\r\nimport udpChecksum from \"./udp-checksum-algorithm\";\r\nimport { hammingCode, fixHammingCode } from \"./hamming-algorithm\";\r\nimport crcCalculate from \"./crc-algorithm\";\r\nconst udpChecksumExample = require(\"./udp-checksum-example.png\");\r\nconst hammingCodeExample = require(\"./hamming-code-example.jpg\");\r\nconst crcExample = require(\"./crc-example.png\");\r\nclass ImageModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { img, imgModal, handleCloseModal } = this.props;\r\n    return (\r\n      <Modal onClose={handleCloseModal} open={imgModal} size=\"large\">\r\n        <Modal.Content>\r\n          <Image src={img} bordered fluid />\r\n        </Modal.Content>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nclass BinaryAlgorithms extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      imgModal: false,\r\n      img: \"\",\r\n      udpChecksum: {\r\n        word: \"\",\r\n        result: \"\"\r\n      },\r\n      hammingCode: {\r\n        char: \"\",\r\n        result: \"\",\r\n        hammingCode: \"\",\r\n        resultFix: \"\"\r\n      },\r\n      crc: {\r\n        word: \"\",\r\n        result: \"\",\r\n        g: \"\"\r\n      }\r\n    };\r\n  }\r\n\r\n  handleZoomImage = img => {\r\n    this.setState({\r\n      imgModal: true,\r\n      img\r\n    });\r\n  };\r\n\r\n  handleCloseModal = () => {\r\n    this.setState({\r\n      imgModal: false\r\n    });\r\n  };\r\n\r\n  handleChangeInput = e => {\r\n    const algorithm = e.target.parentElement.dataset.algorithm;\r\n    const name = e.target.parentElement.dataset.name;\r\n    this.setState({\r\n      [algorithm]: {\r\n        ...this.state[algorithm],\r\n        [name]: e.target.value\r\n      }\r\n    });\r\n  };\r\n\r\n  calculateUDPChecksum = () => {\r\n    const result = udpChecksum(this.state.udpChecksum.word);\r\n    this.setState({\r\n      udpChecksum: {\r\n        ...this.state.udpChecksum,\r\n        result\r\n      }\r\n    });\r\n  };\r\n\r\n  calculateHammingCode = () => {\r\n    const result = hammingCode(this.state.hammingCode.char);\r\n    this.setState({\r\n      hammingCode: {\r\n        ...this.state.hammingCode,\r\n        result\r\n      }\r\n    });\r\n  };\r\n\r\n  fixHammingCode = () => {\r\n    const resultFix = fixHammingCode(this.state.hammingCode.hammingCode);\r\n    this.setState({\r\n      hammingCode: {\r\n        ...this.state.hammingCode,\r\n        resultFix\r\n      }\r\n    });\r\n  };\r\n\r\n  calculateCrc = () => {\r\n    const { crc } = this.state;\r\n    const result = crcCalculate(crc.word, crc.g);\r\n    this.setState({\r\n      crc: {\r\n        ...crc,\r\n        result\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { img, imgModal, udpChecksum, hammingCode, crc } = this.state;\r\n    return (\r\n      <>\r\n        <Segment>\r\n          <Header>BinaryAlgorithms</Header>\r\n        </Segment>\r\n        <Segment>\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Grid.Column width={8}>\r\n                <Grid.Row>\r\n                  <Grid.Column width={16}>\r\n                    <Segment>\r\n                      <Header>UDP Checksum 16-bit</Header>\r\n                    </Segment>\r\n                    <Segment>\r\n                      <Grid>\r\n                        <Grid.Row>\r\n                          <Grid.Column width={6}>\r\n                            <Form>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Word\"\r\n                                  data-name=\"word\"\r\n                                  data-algorithm=\"udpChecksum\"\r\n                                  value={udpChecksum.word}\r\n                                  fluid\r\n                                  size=\"large\"\r\n                                  onChange={this.handleChangeInput}\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field>\r\n                                <Button\r\n                                  color=\"teal\"\r\n                                  content={\r\n                                    udpChecksum.word\r\n                                      ? \"Calculate UDP checksum 16-bit\"\r\n                                      : \"Input a word first\"\r\n                                  }\r\n                                  icon=\"calculator\"\r\n                                  fluid\r\n                                  onClick={this.calculateUDPChecksum}\r\n                                  disabled={!udpChecksum.word}\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Result\"\r\n                                  data-name=\"result\"\r\n                                  data-algorithm=\"udpChecksum\"\r\n                                  value={udpChecksum.result}\r\n                                  fluid\r\n                                  size=\"large\"\r\n                                />\r\n                              </Form.Field>\r\n                            </Form>\r\n                          </Grid.Column>\r\n                          <Grid.Column width={10}>\r\n                            <Image\r\n                              src={udpChecksumExample}\r\n                              bordered\r\n                              fluid\r\n                              onClick={() =>\r\n                                this.handleZoomImage(udpChecksumExample)\r\n                              }\r\n                            />\r\n                          </Grid.Column>\r\n                        </Grid.Row>\r\n                      </Grid>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n              </Grid.Column>\r\n              <Grid.Column width={8}>\r\n                <Grid.Row>\r\n                  <Grid.Column width={16}>\r\n                    <Segment>\r\n                      <Header>Hamming Code of a 8-bit character</Header>\r\n                    </Segment>\r\n                    <Segment>\r\n                      <Grid>\r\n                        <Grid.Row>\r\n                          <Grid.Column width={6}>\r\n                            <Form>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Char\"\r\n                                  data-name=\"char\"\r\n                                  data-algorithm=\"hammingCode\"\r\n                                  value={hammingCode.char}\r\n                                  size=\"large\"\r\n                                  fluid\r\n                                  onChange={this.handleChangeInput}\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field>\r\n                                <Button\r\n                                  color=\"teal\"\r\n                                  content={\r\n                                    hammingCode.char\r\n                                      ? \"Calculate Hamming code of \" +\r\n                                        hammingCode.char\r\n                                      : \"Input a character first\"\r\n                                  }\r\n                                  icon=\"calculator\"\r\n                                  fluid\r\n                                  onClick={this.calculateHammingCode}\r\n                                  disabled={!hammingCode.char}\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Result\"\r\n                                  data-name=\"result\"\r\n                                  data-algorithm=\"hammingCode\"\r\n                                  value={hammingCode.result}\r\n                                  fluid\r\n                                  size=\"large\"\r\n                                />\r\n                              </Form.Field>\r\n                            </Form>\r\n                          </Grid.Column>\r\n                          <Grid.Column width={10}>\r\n                            <Image\r\n                              src={hammingCodeExample}\r\n                              bordered\r\n                              fluid\r\n                              onClick={() =>\r\n                                this.handleZoomImage(hammingCodeExample)\r\n                              }\r\n                            />\r\n                          </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Divider />\r\n                        <Grid.Row>\r\n                          <Grid.Column width={8}>\r\n                            <Form>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Hamming code\"\r\n                                  data-name=\"hammingCode\"\r\n                                  data-algorithm=\"hammingCode\"\r\n                                  value={hammingCode.hammingCode}\r\n                                  size=\"large\"\r\n                                  fluid\r\n                                  onChange={this.handleChangeInput}\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field>\r\n                                <Button\r\n                                  color=\"teal\"\r\n                                  content=\"Fix hamming Code\"\r\n                                  icon=\"calculator\"\r\n                                  fluid\r\n                                  onClick={this.fixHammingCode}\r\n                                  disabled={!hammingCode.hammingCode}\r\n                                />\r\n                              </Form.Field>\r\n                            </Form>\r\n                          </Grid.Column>\r\n                          <Grid.Column width={8}>\r\n                            <Form>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Result\"\r\n                                  data-name=\"hammingCode\"\r\n                                  data-algorithm=\"hammingCode\"\r\n                                  value={\r\n                                    typeof hammingCode.resultFix == \"object\"\r\n                                      ? hammingCode.resultFix[\"hammingCode\"]\r\n                                      : \"\"\r\n                                  }\r\n                                  fluid\r\n                                  size=\"large\"\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Original character\"\r\n                                  data-name=\"char\"\r\n                                  data-algorithm=\"hammingCode\"\r\n                                  value={\r\n                                    typeof hammingCode.resultFix == \"object\"\r\n                                      ? hammingCode.resultFix[\"char\"]\r\n                                      : \"\"\r\n                                  }\r\n                                  fluid\r\n                                  size=\"large\"\r\n                                />\r\n                              </Form.Field>\r\n                            </Form>\r\n                          </Grid.Column>\r\n                        </Grid.Row>\r\n                      </Grid>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column width={16}>\r\n                <Segment>\r\n                  <Header>CRC Algorithm</Header>\r\n                </Segment>\r\n                <Segment>\r\n                  <Grid>\r\n                    <Grid.Row>\r\n                      <Grid.Column width={6}>\r\n                        <Form>\r\n                          <Form.Field>\r\n                            <Input\r\n                              label=\"Word\"\r\n                              data-name=\"word\"\r\n                              data-algorithm=\"crc\"\r\n                              value={crc.word}\r\n                              size=\"large\"\r\n                              fluid\r\n                              onChange={this.handleChangeInput}\r\n                            />\r\n                          </Form.Field>\r\n                          <Form.Field>\r\n                            <Input\r\n                              label=\"G\"\r\n                              data-name=\"g\"\r\n                              data-algorithm=\"crc\"\r\n                              value={crc.g}\r\n                              size=\"large\"\r\n                              fluid\r\n                              onChange={this.handleChangeInput}\r\n                            />\r\n                          </Form.Field>\r\n                          <Form.Field>\r\n                            <Button\r\n                              color=\"teal\"\r\n                              content={\r\n                                crc.word ? \"Calculate R\" : \"Input a word first\"\r\n                              }\r\n                              icon=\"calculator\"\r\n                              fluid\r\n                              onClick={this.calculateCrc}\r\n                              disabled={!crc.word}\r\n                            />\r\n                          </Form.Field>\r\n                          <Form.Field>\r\n                            <Input\r\n                              label=\"Result\"\r\n                              data-name=\"result\"\r\n                              data-algorithm=\"crc\"\r\n                              value={crc.result}\r\n                              fluid\r\n                              size=\"large\"\r\n                            />\r\n                          </Form.Field>\r\n                        </Form>\r\n                      </Grid.Column>\r\n                      <Grid.Column width={10}>\r\n                        <Image\r\n                          src={crcExample}\r\n                          bordered\r\n                          fluid\r\n                          onClick={() => this.handleZoomImage(crcExample)}\r\n                        />\r\n                      </Grid.Column>\r\n                    </Grid.Row>\r\n                  </Grid>\r\n                </Segment>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n        <ImageModal\r\n          img={img}\r\n          imgModal={imgModal}\r\n          handleCloseModal={this.handleCloseModal}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BinaryAlgorithms;\r\n","export default function crcCalculate(word, G) {\r\n  let D = \"\";\r\n  for (let char of word) {\r\n    D += \"0\" + char.charCodeAt(0).toString(2);\r\n  }\r\n  let r = G.length - 1;\r\n  for (let i = 0; i < r; i++) {\r\n    D += \"0\";\r\n  }\r\n  D = D.split(\"\");\r\n  if (D[0] == 0) {\r\n    D.shift();\r\n  }\r\n  G = G.split(\"\");\r\n  while (D.length >= G.length) {\r\n    for (let i = 0; i < G.length; i++) {\r\n      D[i] = D[i] ^ G[i];\r\n    }\r\n    while (D[0] == 0 && D.length >= G.length) {\r\n      D.shift();\r\n    }\r\n  }\r\n  return D.join(\"\");\r\n}\r\n","import React from \"react\";\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport ShortestPath from \"./component/feature/shortest-path/ShortestPath\";\r\nimport Schedule from \"./component/feature/schedule/schedule\";\r\nimport BinaryAlgorithms from \"./component/feature/binary-algorithms/BinaryAlgorithms\";\r\nconst Routes = () => {\r\n  return (\r\n    <>\r\n      <Route path=\"/feature/dijkstra/\" component={ShortestPath} />\r\n      <Route path=\"/feature/schedule/\" component={Schedule} />\r\n      <Route path=\"/feature/binary-algorithms/\" component={BinaryAlgorithms} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport Navbar from \"./component/layout/Navbar\";\r\nimport SideMenu from \"./component/layout/SideMenu\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\nimport Routes from \"./routes\";\r\nclass App extends Component {\r\n  state = {\r\n    dropdownMenuStyle: {\r\n      display: \"none\"\r\n    }\r\n  };\r\n\r\n  handleToggleDropdownMenu = () => {\r\n    let newState = Object.assign({}, this.state);\r\n    if (newState.dropdownMenuStyle.display === \"none\") {\r\n      newState.dropdownMenuStyle = { display: \"flex\" };\r\n    } else {\r\n      newState.dropdownMenuStyle = { display: \"none\" };\r\n    }\r\n\r\n    this.setState(newState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <Grid padded>\r\n            <Grid.Column width={2}>\r\n              <SideMenu />\r\n            </Grid.Column>\r\n            <Grid.Column width={14} floated=\"right\" id=\"content\">\r\n              <Routes />\r\n            </Grid.Column>\r\n          </Grid>\r\n          <ToastContainer />\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}