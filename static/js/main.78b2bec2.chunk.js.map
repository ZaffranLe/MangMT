{"version":3,"sources":["component/feature/binary-algorithms/udp-checksum-example.png","component/feature/binary-algorithms/hamming-code-example.jpg","component/feature/binary-algorithms/crc-example.png","component/layout/SideMenu.js","component/feature/shortest-path/dijkstra-algorithm.js","component/feature/shortest-path/bellman-ford-algorithm.js","component/feature/shortest-path/ShortestPath.js","component/feature/schedule/schedule-algorithm.js","component/feature/schedule/schedule.js","component/feature/binary-algorithms/udp-checksum-algorithm.js","component/feature/binary-algorithms/hamming-algorithm.js","component/feature/binary-algorithms/BinaryAlgorithms.js","component/feature/binary-algorithms/crc-algorithm.js","component/feature/ip-subnet/subnet-data.js","component/feature/ip-subnet/ip-subnet-algorithm.js","component/feature/ip-subnet/IPSubnet.js","routes.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SideMenu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleItemClick","e","_ref","name","setState","activeItem","state","react_default","a","createElement","Sidebar","as","Menu","animation","icon","inverted","vertical","visible","width","Item","Icon","react_router_dom","to","active","onClick","Component","_","require","data","nodes","id","links","myConfig","height","highlightDegree","highlightOpacity","linkHighlightBehavior","nodeHighlightBehavior","node","color","fontColor","fontSize","fontWeight","highlightColor","highlightFontSize","highlightFontWeight","highlightStrokeColor","highlightStrokeWidth","labelProperty","mouseCursor","opacity","renderLabel","size","strokeColor","strokeWidth","svg","symbolType","link","d3","gravity","NodeModal","handleAddLinkForm","numOfLink","handleChange","currentLink","objectSpread","defineProperty","target","value","handleCreateLink","_this$state","currentNode","link1","distance","source","push","link2","label","toast","success","currentNodeLinks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","length","error","handleRemoveLink","arguments","Boolean","linksFiltered","filter","created","nextProps","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_this2","_this$state2","_this$props","nodeModal","handleCloseModal","rows","_loop","i","Grid","Row","key","Column","Input","type","Button","negative","onChange","positive","Modal","open","onClose","Header","Content","Segment","content","map","row","indexx","Actions","ShortestPath","_this3","numOfNode","String","fromCharCode","handleOpenModal","currentNodeLink","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","handleChangePathColor","way","split","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","forceUpdate","getDijkstraResult","dijkstraTables","results","_loop2","obj","currentValue","Infinity","values","marked","_loop3","_nodes","_i","otherNodes","cloneDeep","other","min","markedNodes","parseInt","slice","console","log","_loop4","result","dijkstraTable","headerCells","footerCells","cells","cell","lastNode","bodyRows","dijkstra","panes","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","table","menuItem","render","Tab","Pane","Table","index","HeaderCell","Body","cellIndex","Cell","Fragment","Footer","_iterator6","dijkstraResult","getBellmanFordResult","bellmanFordResults","bellmanFordResult","originalNodes","originalNode","_originalNodes","startNode","firstNodes","originalNodesClone","otherNode","_i2","_firstNodes","firstNode","currentNodes","_i3","_currentNodes","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","indexOf","nodeList","_i4","_results","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","resultNode","sort","node1","node2","minValue","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","nodeValue","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","singleResult","bellmanFord","idx","react","handleChooseAccordion","titleProps","newIndex","activeIndex","handleCalculate","handleChangeTextArea","dataTA","textArea","toUpperCase","linkText","_this4","_this$state3","ShortestPath_NodeModal","lib","config","onClickNode","Accordion","Title","max","Form","Popup","trigger","TextArea","on","header","schedule","employees","NamNH20","group","maxShift","dayShift","dayShiftAsFirst","dayShiftAsSecond","firstOnSecondRate","options","weekendShift","dayWithG2","DatNT11","VanQTH","TungPT15","ThoVH3","GiangHT7","ToanNV32","LucNV6","LongTT2","AnhNTV9","TuanNA106","SangDV4","ThuyNN9","HuanHV3","TuTT17","DungNT173","checkDayOption","date","option","getDate","checkGroupOf2Emp","emp1","emp2","chooseRandom","Math","floor","random","chooseEmployee","empId","listOption","day","removeEmployeeFromList","list","splice","isWeekend","getDay","DragAndDropCalendar","withDragAndDrop","Calendar","empColor","bgColor","TuanLPM","moment","locale","localizer","momentLocalizer","allViews","keys","Views","k","ColoredDateCellWrapper","children","React","cloneElement","Children","only","style","backgroundColor","Schedule","createSchedule","year","month","weekends","scheduled","numOfDaysInMonth","Date","employeesClone","listEmployeeId","randomEmp1","days","today","_listEmployeeId","emp","reverse","sortBy","chooseEmp1","chooseEmp2","listEmployeeIdClone","currentDay","rate","shift1","shift2","_schedule","getSchedule","events","event1","event2","moveEvent","_ref2","event","start","end","droppedOnAllDaySlot","isAllDay","allDay","updatedEvent","nextEvents","toConsumableArray","handleSelect","_ref3","title","window","prompt","concat","getFullYear","getMonth","forEach","selectable","onEventDrop","views","step","defaultDate","components","timeSlotWrapper","onSelectSlot","eventPropGetter","BIN_CARRY_OUT","sum2Bin","bin1","bin2","sum","isCarryOut","bin","isExponentOf2","num","log2","round","hammingCode","input","charCodeAt","toString","bitArr","shift","pList","binaries","j","_pList","countBit1","bit","join","calculateHammingCode","udpChecksumExample","hammingCodeExample","crcExample","text","ImageModal","img","imgModal","Image","src","bordered","fluid","BinaryAlgorithms","handleZoomImage","handleChangeInput","algorithm","parentElement","dataset","calculateUDPChecksum","word","binaryString","udp16bNumbers","_udp16bNumbers","udpChecksum","handleChangeOption","hamming","fixHammingCode","resultFix","hammingCodeAsObjects","falseCount","_pList2","bitObj","wrongBitIndex","_pList3","originalBinaries","calculateCrc","crc","G","D","r","crcCalculate","g","Field","data-name","data-algorithm","disabled","Dropdown","defaultValue","labelPosition","Divider","BinaryAlgorithms_ImageModal","subnets","ip","cidr","decimalToBinary","binary","binToDecimal","pow","decimalToHexa","hexa","ipSubnet","subnet","test","ipBinary","clone","octet","subnetBinary","networkAddrBinary","networkAddr","jumpIndex","jump","broadcast","totalNumOfHosts","wildcardAddr","ipOctets","subnetOptions","IPSubnet","handleChangeIp","handleChangeSubnet","placeholder","selection","Message","warning","item","Routes","react_router","path","component","App","dropdownMenuStyle","display","handleToggleDropdownMenu","newState","assign","className","padded","layout_SideMenu","floated","routes","react_toastify","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78b2bec2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/udp-checksum-example.979d92c8.png\";","module.exports = __webpack_public_path__ + \"static/media/hamming-code-example.50d928f8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/crc-example.680335b0.png\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu, Sidebar, Icon } from \"semantic-ui-react\";\r\n\r\nclass SideMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeItem: \"\"\r\n        };\r\n    }\r\n\r\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name });\r\n\r\n    render() {\r\n        const { activeItem } = this.state;\r\n        return (\r\n            <Sidebar\r\n                as={Menu}\r\n                animation=\"push\"\r\n                icon=\"labeled\"\r\n                inverted\r\n                vertical\r\n                visible={true}\r\n                width=\"thin\"\r\n            >\r\n                <Menu.Item as=\"a\">\r\n                    <Icon name=\"home\" />\r\n                    Home\r\n                </Menu.Item>\r\n                <Link to=\"/feature/dijkstra\">\r\n                    <Menu.Item\r\n                        name=\"dijkstra\"\r\n                        active={activeItem === \"dijkstra\"}\r\n                        onClick={this.handleItemClick}\r\n                    >\r\n                        Dijkstra / Bellman-Ford\r\n                    </Menu.Item>\r\n                </Link>\r\n                <Link to=\"/feature/binary-algorithms\">\r\n                    <Menu.Item\r\n                        name=\"binary-algorithms\"\r\n                        active={activeItem === \"binary-algorithms\"}\r\n                        onClick={this.handleItemClick}\r\n                    >\r\n                        Binary algorithms\r\n                    </Menu.Item>\r\n                </Link>\r\n                <Link to=\"/feature/ip-subnet-v4\">\r\n                    <Menu.Item\r\n                        name=\"ip-subnet-v4\"\r\n                        active={activeItem === \"ip-subnet-v4\"}\r\n                        onClick={this.handleItemClick}\r\n                    >\r\n                        IPv4 Subnet\r\n                    </Menu.Item>\r\n                </Link>\r\n                <Link to=\"/feature/schedule\">\r\n                    <Menu.Item\r\n                        name=\"schedule\"\r\n                        active={activeItem === \"schedule\"}\r\n                        onClick={this.handleItemClick}\r\n                    >\r\n                        NOC NET Schedule\r\n                    </Menu.Item>\r\n                </Link>\r\n            </Sidebar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","const _ = require(\"lodash\");\r\n\r\nexport default function dijkstra(data) {\r\n    const nodes = [];\r\n    const results = [];\r\n    for (let node of data.nodes) {\r\n        let obj = {};\r\n        obj.node = node.id;\r\n        obj.way = node.id;\r\n        obj.currentValue = Infinity;\r\n        obj.values = [];\r\n        obj.links = data.links.filter(link => {\r\n            return link.source === node.id;\r\n        });\r\n        obj.marked = false;\r\n        nodes.push(obj);\r\n    }\r\n\r\n    for (let node of nodes) {\r\n        let otherNodes = _.cloneDeep(\r\n            nodes.filter(other => {\r\n                return other !== node;\r\n            })\r\n        );\r\n        let min = Infinity;\r\n        let markedNodes = [];\r\n        let currentNode = _.cloneDeep(node);\r\n        currentNode.currentValue = 0;\r\n        markedNodes.push(node);\r\n        while (markedNodes.length < nodes.length) {\r\n            for (let other of otherNodes) { \r\n                for (let link of currentNode.links) {\r\n                    if (link.target === other.node) {\r\n                        if (\r\n                            other.currentValue >\r\n                            currentNode.currentValue +\r\n                                parseInt(link.distance, 10)\r\n                        ) {\r\n                            other.way = currentNode.way + other.node;\r\n                            other.currentValue =\r\n                                currentNode.currentValue +\r\n                                parseInt(link.distance, 10);\r\n                        }\r\n                    }\r\n                }\r\n                if (min > other.currentValue) {\r\n                    min = other.currentValue;\r\n                }\r\n                let obj = {};\r\n                obj[\"value\"] = other.currentValue;\r\n                obj[\"lastNode\"] = other.way.slice(\r\n                    other.way.length - 2,\r\n                    other.way.length - 1\r\n                );\r\n                other.values.push(obj);\r\n                console.log(other.node);\r\n            }\r\n            for (let other of otherNodes) {\r\n                if (other.currentValue === min) {\r\n                    other.marked = true;\r\n                    currentNode = _.cloneDeep(other);\r\n                    markedNodes.push(other);\r\n                    otherNodes = otherNodes.filter(node => {\r\n                        return node !== other;\r\n                    });\r\n                    min = Infinity;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        results.push(markedNodes);\r\n    }\r\n    const dijkstraTables = [];\r\n    results.map(result => {\r\n        let dijkstraTable = {};\r\n        dijkstraTable.headerCells = [];\r\n        dijkstraTable.bodyRows = [];\r\n        dijkstraTable.footerCells = [];\r\n        result.map(node => {\r\n            dijkstraTable.headerCells.push(node[\"node\"]);\r\n            dijkstraTable.footerCells.push(node[\"way\"]);\r\n            return true;\r\n        });\r\n        for (let i = 0; i < result.length; i++) {\r\n            let cells = [];\r\n            result.map(node => {\r\n                let cell = {};\r\n                cell.marked = false;\r\n                if (Boolean(node[\"values\"][i])) {\r\n                    cell.value = node[\"values\"][i][\"value\"];\r\n                    cell.lastNode = node[\"values\"][i][\"lastNode\"];\r\n                    if (i === node[\"values\"].length - 1) {\r\n                        cell.marked = true;\r\n                    }\r\n                } else {\r\n                    cell.value = \"-\";\r\n                    cell.lastNode = \"-\";\r\n                }\r\n                return cells.push(cell);\r\n            });\r\n            dijkstraTable.bodyRows.push(cells);\r\n        }\r\n        return dijkstraTables.push(dijkstraTable);\r\n    });\r\n    return dijkstraTables;\r\n}\r\n","const _ = require(\"lodash\");\r\n\r\n// const data = {\r\n//   nodes: [\r\n//     {\r\n//       id: \"A\"\r\n//     },\r\n//     {\r\n//       id: \"B\"\r\n//     },\r\n//     {\r\n//       id: \"C\"\r\n//     },\r\n//     {\r\n//       id: \"D\"\r\n//     },\r\n//     {\r\n//       id: \"E\"\r\n//     },\r\n//     {\r\n//       id: \"F\"\r\n//     }\r\n//   ],\r\n//   links: [\r\n//     {\r\n//       source: \"A\",\r\n//       target: \"B\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     },\r\n//     {\r\n//       source: \"B\",\r\n//       target: \"A\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     },\r\n//     {\r\n//       source: \"A\",\r\n//       target: \"C\",\r\n//       label: 1,\r\n//       distance: 1\r\n//     },\r\n//     {\r\n//       source: \"C\",\r\n//       target: \"A\",\r\n//       label: 1,\r\n//       distance: 1\r\n//     },\r\n//     {\r\n//       source: \"C\",\r\n//       target: \"E\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     },\r\n//     {\r\n//       source: \"E\",\r\n//       target: \"C\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     },\r\n//     {\r\n//       source: \"E\",\r\n//       target: \"B\",\r\n//       label: 5,\r\n//       distance: 5\r\n//     },\r\n//     {\r\n//       source: \"B\",\r\n//       target: \"E\",\r\n//       label: 5,\r\n//       distance: 5\r\n//     },\r\n//     {\r\n//       source: \"E\",\r\n//       target: \"D\",\r\n//       label: 3,\r\n//       distance: 3\r\n//     },\r\n//     {\r\n//       source: \"D\",\r\n//       target: \"E\",\r\n//       label: 3,\r\n//       distance: 3\r\n//     },\r\n//     {\r\n//       source: \"D\",\r\n//       target: \"B\",\r\n//       label: 4,\r\n//       distance: 4\r\n//     },\r\n//     {\r\n//       source: \"B\",\r\n//       target: \"D\",\r\n//       label: 4,\r\n//       distance: 4\r\n//     },\r\n//     {\r\n//       source: \"F\",\r\n//       target: \"D\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     },\r\n//     {\r\n//       source: \"D\",\r\n//       target: \"F\",\r\n//       label: 2,\r\n//       distance: 2\r\n//     }\r\n//   ]\r\n// };\r\n\r\nexport default function bellmanFord(data) {\r\n  const bellmanFordResult = [];\r\n  const originalNodes = [];\r\n  for (let node of data.nodes) {\r\n    let obj = {};\r\n    obj.node = node.id;\r\n    obj.way = node.id;\r\n    obj.currentValue = 0;\r\n    obj.links = data.links.filter(link => {\r\n      return link.source === node.id;\r\n    });\r\n    obj.marked = false;\r\n    originalNodes.push(obj);\r\n  }\r\n  for (let originalNode of originalNodes) {\r\n    const results = [];\r\n\r\n    let startNode = _.cloneDeep(originalNode);\r\n    let firstNodes = [];\r\n    let originalNodesClone = _.cloneDeep(originalNodes);\r\n    for (let link of startNode.links) {\r\n      for (let otherNode of originalNodesClone) {\r\n        if (link.target === otherNode.node) {\r\n          otherNode.currentValue = parseInt(link.distance, 10);\r\n          firstNodes.push(otherNode);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let firstNode of firstNodes) {\r\n      let currentNodes = [firstNode];\r\n      let nodes = _.cloneDeep(originalNodesClone);\r\n      for (let node of nodes) {\r\n        if (node !== firstNode) {\r\n          node.currentValue = 0;\r\n        }\r\n      }\r\n\r\n      while (currentNodes.length > 0) {\r\n        for (let currentNode of currentNodes) {\r\n          currentNode.marked = false;\r\n          for (let link of currentNode.links) {\r\n            for (let otherNode of nodes) {\r\n              if (link.target === otherNode.node) {\r\n                if (link.target !== firstNode.node) {\r\n                  if (\r\n                    otherNode.currentValue === 0 ||\r\n                    otherNode.currentValue >\r\n                      currentNode.currentValue + parseInt(link.distance, 10)\r\n                  ) {\r\n                    otherNode.currentValue =\r\n                      currentNode.currentValue + parseInt(link.distance, 10);\r\n                    otherNode.marked = true;\r\n                    otherNode.way = currentNode.way + otherNode.node;\r\n                  }\r\n                } else {\r\n                  otherNode.currentValue = firstNode.currentValue;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        currentNodes = currentNodes.filter(node => {\r\n          return node.marked;\r\n        });\r\n        for (let node of nodes) {\r\n          if (currentNodes.indexOf(node) === -1 && node.marked) {\r\n            currentNodes.push(node);\r\n          }\r\n        }\r\n      }\r\n      nodes = nodes.filter(node => {\r\n        return node.node !== startNode.node;\r\n      });\r\n      results.push(nodes);\r\n    }\r\n\r\n    let nodeList = _.cloneDeep(data.nodes);\r\n    for (let node of nodeList) {\r\n      node[\"values\"] = [];\r\n      for (let result of results) {\r\n        for (let resultNode of result) {\r\n          if (resultNode.node === node.id) {\r\n            node[\"values\"].push(resultNode);\r\n          }\r\n        }\r\n      }\r\n      node[\"values\"].sort((node1, node2) => {\r\n        return node1.way > node2.way;\r\n      });\r\n      if (node[\"values\"].length > 0) {\r\n        let minValue = node[\"values\"][0][\"currentValue\"];\r\n        for (let nodeValue of node[\"values\"]) {\r\n          if (minValue > nodeValue[\"currentValue\"]) {\r\n            minValue = nodeValue[\"currentValue\"];\r\n          }\r\n        }\r\n        for (let nodeValue of node[\"values\"]) {\r\n          if (minValue === nodeValue[\"currentValue\"]) {\r\n            nodeValue[\"marked\"] = true;\r\n            nodeValue[\"way\"] = startNode.node + nodeValue[\"way\"];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    firstNodes.sort((node1, node2) => {\r\n      return node1.way > node2.way;\r\n    });\r\n    let singleResult = {};\r\n    singleResult[\"firstNodes\"] = _.cloneDeep(firstNodes);\r\n    singleResult[\"startNode\"] = _.cloneDeep(startNode);\r\n    singleResult[\"nodeList\"] = nodeList.filter(node => {\r\n      return node[\"values\"].length > 0;\r\n    });\r\n    bellmanFordResult.push(singleResult);\r\n  }\r\n  return bellmanFordResult;\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n    Segment,\r\n    Header,\r\n    Grid,\r\n    Input,\r\n    Modal,\r\n    Button,\r\n    Tab,\r\n    Accordion,\r\n    Icon,\r\n    Table,\r\n    TextArea,\r\n    Form,\r\n    Popup\r\n} from \"semantic-ui-react\";\r\nimport { Graph } from \"react-d3-graph\";\r\nimport { toast } from \"react-toastify\";\r\nimport dijkstra from \"./dijkstra-algorithm\";\r\nimport bellmanFord from \"./bellman-ford-algorithm\";\r\nconst data = {\r\n    nodes: [\r\n        {\r\n            id: \"A\"\r\n        }\r\n    ],\r\n    links: []\r\n};\r\n\r\nconst myConfig = {\r\n    height: 400,\r\n    highlightDegree: 1,\r\n    highlightOpacity: 0.2,\r\n    linkHighlightBehavior: true,\r\n    nodeHighlightBehavior: true,\r\n    width: 775,\r\n    node: {\r\n        color: \"#fff\",\r\n        fontColor: \"black\",\r\n        fontSize: 20,\r\n        fontWeight: \"normal\",\r\n        highlightColor: \"red\",\r\n        highlightFontSize: 20,\r\n        highlightFontWeight: \"bold\",\r\n        highlightStrokeColor: \"SAME\",\r\n        highlightStrokeWidth: 1.5,\r\n        labelProperty: \"name\",\r\n        mouseCursor: \"pointer\",\r\n        opacity: 1,\r\n        renderLabel: true,\r\n        size: 450,\r\n        strokeColor: \"#000\",\r\n        strokeWidth: 1.5,\r\n        svg: \"\",\r\n        symbolType: \"circle\"\r\n    },\r\n    link: {\r\n        color: \"#d3d3d3\",\r\n        fontColor: \"black\",\r\n        fontSize: 20,\r\n        fontWeight: \"normal\",\r\n        highlightColor: \"blue\",\r\n        highlightFontSize: 20,\r\n        highlightFontWeight: \"normal\",\r\n        labelProperty: \"label\",\r\n        mouseCursor: \"pointer\",\r\n        opacity: 1,\r\n        renderLabel: true,\r\n        strokeWidth: 4\r\n    },\r\n    d3: {\r\n        gravity: -500\r\n    }\r\n};\r\n\r\nclass NodeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentNode: \"\",\r\n            numOfLink: 0,\r\n            currentNodeLinks: [],\r\n            currentLink: {\r\n                source: \"\",\r\n                target: \"\",\r\n                label: 0,\r\n                color: \"#d3d3d3\",\r\n                distance: 0\r\n            },\r\n            created: false\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const { currentNode } = nextProps;\r\n        const currentNodeLinks = [];\r\n        for (let link of data.links) {\r\n            if (link.source === currentNode) {\r\n                currentNodeLinks.push(link);\r\n            }\r\n        }\r\n        this.setState({\r\n            currentNode,\r\n            currentNodeLinks,\r\n            numOfLink: currentNodeLinks.length\r\n        });\r\n    }\r\n\r\n    handleAddLinkForm = () => {\r\n        this.setState({\r\n            numOfLink: this.state.numOfLink + 1\r\n        });\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            currentLink: {\r\n                ...this.state.currentLink,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    };\r\n\r\n    handleCreateLink = () => {\r\n        const { currentLink, currentNode } = this.state;\r\n        const links = data.links;\r\n        let link1 = currentLink;\r\n        if (currentLink.distance !== 0 && currentLink.target !== \"\") {\r\n            link1.source = currentNode;\r\n            links.push(link1);\r\n            let link2 = {};\r\n            link2.source = link1.target;\r\n            link2.target = currentNode;\r\n            link2.distance = link1.distance;\r\n            link2.label = link1.distance;\r\n            links.push(link2);\r\n            toast.success(\"Create link succeed!\");\r\n            const currentNodeLinks = [];\r\n            for (let link of data.links) {\r\n                if (link.source === currentNode) {\r\n                    currentNodeLinks.push(link);\r\n                }\r\n            }\r\n            this.setState({\r\n                currentNodeLinks,\r\n                numOfLink: currentNodeLinks.length\r\n            });\r\n        } else {\r\n            toast.error(\"Create link failed!\");\r\n        }\r\n    };\r\n\r\n    handleRemoveLink = (link = null) => {\r\n        if (Boolean(link)) {\r\n            let linksFiltered = data.links.filter(value => {\r\n                if (\r\n                    (value.source === link.source &&\r\n                        value.target === link.target) ||\r\n                    (value.source === link.target &&\r\n                        value.target === link.source)\r\n                ) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            data.links = linksFiltered;\r\n        }\r\n        this.setState({\r\n            numOfLink: this.state.numOfLink - 1\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            numOfLink,\r\n            currentNodeLinks,\r\n            currentNode,\r\n            currentLink\r\n        } = this.state;\r\n        const { nodeModal, handleCloseModal } = this.props;\r\n        const rows = [];\r\n        for (let i = 0; i < numOfLink; i++) {\r\n            if (i < currentNodeLinks.length) {\r\n                rows.push(\r\n                    <Grid.Row key={i}>\r\n                        <Grid.Column width={6}>\r\n                            <Input\r\n                                label=\"Target\"\r\n                                value={currentNodeLinks[i].target}\r\n                                type=\"text\"\r\n                            />\r\n                        </Grid.Column>\r\n                        <Grid.Column width={10}>\r\n                            <Input\r\n                                label=\"Distance\"\r\n                                value={currentNodeLinks[i].distance}\r\n                                type=\"number\"\r\n                            />\r\n                            <Button\r\n                                onClick={() =>\r\n                                    this.handleRemoveLink(currentNodeLinks[i])\r\n                                }\r\n                                negative\r\n                                icon=\"trash\"\r\n                            />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                );\r\n            } else {\r\n                rows.push(\r\n                    <Grid.Row key={i}>\r\n                        <Grid.Column width={6}>\r\n                            <Input\r\n                                onChange={this.handleChange}\r\n                                name=\"target\"\r\n                                label=\"Target\"\r\n                                type=\"text\"\r\n                                value={currentLink.target}\r\n                            />\r\n                        </Grid.Column>\r\n                        <Grid.Column width={10}>\r\n                            <Input\r\n                                onChange={this.handleChange}\r\n                                name=\"distance\"\r\n                                label=\"Distance\"\r\n                                type=\"number\"\r\n                                value={currentLink.distance}\r\n                            />\r\n                            <Button\r\n                                onClick={this.handleCreateLink}\r\n                                positive\r\n                                icon=\"checkmark\"\r\n                            />\r\n                            <Button\r\n                                onClick={() => this.handleRemoveLink()}\r\n                                negative\r\n                                icon=\"trash\"\r\n                            />\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                );\r\n            }\r\n        }\r\n        return (\r\n            <Modal open={nodeModal} onClose={handleCloseModal}>\r\n                <Modal.Header>Node {currentNode} config</Modal.Header>\r\n                <Modal.Content>\r\n                    <Segment>\r\n                        <Button\r\n                            positive\r\n                            onClick={this.handleAddLinkForm}\r\n                            content=\"Add link\"\r\n                            icon=\"plus\"\r\n                        />\r\n                    </Segment>\r\n                    <Grid>\r\n                        {rows.map((row, indexx) => {\r\n                            return row;\r\n                        })}\r\n                    </Grid>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button onClick={handleCloseModal}>Close</Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nclass ShortestPath extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            numOfNode: 1,\r\n            currentNode: \"\",\r\n            nodeModal: false,\r\n            dijkstraResult: [],\r\n            bellmanFordResult: [],\r\n            activeIndex: 0,\r\n            textArea: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            numOfNode: data.nodes.length\r\n        });\r\n    }\r\n\r\n    handleChange = e => {\r\n        let numOfNode = e.target.value;\r\n        this.setState({\r\n            numOfNode\r\n        });\r\n        if (e.target.value != 0 && e.target.value <= 10) {\r\n            let nodes = [];\r\n            for (let i = 0; i < numOfNode; i++) {\r\n                let node = {\r\n                    id: String.fromCharCode(65 + i)\r\n                };\r\n                nodes.push(node);\r\n            }\r\n\r\n            data.nodes = nodes;\r\n        }\r\n    };\r\n\r\n    handleOpenModal = currentNode => {\r\n        const currentNodeLink = [];\r\n        for (let link of data.links) {\r\n            if (link.source === currentNode) {\r\n                currentNodeLink.push(link);\r\n            }\r\n        }\r\n        this.setState({\r\n            currentNode,\r\n            nodeModal: true\r\n        });\r\n    };\r\n\r\n    handleCloseModal = () => {\r\n        this.setState({\r\n            nodeModal: false\r\n        });\r\n    };\r\n\r\n    handleChangePathColor = way => {\r\n        const nodes = way.split(\"\");\r\n        for (let link of data.links) {\r\n            link[\"color\"] = \"#d3d3d3\";\r\n        }\r\n        for (let i = 0; i < nodes.length - 1; i++) {\r\n            let source = nodes[i];\r\n            let target = nodes[i + 1];\r\n            for (let link of data.links) {\r\n                if (\r\n                    (link.source === source && link.target === target) ||\r\n                    (link.source === target && link.target === source)\r\n                ) {\r\n                    link[\"color\"] = \"red\";\r\n                }\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n    };\r\n\r\n    getDijkstraResult = () => {\r\n        const dijkstraTables = dijkstra(data);\r\n        const panes = [];\r\n        for (let table of dijkstraTables) {\r\n            panes.push({\r\n                menuItem: table.headerCells[0],\r\n                render: () => (\r\n                    <Tab.Pane>\r\n                        <Table>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    {table.headerCells.map((cell, index) => {\r\n                                        return (\r\n                                            <Table.HeaderCell key={index}>\r\n                                                {cell}\r\n                                            </Table.HeaderCell>\r\n                                        );\r\n                                    })}\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                                {table.bodyRows.map((row, index) => {\r\n                                    return (\r\n                                        <Table.Row key={index}>\r\n                                            {row.map((cell, cellIndex) => {\r\n                                                return (\r\n                                                    <Table.Cell key={cellIndex}>\r\n                                                        {cell.value !== Infinity ? (\r\n                                                            <>\r\n                                                                ({cell.value},\r\n                                                                {cell.lastNode}){\" \"}\r\n                                                                {cell.marked && (\r\n                                                                    <Icon\r\n                                                                        color=\"green\"\r\n                                                                        name=\"checkmark\"\r\n                                                                    />\r\n                                                                )}{\" \"}\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            \"Ꝏ\"\r\n                                                        )}\r\n                                                    </Table.Cell>\r\n                                                );\r\n                                            })}\r\n                                        </Table.Row>\r\n                                    );\r\n                                })}\r\n                            </Table.Body>\r\n                            <Table.Footer>\r\n                                <Table.Row>\r\n                                    {table.footerCells.map((way, index) => {\r\n                                        return (\r\n                                            <Table.HeaderCell key={index}>\r\n                                                {way.length > 1 ? (\r\n                                                    <Button\r\n                                                        positive\r\n                                                        onClick={() =>\r\n                                                            this.handleChangePathColor(\r\n                                                                way\r\n                                                            )\r\n                                                        }\r\n                                                    >\r\n                                                        {way}\r\n                                                    </Button>\r\n                                                ) : (\r\n                                                    \"X\"\r\n                                                )}\r\n                                            </Table.HeaderCell>\r\n                                        );\r\n                                    })}\r\n                                </Table.Row>\r\n                            </Table.Footer>\r\n                        </Table>\r\n                    </Tab.Pane>\r\n                )\r\n            });\r\n        }\r\n        this.setState({\r\n            dijkstraResult: panes\r\n        });\r\n    };\r\n\r\n    getBellmanFordResult = () => {\r\n        const bellmanFordResults = bellmanFord(data);\r\n        const panes = [];\r\n        for (let result of bellmanFordResults) {\r\n            panes.push({\r\n                menuItem: result.startNode.node,\r\n                render: () => (\r\n                    <Tab.Pane>\r\n                        <Table>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell>\r\n                                        Start: {result.startNode.node}\r\n                                    </Table.HeaderCell>\r\n                                    {result.firstNodes.map((node, index) => {\r\n                                        return (\r\n                                            <Table.HeaderCell key={index}>\r\n                                                {node.node}\r\n                                            </Table.HeaderCell>\r\n                                        );\r\n                                    })}\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                                {result.nodeList.map((node, index) => {\r\n                                    return (\r\n                                        <Table.Row key={index}>\r\n                                            <Table.Cell>{node.id}</Table.Cell>\r\n                                            {node.values.map((value, idx) => {\r\n                                                return (\r\n                                                    <Table.Cell key={idx}>\r\n                                                        {value.currentValue}{\" \"}\r\n                                                        {value.marked && (\r\n                                                            <Fragment>\r\n                                                                <Icon\r\n                                                                    color=\"green\"\r\n                                                                    name=\"checkmark\"\r\n                                                                />{\" \"}\r\n                                                                -\r\n                                                                <Button\r\n                                                                    positive\r\n                                                                    onClick={() =>\r\n                                                                        this.handleChangePathColor(\r\n                                                                            value.way\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    {value.way}\r\n                                                                </Button>\r\n                                                            </Fragment>\r\n                                                        )}\r\n                                                    </Table.Cell>\r\n                                                );\r\n                                            })}\r\n                                        </Table.Row>\r\n                                    );\r\n                                })}\r\n                            </Table.Body>\r\n                        </Table>\r\n                    </Tab.Pane>\r\n                )\r\n            });\r\n        }\r\n        this.setState({\r\n            bellmanFordResult: panes\r\n        });\r\n    };\r\n\r\n    handleChooseAccordion = (e, titleProps) => {\r\n        const { index } = titleProps;\r\n        const { activeIndex } = this.state;\r\n        const newIndex = activeIndex === index ? -1 : index;\r\n\r\n        this.setState({ activeIndex: newIndex });\r\n    };\r\n\r\n    handleCalculate = () => {\r\n        this.getBellmanFordResult();\r\n        this.getDijkstraResult();\r\n    };\r\n\r\n    handleChangeTextArea = (e, dataTA) => {\r\n        // eslint-disable-next-line\r\n        if (dataTA.value == \"\") {\r\n            data.links = [];\r\n        } else if (dataTA.value[dataTA.value.length - 1] === \"\\n\") {\r\n            let textArea = dataTA.value.toUpperCase()\r\n                .slice(0, dataTA.value.length - 1)\r\n                .split(\"\\n\");\r\n            data.links = [];\r\n            for (let linkText of textArea) {\r\n                linkText = linkText.split(\" \");\r\n                let link1 = {};\r\n                link1[\"source\"] = linkText[0];\r\n                link1[\"target\"] = linkText[1];\r\n                link1[\"distance\"] = linkText[2];\r\n                let link2 = {};\r\n                link2[\"label\"] = linkText[2];\r\n                link2[\"source\"] = linkText[1];\r\n                link2[\"target\"] = linkText[0];\r\n                link2[\"distance\"] = linkText[2];\r\n                data.links.push(link1);\r\n                data.links.push(link2);\r\n            }\r\n            this.setState({\r\n                dijkstraResult: [],\r\n                bellmanFordResult: []\r\n            })\r\n        }\r\n        this.forceUpdate();\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            currentNode,\r\n            currentNodeLink,\r\n            nodeModal,\r\n            activeIndex,\r\n            dijkstraResult,\r\n            bellmanFordResult\r\n        } = this.state;\r\n        return (\r\n            <>\r\n                <Segment>\r\n                    <Header>Shortest Path</Header>\r\n                    <NodeModal\r\n                        currentNode={currentNode}\r\n                        currentNodeLink={currentNodeLink}\r\n                        nodeModal={nodeModal}\r\n                        handleCloseModal={this.handleCloseModal}\r\n                    />\r\n                </Segment>\r\n                <Segment>\r\n                    <Grid>\r\n                        <Grid.Row>\r\n                            <Grid.Column width={8}>\r\n                                <Segment>\r\n                                    <Graph\r\n                                        id=\"node-graph\"\r\n                                        data={data}\r\n                                        config={myConfig}\r\n                                        onClickNode={this.handleOpenModal}\r\n                                    />\r\n                                </Segment>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={8}>\r\n                                <Grid.Row>\r\n                                    <Grid.Column width={16}>\r\n                                        <Segment>\r\n                                            <Accordion>\r\n                                                <Accordion.Title\r\n                                                    active={activeIndex === 1}\r\n                                                    index={1}\r\n                                                    onClick={\r\n                                                        this\r\n                                                            .handleChooseAccordion\r\n                                                    }\r\n                                                >\r\n                                                    <Header>\r\n                                                        Dijkstra Algorithm{\" \"}\r\n                                                        <Icon name=\"dropdown\" />\r\n                                                    </Header>\r\n                                                </Accordion.Title>\r\n                                                <Accordion.Content\r\n                                                    active={activeIndex === 1}\r\n                                                >\r\n                                                    <Tab\r\n                                                        panes={dijkstraResult}\r\n                                                    />\r\n                                                </Accordion.Content>\r\n\r\n                                                <Accordion.Title\r\n                                                    active={activeIndex === 2}\r\n                                                    index={2}\r\n                                                    onClick={\r\n                                                        this\r\n                                                            .handleChooseAccordion\r\n                                                    }\r\n                                                >\r\n                                                    <Header>\r\n                                                        Bellman-Ford Algorithm\r\n                                                        <Icon name=\"dropdown\" />\r\n                                                    </Header>\r\n                                                </Accordion.Title>\r\n                                                <Accordion.Content\r\n                                                    active={activeIndex === 2}\r\n                                                >\r\n                                                    <Tab\r\n                                                        panes={\r\n                                                            bellmanFordResult\r\n                                                        }\r\n                                                    />\r\n                                                </Accordion.Content>\r\n                                            </Accordion>\r\n                                        </Segment>\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                    <Segment>\r\n                        <Header>Configuration</Header>\r\n                        <Grid>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={3}>\r\n                                    <Input\r\n                                        name=\"numOfNode\"\r\n                                        min={1}\r\n                                        max={10}\r\n                                        type=\"number\"\r\n                                        value={this.state.numOfNode}\r\n                                        onChange={this.handleChange}\r\n                                        label=\"Number of node\"\r\n                                    />\r\n                                </Grid.Column>\r\n                                <Grid.Column width={11}>\r\n                                    {data.nodes.map((node, index) => {\r\n                                        return (\r\n                                            <Button\r\n                                                key={index}\r\n                                                color=\"teal\"\r\n                                                onClick={() =>\r\n                                                    this.handleOpenModal(\r\n                                                        node.id\r\n                                                    )\r\n                                                }\r\n                                            >\r\n                                                {node.id}\r\n                                            </Button>\r\n                                        );\r\n                                    })}\r\n                                </Grid.Column>\r\n                                <Grid.Column width={2}>\r\n                                    <Button\r\n                                        positive\r\n                                        onClick={this.handleCalculate}\r\n                                        content=\"Find shortest path\"\r\n                                    />\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={16}>\r\n                                    <Form>\r\n                                        <Popup\r\n                                            trigger={\r\n                                                <TextArea\r\n                                                    onChange={\r\n                                                        this\r\n                                                            .handleChangeTextArea\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            on=\"focus\"\r\n                                            content=\"Example: 'A B 2' => Link from A to B with weight = 2\"\r\n                                            header=\"Create link between Nodes\"\r\n                                        />\r\n                                    </Form>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Segment>\r\n                </Segment>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ShortestPath;\r\n","import _ from \"lodash\";\r\n\r\nconst LEAD_MAX_SHIFT = 3;\r\nconst PRO_MAX_SHIFT = 4;\r\nconst NORMAL_MAX_SHIFT = 4;\r\n\r\nlet schedule = [];\r\nconst employees = {\r\n    NamNH20: {\r\n        group: 1,\r\n        maxShift: LEAD_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    DatNT11: {\r\n        group: 1,\r\n        maxShift: LEAD_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    VanQTH: {\r\n        group: 1,\r\n        maxShift: LEAD_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    TungPT15: {\r\n        group: 1,\r\n        maxShift: LEAD_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    ThoVH3: {\r\n        group: 1,\r\n        maxShift: PRO_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    GiangHT7: {\r\n        group: 1,\r\n        maxShift: PRO_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [1, 8, 15, 22, 29],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    ToanNV32: {\r\n        group: 1,\r\n        maxShift: PRO_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [\r\n            15,\r\n            16,\r\n            17,\r\n            18,\r\n            19,\r\n            20,\r\n            21,\r\n            22,\r\n            23,\r\n            24,\r\n            25,\r\n            26,\r\n            27,\r\n            28,\r\n            29,\r\n            30\r\n        ],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    LucNV6: {\r\n        group: 1,\r\n        maxShift: NORMAL_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    LongTT2: {\r\n        group: 1,\r\n        maxShift: NORMAL_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    AnhNTV9: {\r\n        group: 1,\r\n        maxShift: NORMAL_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [2, 9, 16, 23, 30, 4, 6, 11, 13, 18, 20, 25, 27],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    TuanNA106: {\r\n        group: 1,\r\n        maxShift: NORMAL_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    SangDV4: {\r\n        group: 1,\r\n        maxShift: NORMAL_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    ThuyNN9: {\r\n        group: 2,\r\n        maxShift: NORMAL_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    HuanHV3: {\r\n        group: 2,\r\n        maxShift: NORMAL_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    TuTT17: {\r\n        group: 2,\r\n        maxShift: NORMAL_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    },\r\n    DungNT173: {\r\n        group: 2,\r\n        maxShift: NORMAL_MAX_SHIFT,\r\n        dayShift: 0,\r\n        dayShiftAsFirst: 1,\r\n        dayShiftAsSecond: 1,\r\n        firstOnSecondRate: 1,\r\n        options: [],\r\n        weekendShift: 0,\r\n        dayWithG2: 0,\r\n        done: false\r\n    }\r\n};\r\n\r\nfunction checkDayOption(date, option) {\r\n    // 15th day in month = 15\r\n    if (date.getDate() === option) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction checkGroupOf2Emp(emp1, emp2) {\r\n    if (emp1[\"group\"] === 2 && emp2[\"group\"] === 2) {\r\n        return false;\r\n    }\r\n    if (emp1[\"group\"] === 2 || emp2[\"group\"] === 2) {\r\n        if (emp1[\"dayWithG2\"] === 2 || emp2[\"dayWithG2\"] === 2) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction chooseRandom(max, min = 0) {\r\n    let randomPosition = Math.floor(Math.random() * (max - min) + min);\r\n    return randomPosition;\r\n}\r\n\r\nfunction chooseEmployee(empId, listOption, date) {\r\n    let day = date.getDate() - 1;\r\n    if (day > 0) {\r\n        if (Boolean(schedule[day - 1])) {\r\n            if (\r\n                schedule[day - 1][\"firstShift\"] === empId ||\r\n                schedule[day - 1][\"secondShift\"] === empId\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n        if (Boolean(schedule[day + 1])) {\r\n            if (\r\n                schedule[day + 1][\"firstShift\"] === empId ||\r\n                schedule[day + 1][\"secondShift\"] === empId\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    for (let option of listOption) {\r\n        if (!checkDayOption(date, option)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction removeEmployeeFromList(empId, list) {\r\n    list.splice(list.indexOf(empId), 1);\r\n}\r\n\r\nfunction isWeekend(date, weekends = []) {\r\n    if (\r\n        weekends.indexOf(date.getDate()) !== -1 ||\r\n        date.getDay() === 0 ||\r\n        date.getDay() === 6\r\n    ) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default function getSchedule(year, month, weekends = []) {\r\n    let scheduled = false;\r\n    const numOfDaysInMonth = new Date(year, month, 0).getDate();\r\n    while (!scheduled) {\r\n        scheduled = true;\r\n        const employeesClone = _.cloneDeep(employees);\r\n        const listEmployeeId = [\r\n            \"NamNH20\",\r\n            \"DatNT11\",\r\n            \"VanQTH\",\r\n            \"TungPT15\",\r\n            \"ToanNV32\",\r\n            \"ThoVH3\",\r\n            \"GiangHT7\",\r\n            \"LucNV6\",\r\n            \"LongTT2\",\r\n            \"AnhNTV9\",\r\n            \"TuanNA106\",\r\n            \"SangDV4\",\r\n            \"ThuyNN9\",\r\n            \"HuanHV3\",\r\n            \"TuTT17\",\r\n            \"DungNT173\"\r\n        ];\r\n        if (numOfDaysInMonth === 31) {\r\n            let randomEmp1 = chooseRandom(listEmployeeId.length, 7);\r\n            let randomEmp2 = chooseRandom(listEmployeeId.length, 7);\r\n            let emp1 = listEmployeeId[randomEmp1];\r\n            let emp2 = listEmployeeId[randomEmp2];\r\n            employeesClone[emp1][\"maxShift\"] += 1;\r\n            employeesClone[emp2][\"maxShift\"] += 1;\r\n        }\r\n        let days = [];\r\n        for (let i = 0; i < numOfDaysInMonth; i++) {\r\n            days[i] = {};\r\n            days[i][\"day\"] = i + 1;\r\n            days[i][\"numOfUnavailable\"] = 0;\r\n            let today = new Date(year, month, i + 1);\r\n            days[i][\"isWeekend\"] = today.getDay() === 6 || today.getDay() === 0;\r\n        }\r\n        schedule = [];\r\n        for (let emp of listEmployeeId) {\r\n            for (let option of employeesClone[emp][\"options\"]) {\r\n                days[option - 1][\"numOfUnavailable\"] += 1;\r\n            }\r\n        }\r\n        days = _.reverse(_.sortBy(days, [\"numOfUnavailable\", \"isWeekend\"]));\r\n        for (let day of days) {\r\n            let date = new Date(year, month - 1, day[\"day\"]);\r\n            let emp1 = \"\";\r\n            let chooseEmp1 = false;\r\n            let emp2 = \"\";\r\n            let chooseEmp2 = false;\r\n            let listEmployeeIdClone = _.cloneDeep(listEmployeeId);\r\n            while (\r\n                !chooseEmp1 &&\r\n                !chooseEmp2 &&\r\n                listEmployeeIdClone.length > 0\r\n            ) {\r\n                chooseEmp1 = true;\r\n                let randomNumber1 = chooseRandom(listEmployeeIdClone.length);\r\n                emp1 = listEmployeeIdClone[randomNumber1];\r\n                let listOption = employeesClone[emp1][\"options\"];\r\n                if (!chooseEmployee(emp1, listOption, date)) {\r\n                    chooseEmp1 = false;\r\n                }\r\n                if (\r\n                    employeesClone[emp1][\"weekendShift\"] > 1 &&\r\n                    listEmployeeIdClone.length > 1\r\n                ) {\r\n                    chooseEmp1 = false;\r\n                }\r\n                if (!chooseEmp1) {\r\n                    removeEmployeeFromList(emp1, listEmployeeIdClone);\r\n                    continue;\r\n                }\r\n                chooseEmp1 = true;\r\n                if (emp1 === \"NamNH20\" || emp1 === \"DatNT11\") {\r\n                    chooseEmp2 = true;\r\n                    emp2 = emp1 === \"NamNH20\" ? \"DatNT11\" : \"NamNH20\";\r\n                    let listOption = employeesClone[emp2][\"options\"];\r\n                    if (!chooseEmployee(emp2, listOption, date)) {\r\n                        removeEmployeeFromList(emp1, listEmployeeIdClone);\r\n                        removeEmployeeFromList(emp2, listEmployeeIdClone);\r\n                        chooseEmp1 = false;\r\n                        chooseEmp2 = false;\r\n                        continue;\r\n                    }\r\n                }\r\n                let randomNumber2 = 0;\r\n                while (!chooseEmp2 && listEmployeeIdClone.length > 0) {\r\n                    chooseEmp2 = true;\r\n                    randomNumber2 = chooseRandom(listEmployeeIdClone.length);\r\n                    emp2 = listEmployeeIdClone[randomNumber2];\r\n                    if (emp2 === \"NamNH20\" || emp2 === \"DatNT11\") {\r\n                        chooseEmp2 = false;\r\n                    }\r\n                    if (emp1 === emp2) {\r\n                        chooseEmp2 = false;\r\n                    }\r\n                    let listOption = employeesClone[emp2][\"options\"];\r\n                    if (\r\n                        employeesClone[emp1][\"firstOnSecondRate\"] > 1 &&\r\n                        employeesClone[emp2][\"firstOnSecondRate\"] > 1\r\n                    ) {\r\n                        chooseEmp2 = false;\r\n                    }\r\n                    if (\r\n                        checkGroupOf2Emp(\r\n                            employeesClone[emp1],\r\n                            employeesClone[emp2]\r\n                        )\r\n                    ) {\r\n                        if (!chooseEmployee(emp2, listOption, date)) {\r\n                            chooseEmp2 = false;\r\n                        }\r\n                    } else {\r\n                        chooseEmp2 = false;\r\n                    }\r\n                    if (\r\n                        employeesClone[emp2][\"weekendShift\"] > 1 &&\r\n                        listEmployeeIdClone.length > 1\r\n                    ) {\r\n                        chooseEmp2 = false;\r\n                    }\r\n                    if (!chooseEmp2) {\r\n                        removeEmployeeFromList(emp2, listEmployeeIdClone);\r\n                        continue;\r\n                    }\r\n                    chooseEmp2 = true;\r\n                }\r\n                if (chooseEmp1 && chooseEmp2) {\r\n                    let currentDay = day[\"day\"];\r\n                    schedule[currentDay - 1] = {};\r\n                    schedule[currentDay - 1][\"day\"] = currentDay;\r\n\r\n                    if (\r\n                        employeesClone[emp1][\"group\"] === 2 ||\r\n                        employeesClone[emp2][\"group\"] === 2\r\n                    ) {\r\n                        if (employeesClone[emp1][\"group\"] === 2) {\r\n                            employeesClone[emp2][\"dayWithG2\"] += 1;\r\n                        } else {\r\n                            employeesClone[emp1][\"dayWithG2\"] += 1;\r\n                        }\r\n                    }\r\n\r\n                    let rate =\r\n                        employeesClone[emp1][\"firstOnSecondRate\"] -\r\n                        employeesClone[emp2][\"firstOnSecondRate\"];\r\n                    let shift1 = \"\";\r\n                    let shift2 = \"\";\r\n                    if (rate > 0) {\r\n                        shift1 = emp2;\r\n                        shift2 = emp1;\r\n                    } else {\r\n                        shift1 = emp1;\r\n                        shift2 = emp2;\r\n                    }\r\n                    schedule[currentDay - 1][\"firstShift\"] = shift1;\r\n                    employeesClone[shift1][\"dayShift\"] += 1;\r\n                    employeesClone[shift1][\"dayShiftAsFirst\"] += 1;\r\n                    employeesClone[shift1][\"firstOnSecondRate\"] =\r\n                        employeesClone[shift1][\"dayShiftAsFirst\"] /\r\n                        employeesClone[shift1][\"dayShiftAsSecond\"];\r\n                    schedule[currentDay - 1][\"secondShift\"] = shift2;\r\n                    employeesClone[shift2][\"dayShift\"] += 1;\r\n                    employeesClone[shift2][\"dayShiftAsSecond\"] += 1;\r\n                    employeesClone[shift2][\"firstOnSecondRate\"] =\r\n                        employeesClone[shift2][\"dayShiftAsFirst\"] /\r\n                        employeesClone[shift2][\"dayShiftAsSecond\"];\r\n                    if (isWeekend(date, weekends)) {\r\n                        employeesClone[shift1][\"weekendShift\"] += 1;\r\n                        employeesClone[shift2][\"weekendShift\"] += 1;\r\n                    }\r\n\r\n                    if (\r\n                        employeesClone[emp1][\"dayShift\"] ===\r\n                        employeesClone[emp1][\"maxShift\"]\r\n                    ) {\r\n                        employeesClone[emp1][\"done\"] = true;\r\n                        removeEmployeeFromList(emp1, listEmployeeId);\r\n                    }\r\n\r\n                    if (\r\n                        employeesClone[emp2][\"dayShift\"] ===\r\n                        employeesClone[emp2][\"maxShift\"]\r\n                    ) {\r\n                        employeesClone[emp2][\"done\"] = true;\r\n                        removeEmployeeFromList(emp2, listEmployeeId);\r\n                    }\r\n                } else {\r\n                    removeEmployeeFromList(emp1, listEmployeeIdClone);\r\n                }\r\n            }\r\n        }\r\n        for (let day of schedule) {\r\n            if (!Boolean(day)) {\r\n                scheduled = false;\r\n                break;\r\n            }\r\n        }\r\n        if (scheduled) {\r\n            let result = {};\r\n            result[\"schedule\"] = schedule;\r\n            result[\"employees\"] = employeesClone;\r\n            return result;\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport getSchedule from \"./schedule-algorithm\";\r\nimport {\r\n    Grid,\r\n    Input,\r\n    Segment,\r\n    Header,\r\n    Button,\r\n    Tab,\r\n    Table,\r\n    Modal\r\n} from \"semantic-ui-react\";\r\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.scss\";\r\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\r\n\r\nconst empColor = {\r\n    NamNH20: {\r\n        color: \"black\",\r\n        bgColor: \"#00aa99\"\r\n    },\r\n    DatNT11: {\r\n        color: \"black\",\r\n        bgColor: \"#ff6600\"\r\n    },\r\n    GiangHT7: {\r\n        color: \"black\",\r\n        bgColor: \"#ffcc33\"\r\n    },\r\n    VanQTH: {\r\n        color: \"black\",\r\n        bgColor: \"#ffccff\"\r\n    },\r\n    TungPT15: {\r\n        color: \"white\",\r\n        bgColor: \"#000\"\r\n    },\r\n    ToanNV32: {\r\n        color: \"white\",\r\n        bgColor: \"#999\"\r\n    },\r\n    ThoVH3: {\r\n        color: \"black\",\r\n        bgColor: \"#9999ff\"\r\n    },\r\n    LucNV6: {\r\n        color: \"white\",\r\n        bgColor: \"#00cc00\"\r\n    },\r\n    LongTT2: {\r\n        color: \"black\",\r\n        bgColor: \"#ccff00\"\r\n    },\r\n    AnhNTV9: {\r\n        color: \"black\",\r\n        bgColor: \"#999966\"\r\n    },\r\n    TuanNA106: {\r\n        color: \"black\",\r\n        bgColor: \"#00ffff\"\r\n    },\r\n    SangDV4: {\r\n        color: \"white\",\r\n        bgColor: \"#336600\"\r\n    },\r\n    ThuyNN9: {\r\n        color: \"black\",\r\n        bgColor: \"#dddddd\"\r\n    },\r\n    HuanHV3: {\r\n        color: \"black\",\r\n        bgColor: \"#ffcccc\"\r\n    },\r\n    TuTT17: {\r\n        color: \"white\",\r\n        bgColor: \"#0066cc\"\r\n    },\r\n    DungNT173: {\r\n        color: \"black\",\r\n        bgColor: \"#ff3399\"\r\n    },\r\n    TuanLPM: {\r\n        color: \"black\",\r\n        bgColor: \"#ff9933\"\r\n    }\r\n};\r\n\r\nmoment.locale(\"vi-VN\");\r\nconst localizer = momentLocalizer(moment);\r\n\r\nlet allViews = Object.keys(Views).map(k => Views[k]);\r\n\r\nconst ColoredDateCellWrapper = ({ children }) =>\r\n    React.cloneElement(React.Children.only(children), {\r\n        style: {\r\n            backgroundColor: \"lightblue\"\r\n        }\r\n    });\r\n\r\nclass EmpModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal>\r\n        \r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nclass Schedule extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            events: [],\r\n            year: new Date().getFullYear(),\r\n            month: new Date().getMonth() + 1,\r\n            employees: {}\r\n        };\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    createSchedule = () => {\r\n        const { year, month } = this.state;\r\n        const result = getSchedule(this.state.year, this.state.month);\r\n        const events = [];\r\n        for (let day of result[\"schedule\"]) {\r\n            const event1 = {};\r\n            const event2 = {};\r\n            if (Boolean(day)) {\r\n                event1[\"title\"] = day[\"firstShift\"];\r\n                event1[\"start\"] = new Date(\r\n                    year,\r\n                    month - 1,\r\n                    day[\"day\"],\r\n                    7,\r\n                    0,\r\n                    0,\r\n                    0\r\n                );\r\n                event1[\"end\"] = new Date(\r\n                    year,\r\n                    month - 1,\r\n                    day[\"day\"],\r\n                    9,\r\n                    0,\r\n                    0,\r\n                    0\r\n                );\r\n                events.push(event1);\r\n                event2[\"title\"] = day[\"secondShift\"];\r\n                event2[\"start\"] = new Date(\r\n                    year,\r\n                    month - 1,\r\n                    day[\"day\"],\r\n                    11,\r\n                    0,\r\n                    0,\r\n                    0\r\n                );\r\n                event2[\"end\"] = new Date(\r\n                    year,\r\n                    month - 1,\r\n                    day[\"day\"],\r\n                    13,\r\n                    0,\r\n                    0,\r\n                    0\r\n                );\r\n                events.push(event2);\r\n            }\r\n        }\r\n        this.setState({\r\n            events,\r\n            employees: result[\"employees\"]\r\n        });\r\n    };\r\n\r\n    moveEvent = ({ event, start, end, isAllDay: droppedOnAllDaySlot }) => {\r\n        const { events } = this.state;\r\n\r\n        const idx = events.indexOf(event);\r\n        let allDay = event.allDay;\r\n\r\n        if (!event.allDay && droppedOnAllDaySlot) {\r\n            allDay = true;\r\n        } else if (event.allDay && !droppedOnAllDaySlot) {\r\n            allDay = false;\r\n        }\r\n\r\n        const updatedEvent = { ...event, start, end, allDay };\r\n\r\n        const nextEvents = [...events];\r\n        nextEvents.splice(idx, 1, updatedEvent);\r\n\r\n        this.setState({\r\n            events: nextEvents\r\n        });\r\n    };\r\n\r\n    handleSelect = ({ start, end }) => {\r\n        const title = window.prompt(\"Employee ID\");\r\n        if (title)\r\n            this.setState({\r\n                events: [\r\n                    ...this.state.events,\r\n                    {\r\n                        start,\r\n                        end,\r\n                        title\r\n                    }\r\n                ]\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const { employees } = this.state;\r\n        const rows = [];\r\n        Object.keys(employees).forEach((emp, index) => {\r\n            rows.push(\r\n                <Table.Row key={index}>\r\n                    <Table.Cell\r\n                        style={{\r\n                            backgroundColor: empColor[emp][\"bgColor\"],\r\n                            color: empColor[emp][\"color\"]\r\n                        }}\r\n                    >\r\n                        {emp}\r\n                    </Table.Cell>\r\n                    <Table.Cell>{employees[emp].group}</Table.Cell>\r\n                    <Table.Cell>\r\n                        {employees[emp].dayShift} - Max:{\" \"}\r\n                        {employees[emp].maxShift}\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        {employees[emp].dayShiftAsFirst - 1}\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        {employees[emp].dayShiftAsSecond - 1}\r\n                    </Table.Cell>\r\n                    <Table.Cell>{employees[emp].dayWithG2}</Table.Cell>\r\n                    <Table.Cell>{employees[emp].weekendShift}</Table.Cell>\r\n                    <Table.Cell>\r\n                        {employees[emp].done ? \"True\" : \"False\"}{\" \"}\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n            );\r\n        });\r\n\r\n        const panes = [\r\n            {\r\n                menuItem: \"Schedule\",\r\n                render: () => (\r\n                    <Segment>\r\n                        <DragAndDropCalendar\r\n                            selectable\r\n                            onEventDrop={this.moveEvent}\r\n                            style={{ height: 700 }}\r\n                            events={this.state.events}\r\n                            views={allViews}\r\n                            step={60}\r\n                            max={new Date()}\r\n                            defaultDate={new Date()}\r\n                            components={{\r\n                                timeSlotWrapper: ColoredDateCellWrapper\r\n                            }}\r\n                            onSelectSlot={this.handleSelect}\r\n                            localizer={localizer}\r\n                            eventPropGetter={event => {\r\n                                return {\r\n                                    style: {\r\n                                        backgroundColor:\r\n                                            empColor[event.title][\"bgColor\"],\r\n                                        color: empColor[event.title][\"color\"]\r\n                                    }\r\n                                };\r\n                            }}\r\n                        />\r\n                    </Segment>\r\n                )\r\n            },\r\n            {\r\n                menuItem: \"Info\",\r\n                render: () => (\r\n                    <Segment>\r\n                        <Table>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell>ID</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Group</Table.HeaderCell>\r\n                                    <Table.HeaderCell>\r\n                                        Number of shift\r\n                                    </Table.HeaderCell>\r\n                                    <Table.HeaderCell>\r\n                                        As first\r\n                                    </Table.HeaderCell>\r\n                                    <Table.HeaderCell>\r\n                                        As second\r\n                                    </Table.HeaderCell>\r\n                                    <Table.HeaderCell>\r\n                                        Shift with group 2\r\n                                    </Table.HeaderCell>\r\n                                    <Table.HeaderCell>\r\n                                        Shift on weekend\r\n                                    </Table.HeaderCell>\r\n                                    <Table.HeaderCell>Done</Table.HeaderCell>\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                                {rows.map(row => {\r\n                                    return row;\r\n                                })}\r\n                            </Table.Body>\r\n                        </Table>\r\n                    </Segment>\r\n                )\r\n            }\r\n        ];\r\n        return (\r\n            <>\r\n                <Segment>\r\n                    <Grid>\r\n                        <Grid.Row>\r\n                            <Grid.Column width={6}>\r\n                                <Header>NOC NET Scheudle</Header>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={4}>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"year\"\r\n                                    label=\"Year\"\r\n                                    min={new Date().getFullYear()}\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.year}\r\n                                />\r\n                            </Grid.Column>\r\n                            <Grid.Column width={4}>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"month\"\r\n                                    label=\"Month\"\r\n                                    min={1}\r\n                                    max={12}\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.month}\r\n                                />\r\n                            </Grid.Column>\r\n                            <Grid.Column width={2}>\r\n                                <Button\r\n                                    onClick={this.createSchedule}\r\n                                    positive\r\n                                    content=\"Create schedule\"\r\n                                />\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Segment>\r\n                <Segment>\r\n                    <Tab panes={panes} />\r\n                </Segment>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Schedule;\r\n","const BIN_CARRY_OUT = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];\r\n\r\nfunction sum2Bin(bin1, bin2) {\r\n  let sum = [];\r\n  let isCarryOut = false;\r\n  for (let i = 15; i >= 0; i--) {\r\n    let bin = bin1[i] + bin2[i];\r\n    if (isCarryOut) {\r\n      bin++;\r\n      isCarryOut = false;\r\n    }\r\n    if (bin >= 2) {\r\n      bin -= 2;\r\n      isCarryOut = true;\r\n    }\r\n    sum[i] = bin;\r\n  }\r\n  if (isCarryOut) {\r\n    return sum2Bin(sum, BIN_CARRY_OUT);\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport default function udp16CheckSum(word) {\r\n  let binaryString = \"\";\r\n  for (let i = 0; i < word.length; i++) {\r\n    binaryString += \"0\" + word[i].charCodeAt(0).toString(2);\r\n  }\r\n  if (word.length % 2) {\r\n    binaryString += \"00000000\";\r\n  }\r\n  console.log(binaryString)\r\n  let udp16bNumbers = [];\r\n  for (let i = 0; i < binaryString.length; i += 16) {\r\n    udp16bNumbers.push(\r\n      binaryString\r\n        .slice(i, i + 16)\r\n        .split(\"\")\r\n        .map(bit => {\r\n          return parseInt(bit, 16);\r\n        })\r\n    );\r\n  }\r\n  for (let num of udp16bNumbers) {\r\n    console.log(num)\r\n  }\r\n  while (udp16bNumbers.length > 1) {\r\n    for (let i = 0; i < udp16bNumbers.length - 1; i++) {\r\n      udp16bNumbers[i] = sum2Bin(udp16bNumbers[i], udp16bNumbers[i + 1]);\r\n      udp16bNumbers.splice(i + 1, 1);\r\n    }\r\n  }\r\n  const result = udp16bNumbers[0]\r\n    .map(bin => {\r\n      if (bin) return \"0\";\r\n      return \"1\";\r\n    })\r\n    .join(\"\");\r\n\r\n  return result;\r\n}","function isExponentOf2(num) {\r\n    return Math.log2(num) === Math.round(Math.log2(num));\r\n}\r\n\r\nfunction calculateHammingCode(hammingCode) {\r\n    const pList = [];\r\n    for (let i = 0; i < hammingCode.length; i++) {\r\n        if (isExponentOf2(i + 1)) {\r\n            let binaries = [];\r\n            for (let j = i; j < hammingCode.length; j += (i + 1) * 2) {\r\n                binaries = binaries.concat(\r\n                    hammingCode.slice(j, j < hammingCode.length && i + 1 + j)\r\n                );\r\n            }\r\n            let p = {};\r\n            p[\"binaries\"] = binaries.slice(1);\r\n            p[\"index\"] = i;\r\n            pList.push(p);\r\n        }\r\n    }\r\n    for (let p of pList) {\r\n        let countBit1 = 0;\r\n        for (let bit of p[\"binaries\"]) {\r\n            countBit1 += parseInt(bit, 10);\r\n        }\r\n        hammingCode[p[\"index\"]] = countBit1 % 2;\r\n    }\r\n\r\n    return hammingCode.join(\"\");\r\n}\r\n\r\nexport function hammingCode(input, type) {\r\n    let bin = \"\";\r\n    if (type === \"bin\") {\r\n        bin = input;\r\n    } else {\r\n        for (let char of input) {\r\n            bin += \"0\" + char.charCodeAt(0).toString(2);\r\n        }\r\n    }\r\n    let bitArr = bin.split(\"\");\r\n    let hammingCode = [];\r\n    let index = 0;\r\n    while (bitArr.length > 0) {\r\n        if (!isExponentOf2(index + 1)) {\r\n            hammingCode[index] = parseInt(bitArr.shift(), 10);\r\n        } else {\r\n            hammingCode[index] = false;\r\n        }\r\n        index++;\r\n    }\r\n    return calculateHammingCode(hammingCode);\r\n}\r\n\r\nexport function fixHammingCode(hammingCode) {\r\n    hammingCode = hammingCode.split(\"\");\r\n    let hammingCodeAsObjects = hammingCode.map((bit, i) => {\r\n        let obj = {};\r\n        obj[\"bit\"] = bit;\r\n        obj[\"index\"] = i;\r\n        obj[\"isTrue\"] = false;\r\n        obj[\"falseCount\"] = 0;\r\n        return obj;\r\n    });\r\n    const pList = [];\r\n    for (let i = 0; i < hammingCodeAsObjects.length; i++) {\r\n        if (isExponentOf2(i + 1)) {\r\n            let binaries = [];\r\n            for (let j = i; j < hammingCodeAsObjects.length; j += (i + 1) * 2) {\r\n                binaries = binaries.concat(\r\n                    hammingCodeAsObjects.slice(\r\n                        j,\r\n                        j < hammingCodeAsObjects.length && i + 1 + j\r\n                    )\r\n                );\r\n            }\r\n            let p = {};\r\n            p[\"binaries\"] = binaries.slice(1);\r\n            p[\"parityBit\"] = binaries[0];\r\n            pList.push(p);\r\n        }\r\n    }\r\n    let falseCount = 0;\r\n    for (let p of pList) {\r\n        let countBit1 = 0;\r\n        for (let bitObj of p[\"binaries\"]) {\r\n            countBit1 += parseInt(bitObj[\"bit\"], 10);\r\n        }\r\n        // eslint-disable-next-line\r\n        if (p[\"parityBit\"][\"bit\"] == countBit1 % 2) {\r\n            p[\"parityBit\"][\"isTrue\"] = true;\r\n            for (let bitObj of p[\"binaries\"]) {\r\n                bitObj[\"isTrue\"] = true;\r\n            }\r\n        } else {\r\n            p[\"parityBit\"][\"falseCount\"] += 1;\r\n            for (let bitObj of p[\"binaries\"]) {\r\n                bitObj[\"falseCount\"] += 1;\r\n            }\r\n            falseCount++;\r\n        }\r\n    }\r\n\r\n    let wrongBitIndex = -1;\r\n\r\n    for (let p of pList) {\r\n        if (\r\n            !p[\"parityBit\"][\"isTrue\"] &&\r\n            p[\"parityBit\"][\"falseCount\"] === falseCount\r\n        ) {\r\n            wrongBitIndex = p[\"parityBit\"][\"index\"];\r\n            break;\r\n        }\r\n        for (let bitObj of p[\"binaries\"]) {\r\n            if (!bitObj[\"isTrue\"] && bitObj[\"falseCount\"] === falseCount) {\r\n                wrongBitIndex = bitObj[\"index\"];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    let result = {};\r\n    if (wrongBitIndex === -1) {\r\n        result[\"hammingCode\"] = \"Hamming code is good!\";\r\n        return result;\r\n    } else {\r\n        // eslint-disable-next-line\r\n        hammingCode[wrongBitIndex] =\r\n            hammingCode[wrongBitIndex] == 1 ? \"0\" : \"1\";\r\n    }\r\n    let originalBinaries = hammingCode.filter((bit, i) => {\r\n        return !isExponentOf2(i + 1);\r\n    });\r\n    originalBinaries = originalBinaries.join(\"\");\r\n    hammingCode = hammingCode.join(\"\");\r\n    result[\"hammingCode\"] = hammingCode;\r\n    result[\"char\"] = String.fromCharCode(\r\n        parseInt(originalBinaries, 2).toString(10)\r\n    );\r\n    return result;\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport {\r\n    Segment,\r\n    Header,\r\n    Grid,\r\n    Image,\r\n    Modal,\r\n    Input,\r\n    Form,\r\n    Button,\r\n    Divider,\r\n    Dropdown\r\n} from \"semantic-ui-react\";\r\nimport udpChecksum from \"./udp-checksum-algorithm\";\r\nimport { hammingCode, fixHammingCode } from \"./hamming-algorithm\";\r\nimport crcCalculate from \"./crc-algorithm\";\r\nconst udpChecksumExample = require(\"./udp-checksum-example.png\");\r\nconst hammingCodeExample = require(\"./hamming-code-example.jpg\");\r\nconst crcExample = require(\"./crc-example.png\");\r\n\r\nconst options = [\r\n    {\r\n        key: \"binary\",\r\n        text: \"Binary\",\r\n        value: \"bin\"\r\n    },\r\n    {\r\n        key: \"word\",\r\n        text: \"Word\",\r\n        value: \"word\"\r\n    }\r\n];\r\n\r\nclass ImageModal extends Component {\r\n    render() {\r\n        const { img, imgModal, handleCloseModal } = this.props;\r\n        return (\r\n            <Modal onClose={handleCloseModal} open={imgModal} size=\"large\">\r\n                <Modal.Content>\r\n                    <Image src={img} bordered fluid />\r\n                </Modal.Content>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nclass BinaryAlgorithms extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imgModal: false,\r\n            img: \"\",\r\n            udpChecksum: {\r\n                word: \"\",\r\n                result: \"\"\r\n            },\r\n            hammingCode: {\r\n                input: \"\",\r\n                type: \"word\",\r\n                result: \"\",\r\n                hammingCode: \"\",\r\n                resultFix: \"\"\r\n            },\r\n            crc: {\r\n                word: \"\",\r\n                type: \"word\",\r\n                result: \"\",\r\n                g: \"\"\r\n            }\r\n        };\r\n    }\r\n\r\n    handleZoomImage = img => {\r\n        this.setState({\r\n            imgModal: true,\r\n            img\r\n        });\r\n    };\r\n\r\n    handleCloseModal = () => {\r\n        this.setState({\r\n            imgModal: false\r\n        });\r\n    };\r\n\r\n    handleChangeInput = e => {\r\n        const algorithm = e.target.parentElement.dataset.algorithm;\r\n        const name = e.target.parentElement.dataset.name;\r\n        this.setState({\r\n            [algorithm]: {\r\n                ...this.state[algorithm],\r\n                [name]: e.target.value\r\n            }\r\n        });\r\n    };\r\n\r\n    calculateUDPChecksum = () => {\r\n        const result = udpChecksum(this.state.udpChecksum.word);\r\n        this.setState({\r\n            udpChecksum: {\r\n                ...this.state.udpChecksum,\r\n                result\r\n            }\r\n        });\r\n    };\r\n\r\n    handleChangeOption = (e, data) => {\r\n        const { algorithm, value } = data;\r\n        this.setState({\r\n            [algorithm]: {\r\n                ...this.state[algorithm],\r\n                type: value\r\n            }\r\n        });\r\n    };\r\n\r\n    calculateHammingCode = () => {\r\n        const hamming = this.state.hammingCode;\r\n        const result = hammingCode(hamming.input, hamming.type);\r\n        this.setState({\r\n            hammingCode: {\r\n                ...this.state.hammingCode,\r\n                result\r\n            }\r\n        });\r\n    };\r\n\r\n    fixHammingCode = () => {\r\n        const resultFix = fixHammingCode(this.state.hammingCode.hammingCode);\r\n        this.setState({\r\n            hammingCode: {\r\n                ...this.state.hammingCode,\r\n                resultFix\r\n            }\r\n        });\r\n    };\r\n\r\n    calculateCrc = () => {\r\n        const { crc } = this.state;\r\n        const result = crcCalculate(crc.word, crc.type, crc.g);\r\n        this.setState({\r\n            crc: {\r\n                ...crc,\r\n                result\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { img, imgModal, udpChecksum, hammingCode, crc } = this.state;\r\n        return (\r\n            <>\r\n                <Segment>\r\n                    <Header>BinaryAlgorithms</Header>\r\n                </Segment>\r\n                <Segment>\r\n                    <Grid>\r\n                        <Grid.Row>\r\n                            <Grid.Column width={8}>\r\n                                <Grid.Row>\r\n                                    <Grid.Column width={16}>\r\n                                        <Segment>\r\n                                            <Header>\r\n                                                UDP Checksum Algorithm\r\n                                            </Header>\r\n                                        </Segment>\r\n                                        <Segment>\r\n                                            <Grid>\r\n                                                <Grid.Row>\r\n                                                    <Grid.Column width={6}>\r\n                                                        <Form>\r\n                                                            <Form.Field>\r\n                                                                <Input\r\n                                                                    label=\"Word\"\r\n                                                                    data-name=\"word\"\r\n                                                                    data-algorithm=\"udpChecksum\"\r\n                                                                    value={\r\n                                                                        udpChecksum.word\r\n                                                                    }\r\n                                                                    fluid\r\n                                                                    size=\"large\"\r\n                                                                    onChange={\r\n                                                                        this\r\n                                                                            .handleChangeInput\r\n                                                                    }\r\n                                                                />\r\n                                                            </Form.Field>\r\n                                                            <Form.Field>\r\n                                                                <Button\r\n                                                                    color=\"teal\"\r\n                                                                    content={\r\n                                                                        udpChecksum.word\r\n                                                                            ? \"Calculate UDP checksum 16-bit\"\r\n                                                                            : \"Input a word first\"\r\n                                                                    }\r\n                                                                    icon=\"calculator\"\r\n                                                                    fluid\r\n                                                                    onClick={\r\n                                                                        this\r\n                                                                            .calculateUDPChecksum\r\n                                                                    }\r\n                                                                    disabled={\r\n                                                                        !udpChecksum.word\r\n                                                                    }\r\n                                                                />\r\n                                                            </Form.Field>\r\n                                                            <Form.Field>\r\n                                                                <Input\r\n                                                                    label=\"Result\"\r\n                                                                    data-name=\"result\"\r\n                                                                    data-algorithm=\"udpChecksum\"\r\n                                                                    value={\r\n                                                                        udpChecksum.result\r\n                                                                    }\r\n                                                                    fluid\r\n                                                                    size=\"large\"\r\n                                                                />\r\n                                                            </Form.Field>\r\n                                                        </Form>\r\n                                                    </Grid.Column>\r\n                                                    <Grid.Column width={10}>\r\n                                                        <Image\r\n                                                            src={\r\n                                                                udpChecksumExample\r\n                                                            }\r\n                                                            bordered\r\n                                                            fluid\r\n                                                            onClick={() =>\r\n                                                                this.handleZoomImage(\r\n                                                                    udpChecksumExample\r\n                                                                )\r\n                                                            }\r\n                                                        />\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n                                            </Grid>\r\n                                        </Segment>\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={8}>\r\n                                <Grid.Row>\r\n                                    <Grid.Column width={16}>\r\n                                        <Segment>\r\n                                            <Header>\r\n                                                Hamming Code Algorithm\r\n                                            </Header>\r\n                                        </Segment>\r\n                                        <Segment>\r\n                                            <Grid>\r\n                                                <Grid.Row>\r\n                                                    <Grid.Column width={6}>\r\n                                                        <Form>\r\n                                                            <Form.Field>\r\n                                                                <Input\r\n                                                                    data-name=\"input\"\r\n                                                                    data-algorithm=\"hammingCode\"\r\n                                                                    value={\r\n                                                                        hammingCode.input\r\n                                                                    }\r\n                                                                    size=\"large\"\r\n                                                                    fluid\r\n                                                                    onChange={\r\n                                                                        this\r\n                                                                            .handleChangeInput\r\n                                                                    }\r\n                                                                    label={\r\n                                                                        <Dropdown\r\n                                                                            defaultValue=\"word\"\r\n                                                                            algorithm=\"hammingCode\"\r\n                                                                            onChange={\r\n                                                                                this\r\n                                                                                    .handleChangeOption\r\n                                                                            }\r\n                                                                            options={\r\n                                                                                options\r\n                                                                            }\r\n                                                                        />\r\n                                                                    }\r\n                                                                    labelPosition=\"left\"\r\n                                                                />\r\n                                                            </Form.Field>\r\n                                                            <Form.Field>\r\n                                                                <Button\r\n                                                                    color=\"teal\"\r\n                                                                    content={\r\n                                                                        hammingCode.input\r\n                                                                            ? \"Calculate Hamming code of \" +\r\n                                                                              hammingCode.input\r\n                                                                            : \"You need to provide input first\"\r\n                                                                    }\r\n                                                                    icon=\"calculator\"\r\n                                                                    fluid\r\n                                                                    onClick={\r\n                                                                        this\r\n                                                                            .calculateHammingCode\r\n                                                                    }\r\n                                                                    disabled={\r\n                                                                        !hammingCode.input\r\n                                                                    }\r\n                                                                />\r\n                                                            </Form.Field>\r\n                                                            <Form.Field>\r\n                                                                <Input\r\n                                                                    label=\"Result\"\r\n                                                                    data-name=\"result\"\r\n                                                                    data-algorithm=\"hammingCode\"\r\n                                                                    value={\r\n                                                                        hammingCode.result\r\n                                                                    }\r\n                                                                    fluid\r\n                                                                    size=\"large\"\r\n                                                                />\r\n                                                            </Form.Field>\r\n                                                        </Form>\r\n                                                    </Grid.Column>\r\n                                                    <Grid.Column width={10}>\r\n                                                        <Image\r\n                                                            src={\r\n                                                                hammingCodeExample\r\n                                                            }\r\n                                                            bordered\r\n                                                            fluid\r\n                                                            onClick={() =>\r\n                                                                this.handleZoomImage(\r\n                                                                    hammingCodeExample\r\n                                                                )\r\n                                                            }\r\n                                                        />\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n                                                <Divider />\r\n                                                <Grid.Row>\r\n                                                    <Grid.Column width={8}>\r\n                                                        <Form>\r\n                                                            <Form.Field>\r\n                                                                <Input\r\n                                                                    label=\"Hamming code\"\r\n                                                                    data-name=\"hammingCode\"\r\n                                                                    data-algorithm=\"hammingCode\"\r\n                                                                    value={\r\n                                                                        hammingCode.hammingCode\r\n                                                                    }\r\n                                                                    size=\"large\"\r\n                                                                    fluid\r\n                                                                    onChange={\r\n                                                                        this\r\n                                                                            .handleChangeInput\r\n                                                                    }\r\n                                                                />\r\n                                                            </Form.Field>\r\n                                                            <Form.Field>\r\n                                                                <Button\r\n                                                                    color=\"teal\"\r\n                                                                    content=\"Fix hamming Code\"\r\n                                                                    icon=\"calculator\"\r\n                                                                    fluid\r\n                                                                    onClick={\r\n                                                                        this\r\n                                                                            .fixHammingCode\r\n                                                                    }\r\n                                                                    disabled={\r\n                                                                        !hammingCode.hammingCode\r\n                                                                    }\r\n                                                                />\r\n                                                            </Form.Field>\r\n                                                        </Form>\r\n                                                    </Grid.Column>\r\n                                                    <Grid.Column width={8}>\r\n                                                        <Form>\r\n                                                            <Form.Field>\r\n                                                                <Input\r\n                                                                    label=\"Result\"\r\n                                                                    data-name=\"hammingCode\"\r\n                                                                    data-algorithm=\"hammingCode\"\r\n                                                                    value={\r\n                                                                        typeof hammingCode.resultFix ==\r\n                                                                        \"object\"\r\n                                                                            ? hammingCode\r\n                                                                                  .resultFix[\r\n                                                                                  \"hammingCode\"\r\n                                                                              ]\r\n                                                                            : \"\"\r\n                                                                    }\r\n                                                                    fluid\r\n                                                                    size=\"large\"\r\n                                                                />\r\n                                                            </Form.Field>\r\n                                                            <Form.Field>\r\n                                                                <Input\r\n                                                                    label=\"Original character\"\r\n                                                                    data-name=\"char\"\r\n                                                                    data-algorithm=\"hammingCode\"\r\n                                                                    value={\r\n                                                                        typeof hammingCode.resultFix ==\r\n                                                                        \"object\"\r\n                                                                            ? hammingCode\r\n                                                                                  .resultFix[\r\n                                                                                  \"char\"\r\n                                                                              ]\r\n                                                                            : \"\"\r\n                                                                    }\r\n                                                                    fluid\r\n                                                                    size=\"large\"\r\n                                                                />\r\n                                                            </Form.Field>\r\n                                                        </Form>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n                                            </Grid>\r\n                                        </Segment>\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <Grid.Column width={16}>\r\n                                <Segment>\r\n                                    <Header>CRC Algorithm</Header>\r\n                                </Segment>\r\n                                <Segment>\r\n                                    <Grid>\r\n                                        <Grid.Row>\r\n                                            <Grid.Column width={6}>\r\n                                                <Form>\r\n                                                    <Form.Field>\r\n                                                        <Input\r\n                                                            label={\r\n                                                                <Dropdown\r\n                                                                    defaultValue=\"word\"\r\n                                                                    algorithm=\"crc\"\r\n                                                                    onChange={\r\n                                                                        this\r\n                                                                            .handleChangeOption\r\n                                                                    }\r\n                                                                    options={\r\n                                                                        options\r\n                                                                    }\r\n                                                                />\r\n                                                            }\r\n                                                            data-name=\"word\"\r\n                                                            data-algorithm=\"crc\"\r\n                                                            value={crc.word}\r\n                                                            size=\"large\"\r\n                                                            fluid\r\n                                                            onChange={\r\n                                                                this\r\n                                                                    .handleChangeInput\r\n                                                            }\r\n                                                        />\r\n                                                    </Form.Field>\r\n                                                    <Form.Field>\r\n                                                        <Input\r\n                                                            label=\"G\"\r\n                                                            data-name=\"g\"\r\n                                                            data-algorithm=\"crc\"\r\n                                                            value={crc.g}\r\n                                                            size=\"large\"\r\n                                                            fluid\r\n                                                            onChange={\r\n                                                                this\r\n                                                                    .handleChangeInput\r\n                                                            }\r\n                                                        />\r\n                                                    </Form.Field>\r\n                                                    <Form.Field>\r\n                                                        <Button\r\n                                                            color=\"teal\"\r\n                                                            content={\r\n                                                                crc.word\r\n                                                                    ? \"Calculate R\"\r\n                                                                    : \"Input a word first\"\r\n                                                            }\r\n                                                            icon=\"calculator\"\r\n                                                            fluid\r\n                                                            onClick={\r\n                                                                this\r\n                                                                    .calculateCrc\r\n                                                            }\r\n                                                            disabled={!crc.word}\r\n                                                        />\r\n                                                    </Form.Field>\r\n                                                    <Form.Field>\r\n                                                        <Input\r\n                                                            label=\"Result\"\r\n                                                            data-name=\"result\"\r\n                                                            data-algorithm=\"crc\"\r\n                                                            value={crc.result}\r\n                                                            fluid\r\n                                                            size=\"large\"\r\n                                                        />\r\n                                                    </Form.Field>\r\n                                                </Form>\r\n                                            </Grid.Column>\r\n                                            <Grid.Column width={10}>\r\n                                                <Image\r\n                                                    src={crcExample}\r\n                                                    bordered\r\n                                                    fluid\r\n                                                    onClick={() =>\r\n                                                        this.handleZoomImage(\r\n                                                            crcExample\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                            </Grid.Column>\r\n                                        </Grid.Row>\r\n                                    </Grid>\r\n                                </Segment>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Segment>\r\n                <ImageModal\r\n                    img={img}\r\n                    imgModal={imgModal}\r\n                    handleCloseModal={this.handleCloseModal}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BinaryAlgorithms;\r\n","export default function crcCalculate(input, type, G) {\r\n    let D = \"\";\r\n    if (type === \"bin\") {\r\n        D = input;\r\n    } else {\r\n        for (let char of input) {\r\n            D += \"0\" + char.charCodeAt(0).toString(2);\r\n        }\r\n    }\r\n    let r = G.length - 1;\r\n    for (let i = 0; i < r; i++) {\r\n        D += \"0\";\r\n    }\r\n    D = D.split(\"\");\r\n    // eslint-disable-next-line\r\n    if (D[0] == 0) {\r\n        D.shift();\r\n    }\r\n    G = G.split(\"\");\r\n    while (D.length >= G.length) {\r\n        for (let i = 0; i < G.length; i++) {\r\n            D[i] = D[i] ^ G[i];\r\n        }\r\n        // eslint-disable-next-line\r\n        while (D[0] == 0 && D.length >= G.length) {\r\n            D.shift();\r\n        }\r\n    }\r\n    return D.join(\"\");\r\n}\r\n","const subnets = [\r\n    {\r\n        ip: \"128.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"/1\"\r\n    },\r\n    {\r\n        ip: \"192.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"/2\"\r\n    },\r\n    {\r\n        ip: \"224.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"/3\"\r\n    },\r\n    {\r\n        ip: \"240.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"/4\"\r\n    },\r\n    {\r\n        ip: \"248.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"/5\"\r\n    },\r\n    {\r\n        ip: \"252.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"/6\"\r\n    },\r\n    {\r\n        ip: \"254.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"/7\"\r\n    },\r\n    {\r\n        ip: \"255.0.0.0\",\r\n        type: \"A\",\r\n        cidr: \"/8\"\r\n    },\r\n    {\r\n        ip: \"255.128.0.0\",\r\n        type: \"A\",\r\n        cidr: \"/9\"\r\n    },\r\n    {\r\n        ip: \"255.192.0.0\",\r\n        type: \"A\",\r\n        cidr: \"/10\"\r\n    },\r\n    {\r\n        ip: \"255.224.0.0\",\r\n        type: \"A\",\r\n        cidr: \"/11\"\r\n    },\r\n    {\r\n        ip: \"255.240.0.0\",\r\n        type: \"A\",\r\n        cidr: \"/12\"\r\n    },\r\n    {\r\n        ip: \"255.248.0.0\",\r\n        type: \"A\",\r\n        cidr: \"/13\"\r\n    },\r\n    {\r\n        ip: \"255.252.0.0\",\r\n        type: \"A\",\r\n        cidr: \"/14\"\r\n    },\r\n    {\r\n        ip: \"255.254.0.0\",\r\n        type: \"A\",\r\n        cidr: \"/15\"\r\n    },\r\n    {\r\n        ip: \"255.255.0.0\",\r\n        type: \"B\",\r\n        cidr: \"/16\"\r\n    },\r\n    {\r\n        ip: \"255.255.128.0\",\r\n        type: \"B\",\r\n        cidr: \"/17\"\r\n    },\r\n    {\r\n        ip: \"255.255.192.0\",\r\n        type: \"B\",\r\n        cidr: \"/18\"\r\n    },\r\n    {\r\n        ip: \"255.255.224.0\",\r\n        type: \"B\",\r\n        cidr: \"/19\"\r\n    },\r\n    {\r\n        ip: \"255.255.240.0\",\r\n        type: \"B\",\r\n        cidr: \"/20\"\r\n    },\r\n    {\r\n        ip: \"255.255.248.0\",\r\n        type: \"B\",\r\n        cidr: \"/21\"\r\n    },\r\n    {\r\n        ip: \"255.255.252.0\",\r\n        type: \"B\",\r\n        cidr: \"/22\"\r\n    },\r\n    {\r\n        ip: \"255.255.254.0\",\r\n        type: \"B\",\r\n        cidr: \"/23\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.0\",\r\n        type: \"C\",\r\n        cidr: \"/24\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.128\",\r\n        type: \"C\",\r\n        cidr: \"/25\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.192\",\r\n        type: \"C\",\r\n        cidr: \"/26\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.224\",\r\n        type: \"C\",\r\n        cidr: \"/27\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.240\",\r\n        type: \"C\",\r\n        cidr: \"/28\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.248\",\r\n        type: \"C\",\r\n        cidr: \"/29\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.252\",\r\n        type: \"C\",\r\n        cidr: \"/30\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.254\",\r\n        type: \"C\",\r\n        cidr: \"/31\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.255\",\r\n        type: \"C\",\r\n        cidr: \"/32\"\r\n    }\r\n];\r\n\r\nexport default subnets;\r\n","const _ = require(\"lodash\");\r\n\r\nfunction decimalToBinary(num) {\r\n    const binary = [];\r\n    while (num !== 0 || binary.length < 8) {\r\n        binary.push(num % 2);\r\n        num = Math.floor(num / 2);\r\n    }\r\n    return binary.reverse().join(\"\");\r\n}\r\n\r\nfunction binToDecimal(binary) {\r\n    binary = binary.split(\"\").reverse();\r\n    let num = 0;\r\n    for (let i = 0; i < binary.length; i++) {\r\n        num += binary[i] * Math.pow(2, i);\r\n    }\r\n    return num;\r\n}\r\n\r\nfunction binToHexa(binary) {\r\n    return parseInt(binary, 2).toString(16);\r\n}\r\n\r\nfunction decimalToHexa(num) {\r\n    let hexa = parseInt(num, 10).toString(16);\r\n    if (hexa.length === 1) {\r\n        hexa = \"0\" + hexa;\r\n    }\r\n    return hexa;\r\n}\r\n\r\nexport default function ipSubnet(ip, subnet = \"\") {\r\n    const result = {};\r\n    let ipv4Reg = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\r\n    if (!ipv4Reg.test(ip)) {\r\n        result[\"notIP\"] = {};\r\n        result[\"notIP\"][\"name\"] = \"Wrong IP Address\";\r\n        result[\"notIP\"][\"value\"] = \"This isn't a valid IPv4 Address.\";\r\n        return result;\r\n    }\r\n    if (subnet === \"\") {\r\n        result[\"forgotSubnet\"] = {};\r\n        result[\"forgotSubnet\"][\"name\"] = \"Missing Subnet mask\";\r\n        result[\"forgotSubnet\"][\"value\"] =\r\n            \"You have to choose a subnet mask first.\";\r\n        return result;\r\n    }\r\n    result[\"ipAddr\"] = {};\r\n    result[\"ipAddr\"][\"name\"] = \"IP Address\";\r\n    result[\"ipAddr\"][\"value\"] = ip;\r\n    let ipBinary = _.clone(\r\n        ip\r\n            .split(\".\")\r\n            .map(octet => {\r\n                return decimalToBinary(octet);\r\n            })\r\n            .join(\"\")\r\n    );\r\n    let subnetBinary = _.clone(\r\n        subnet[\"ip\"]\r\n            .split(\".\")\r\n            .map(octet => {\r\n                return decimalToBinary(octet);\r\n            })\r\n            .join(\"\")\r\n    );\r\n    let networkAddrBinary = \"\";\r\n    for (let i = 0; i < ipBinary.length; i++) {\r\n        networkAddrBinary += ipBinary[i] == 1 && subnetBinary[i] == 1 ? 1 : 0;\r\n    }\r\n    let networkAddr = [];\r\n    for (let i = 0; i < networkAddrBinary.length; i += 8) {\r\n        networkAddr = networkAddr.concat(networkAddrBinary.slice(i, i + 8));\r\n    }\r\n    networkAddr = networkAddr.map(binary => {\r\n        return binToDecimal(binary);\r\n    });\r\n    result[\"networkAddr\"] = {};\r\n    result[\"networkAddr\"][\"value\"] = _.clone(networkAddr.join(\".\"));\r\n    result[\"networkAddr\"][\"name\"] = \"Network Address\";\r\n\r\n    let start = _.clone(networkAddr);\r\n    start[start.length - 1] = start[start.length - 1] + 1;\r\n\r\n    result[\"range\"] = {};\r\n    result[\"range\"][\"value\"] = start.join(\".\") + \" - \";\r\n    result[\"range\"][\"name\"] = \"Usable Host IP Range\";\r\n    let jumpIndex = -1;\r\n    switch (subnet[\"type\"]) {\r\n        case \"Other\":\r\n            jumpIndex = 0;\r\n            break;\r\n        case \"A\":\r\n            jumpIndex = 1;\r\n            break;\r\n        case \"B\":\r\n            jumpIndex = 2;\r\n            break;\r\n        case \"C\":\r\n            jumpIndex = 3;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    let jump = 255 - subnet[\"ip\"].split(\".\")[jumpIndex];\r\n    networkAddr[jumpIndex] = networkAddr[jumpIndex] + jump;\r\n    for (let i = jumpIndex + 1; i < networkAddr.length; i++) {\r\n        networkAddr[i] = 255;\r\n    }\r\n    let broadcast = _.clone(networkAddr);\r\n    result[\"broadcastAddr\"] = {};\r\n    result[\"broadcastAddr\"][\"name\"] = \"Broadcast Address\";\r\n    result[\"broadcastAddr\"][\"value\"] = broadcast.join(\".\");\r\n    let end = _.clone(networkAddr);\r\n    end[end.length - 1] = end[end.length - 1] - 1;\r\n    result[\"range\"][\"value\"] += end.join(\".\");\r\n    let totalNumOfHosts = (jump + 1) * Math.pow(256, 3 - jumpIndex);\r\n    result[\"totalNumOfHosts\"] = {};\r\n    result[\"totalNumOfHosts\"][\"value\"] = totalNumOfHosts;\r\n    result[\"totalNumOfHosts\"][\"name\"] = \"Total Number of Hosts\";\r\n\r\n    result[\"numOfUsableHosts\"] = {};\r\n    result[\"numOfUsableHosts\"][\"value\"] = totalNumOfHosts - 2;\r\n    result[\"numOfUsableHosts\"][\"name\"] = \"Number of Usable Hosts\";\r\n\r\n    result[\"subnet\"] = {};\r\n    result[\"subnet\"][\"name\"] = \"Subnet Mask\";\r\n    result[\"subnet\"][\"value\"] = subnet[\"ip\"];\r\n    let wildcardAddr = _.clone(\r\n        subnet[\"ip\"]\r\n            .split(\".\")\r\n            .map(octet => {\r\n                return 255 - parseInt(octet, 10);\r\n            })\r\n            .join(\".\")\r\n    );\r\n    result[\"wildcardAddr\"] = {};\r\n    result[\"wildcardAddr\"][\"name\"] = \"Wildcard Address\";\r\n    result[\"wildcardAddr\"][\"value\"] = wildcardAddr;\r\n\r\n    result[\"binSubnetMask\"] = {};\r\n    result[\"binSubnetMask\"][\"name\"] = \"Binary Subnet Mask\";\r\n    result[\"binSubnetMask\"][\"value\"] = subnet[\"ip\"]\r\n        .split(\".\")\r\n        .map(octet => {\r\n            return decimalToBinary(octet);\r\n        })\r\n        .join(\".\");\r\n\r\n    result[\"cidr\"] = {};\r\n    result[\"cidr\"][\"name\"] = \"CIDR Notation\";\r\n    result[\"cidr\"][\"value\"] = subnet[\"cidr\"];\r\n\r\n    result[\"ipType\"] = {};\r\n    result[\"ipType\"][\"name\"] = \"IP Type\";\r\n    let ipOctets = ip.split(\".\");\r\n    result[\"ipType\"][\"value\"] =\r\n        ipOctets[0] == 10 ||\r\n        (ipOctets[0] == 172 && ipOctets[1] >= 16 && ipOctets[1] <= 31) ||\r\n        (ipOctets[0] == 192 && ipOctets[1] == 168)\r\n            ? \"Private\"\r\n            : \"Public\";\r\n\r\n    result[\"short\"] = {};\r\n    result[\"short\"][\"name\"] = \"Short\";\r\n    result[\"short\"][\"value\"] = ip + \" \" + subnet[\"cidr\"];\r\n\r\n    result[\"binaryId\"] = {};\r\n    result[\"binaryId\"][\"name\"] = \"Binary ID\";\r\n    result[\"binaryId\"][\"value\"] = ip\r\n        .split(\".\")\r\n        .map(octet => {\r\n            return decimalToBinary(octet);\r\n        })\r\n        .join(\"\");\r\n\r\n    result[\"intId\"] = {};\r\n    result[\"intId\"][\"name\"] = \"Integer ID\";\r\n    result[\"intId\"][\"value\"] = binToDecimal(result[\"binaryId\"][\"value\"]);\r\n\r\n    result[\"hexaId\"] = {};\r\n    result[\"hexaId\"][\"name\"] = \"Hex ID\";\r\n    result[\"hexaId\"][\"value\"] = \"0x\" + binToHexa(result[\"binaryId\"][\"value\"]);\r\n\r\n    result[\"arpa\"] = {};\r\n    result[\"arpa\"][\"name\"] = \"in-addr.arpa\";\r\n    result[\"arpa\"][\"value\"] =\r\n        ip\r\n            .split(\".\")\r\n            .reverse()\r\n            .join(\".\") + \".in-addr.arpa\";\r\n\r\n    result[\"ipv4MappedAddr\"] = {};\r\n    result[\"ipv4MappedAddr\"][\"name\"] = \"IPv4 Mapped Address\";\r\n    result[\"ipv4MappedAddr\"][\"value\"] =\r\n        \"::ffff:\" +\r\n        decimalToHexa(ipOctets[0]) +\r\n        decimalToHexa(ipOctets[1]) +\r\n        \".\" +\r\n        decimalToHexa(ipOctets[2]) +\r\n        decimalToHexa(ipOctets[3]);\r\n\r\n    result[\"6to4Prefix\"] = {};\r\n    result[\"6to4Prefix\"][\"name\"] = \"6to4 Prefix\";\r\n    result[\"6to4Prefix\"][\"value\"] =\r\n        \"2002:\" +\r\n        decimalToHexa(ipOctets[0]) +\r\n        decimalToHexa(ipOctets[1]) +\r\n        \".\" +\r\n        decimalToHexa(ipOctets[2]) +\r\n        decimalToHexa(ipOctets[3]) +\r\n        \"::/48\";\r\n\r\n    return result;\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n    Header,\r\n    Grid,\r\n    Segment,\r\n    Input,\r\n    Form,\r\n    Dropdown,\r\n    Button,\r\n    Table,\r\n    Message\r\n} from \"semantic-ui-react\";\r\nimport subnets from \"./subnet-data\";\r\nimport ipSubnet from \"./ip-subnet-algorithm\";\r\nconst subnetOptions = subnets.map((subnet, idx) => {\r\n    let obj = {};\r\n    obj[\"ip\"] = subnet[\"ip\"];\r\n    obj[\"cidr\"] = subnet[\"cidr\"];\r\n    obj[\"type\"] = subnet[\"type\"];\r\n    obj[\"text\"] = subnet[\"ip\"] + \" \" + subnet[\"cidr\"];\r\n    obj[\"key\"] = idx;\r\n    obj[\"value\"] = subnet;\r\n    return obj;\r\n});\r\n\r\nclass IPSubnet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ip: \"\",\r\n            subnet: \"\",\r\n            result: \"\"\r\n        };\r\n    }\r\n\r\n    handleChangeIp = e => {\r\n        this.setState({\r\n            ip: e.target.value\r\n        });\r\n    };\r\n\r\n    handleChangeSubnet = (e, data) => {\r\n        this.setState({\r\n            subnet: data.value\r\n        });\r\n    };\r\n\r\n    handleCalculate = () => {\r\n        const { ip, subnet } = this.state;\r\n        const result = ipSubnet(ip, subnet);\r\n        this.setState({\r\n            result\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { ip, result } = this.state;\r\n        return (\r\n            <Fragment>\r\n                <Segment>\r\n                    <Header>IPv4 Subnet Calculator</Header>\r\n                </Segment>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={4}>\r\n                            <Segment>\r\n                                <Form>\r\n                                    <Form.Field>\r\n                                        <label>IP Address</label>\r\n                                        <Input\r\n                                            value={ip}\r\n                                            onChange={this.handleChangeIp}\r\n                                        />\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <label>Subnet</label>\r\n                                        <Dropdown\r\n                                            placeholder=\"Choose one subnet\"\r\n                                            selection\r\n                                            fluid\r\n                                            onChange={this.handleChangeSubnet}\r\n                                            options={subnetOptions}\r\n                                        />\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <Button\r\n                                            color=\"teal\"\r\n                                            content=\"Calculate\"\r\n                                            icon=\"play\"\r\n                                            fluid\r\n                                            onClick={this.handleCalculate}\r\n                                        />\r\n                                    </Form.Field>\r\n                                </Form>\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={12}>\r\n                            <Segment>\r\n                                {result === \"\" ? (\r\n                                    <Message warning>\r\n                                        <Message.Header>\r\n                                            Nothing to display\r\n                                        </Message.Header>\r\n                                    </Message>\r\n                                ) : (\r\n                                    <Table>\r\n                                        <Table.Body>\r\n                                            {Object.keys(result).map(\r\n                                                item => {\r\n                                                    return (\r\n                                                        <Table.Row key={item}>\r\n                                                            <Table.Cell>\r\n                                                                {result[item][\"name\"]}\r\n                                                            </Table.Cell>\r\n                                                            <Table.Cell>\r\n                                                                {result[item][\"value\"]}\r\n                                                            </Table.Cell>\r\n                                                        </Table.Row>\r\n                                                    );\r\n                                                }\r\n                                            )}\r\n                                        </Table.Body>\r\n                                    </Table>\r\n                                )}\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IPSubnet;\r\n","import React from \"react\";\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport ShortestPath from \"./component/feature/shortest-path/ShortestPath\";\r\nimport Schedule from \"./component/feature/schedule/schedule\";\r\nimport BinaryAlgorithms from \"./component/feature/binary-algorithms/BinaryAlgorithms\";\r\nimport IPSubnet from \"./component/feature/ip-subnet/IPSubnet\"\r\nconst Routes = () => {\r\n  return (\r\n    <>\r\n      <Route path=\"/feature/dijkstra/\" component={ShortestPath} />\r\n      <Route path=\"/feature/schedule/\" component={Schedule} />\r\n      <Route path=\"/feature/binary-algorithms/\" component={BinaryAlgorithms} />\r\n      <Route path=\"/feature/ip-subnet-v4/\" component={IPSubnet} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport SideMenu from \"./component/layout/SideMenu\";\r\nimport \"./App.css\";\r\n// eslint-disable-next-line\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\nimport Routes from \"./routes\";\r\nclass App extends Component {\r\n  state = {\r\n    dropdownMenuStyle: {\r\n      display: \"none\"\r\n    }\r\n  };\r\n\r\n  handleToggleDropdownMenu = () => {\r\n    let newState = Object.assign({}, this.state);\r\n    if (newState.dropdownMenuStyle.display === \"none\") {\r\n      newState.dropdownMenuStyle = { display: \"flex\" };\r\n    } else {\r\n      newState.dropdownMenuStyle = { display: \"none\" };\r\n    }\r\n\r\n    this.setState(newState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <Grid padded>\r\n            <Grid.Column width={2}>\r\n              <SideMenu />\r\n            </Grid.Column>\r\n            <Grid.Column width={14} floated=\"right\" id=\"content\">\r\n              <Routes />\r\n            </Grid.Column>\r\n          </Grid>\r\n          <ToastContainer />\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}