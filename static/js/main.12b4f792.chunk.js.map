{"version":3,"sources":["component/layout/header-cv/avatar.jpg","component/feature/binary-algorithms/crc-example.png","component/layout/SideMenu.js","component/layout/header-cv/header-cv.js","component/layout/body-cv/main-body/main-body-data/section-list.js","component/layout/body-cv/main-body/main-section.js","component/layout/body-cv/main-body/main-body.js","component/layout/body-cv/right-body/right-body-data/skill-list.js","component/layout/body-cv/right-body/right-body-data/hobby-list.js","component/layout/body-cv/right-body/right-body.js","component/layout/body-cv/body-cv.js","component/layout/Index.js","component/feature/shortest-path/dijkstra-algorithm.js","component/feature/shortest-path/bellman-ford-algorithm.js","component/feature/shortest-path/ShortestPath.js","component/feature/schedule/schedule-data.js","component/feature/schedule/schedule-algorithm.js","component/feature/schedule/schedule.js","component/feature/binary-algorithms/udp-checksum-algorithm.js","component/feature/binary-algorithms/hamming-algorithm.js","component/feature/binary-algorithms/crc-algorithm.js","component/feature/binary-algorithms/BinaryAlgorithms.js","component/feature/ip-subnet/subnet-data.js","component/feature/ip-subnet/ip-subnet-algorithm.js","component/feature/ip-subnet/IPSubnet.js","component/feature/xlsx-to-json/ExcelToJson.js","routes.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SideMenu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleItemClick","e","_ref","name","setState","activeItem","state","react_default","a","createElement","Sidebar","as","Menu","animation","icon","inverted","vertical","visible","width","react_router_dom","to","Item","Icon","active","onClick","Component","avatar","require","AddressRow","Fragment","style","info","HeaderCV","myName","myPosition","myAddress","myEmail","myPhone","Grid","Row","marginTop","marginBottom","Column","Image","src","circular","alt","Header","textAlign","React","sectionList","title","list","start","end","subTitle","divided","className","MainSection","height","border","color","backgroundColor","map","item","index","key","MainBody","linkedIn","github","main_section","skills","stars","hobbies","SkillRow","i","push","RightBody","shortTerm","longTerm","skillList","hobbyList","skill","hobby","BodyCV","main_body","right_body","Index","centered","id","header_cv","body_cv","_","data","nodes","links","myConfig","highlightDegree","highlightOpacity","linkHighlightBehavior","nodeHighlightBehavior","node","fontColor","fontSize","fontWeight","highlightColor","highlightFontSize","highlightFontWeight","highlightStrokeColor","highlightStrokeWidth","labelProperty","mouseCursor","opacity","renderLabel","size","strokeColor","strokeWidth","svg","symbolType","link","d3","gravity","NodeModal","handleAddLinkForm","numOfLink","handleChange","currentLink","_objectSpread","defineProperty","target","value","handleCreateLink","_this$state","currentNode","link1","distance","source","link2","label","toast","success","currentNodeLinks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","length","error","handleRemoveLink","arguments","Boolean","linksFiltered","filter","created","nextProps","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_this2","_this$state2","_this$props","nodeModal","handleCloseModal","rows","_loop","Input","type","Button","negative","onChange","positive","Modal","open","onClose","Content","Segment","content","row","indexx","Actions","ShortestPath","_this3","numOfNode","String","fromCharCode","handleOpenModal","currentNodeLink","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","handleChangePathColor","way","split","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","forceUpdate","getDijkstraResult","dijkstraTables","results","_loop2","obj","currentValue","Infinity","values","marked","_loop3","_nodes","_i","otherNodes","cloneDeep","other","min","markedNodes","parseInt","slice","console","log","_loop4","result","dijkstraTable","headerCells","footerCells","cells","cell","lastNode","bodyRows","dijkstra","panes","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","table","menuItem","render","Tab","Pane","Table","HeaderCell","Body","cellIndex","Cell","Footer","_iterator6","Message","warning","dijkstraResult","getBellmanFordResult","bellmanFordResults","bellmanFordResult","originalNodes","originalNode","_originalNodes","startNode","firstNodes","originalNodesClone","otherNode","_i2","_firstNodes","firstNode","currentNodes","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","indexOf","nodeList","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","resultNode","sort","node1","node2","minValue","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","nodeValue","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","singleResult","bellmanFord","idx","react","handleChooseAccordion","titleProps","newIndex","activeIndex","handleCalculate","handleChangeTextArea","dataTA","textArea","toUpperCase","linkText","_this4","_this$state3","ShortestPath_NodeModal","lib","config","onClickNode","Accordion","Title","max","Form","Popup","trigger","TextArea","on","header","empColor","NamNH20","bgColor","DatNT11","GiangHT7","VanQTH","TungPT15","ToanNV32","ThoVH3","LucNV6","LongTT2","AnhNTV9","TuanNA106","SangDV4","ThuyNN9","HuanHV3","TuTT17","DungNT173","TuanLPM","employeesData","group","maxShift","dayShift","dayShiftAsFirst","dayShiftAsSecond","firstOnSecondRate","options","weekendShift","dayWithG2","schedule","checkDayOption","date","option","getDate","checkGroupOf2Emp","emp1","emp2","chooseRandom","Math","floor","random","chooseEmployee","empId","listOption","day","removeEmployeeFromList","splice","isWeekend","getDay","DragAndDropCalendar","withDragAndDrop","Calendar","moment","locale","localizer","momentLocalizer","allViews","keys","Views","k","ColoredDateCellWrapper","children","cloneElement","Children","only","Schedule","handleSelectEmp","emp","empModal","currentEmp","createSchedule","year","month","employees","weekends","failureCount","scheduled","numOfDaysInMonth","Date","employeesClone","listEmployeeId","randomEmp1","randomEmp2","days","today","_listEmployeeId","reverse","sortBy","chooseEmp1","chooseEmp2","listEmployeeIdClone","currentDay","rate","shift1","shift2","_schedule","count","forEach","v","_ret","getSchedule","events","event1","event2","moveEvent","_ref2","event","droppedOnAllDaySlot","isAllDay","allDay","updatedEvent","schedule_objectSpread","nextEvents","toConsumableArray","handleSelect","_ref3","window","prompt","concat","changeEmpMaxShift","changeEmpOptions","optionValue","dayOptions","numOfDayInMonth","daysInWeek","dayInWeek","dayStart","dayEnd","clone","b","getFullYear","getMonth","selectable","onEventDrop","views","step","defaultDate","components","timeSlotWrapper","onSelectSlot","eventPropGetter","defaultValue","onBlur","join","toString","BIN_CARRY_OUT","sum2Bin","bin1","bin2","sum","isCarryOut","bin","isExponentOf2","num","log2","round","hammingCode","input","charCodeAt","bitArr","shift","pList","binaries","indexes","j","_pList","countBit1","bit","pListClone","calculateHammingCode","text","ImageModal","img","imgModal","bordered","fluid","BinaryAlgorithms","handleZoomImage","handleChangeInput","algorithm","parentElement","dataset","BinaryAlgorithms_objectSpread","calculateUDPChecksum","binaryString","leftOver","udp16bNumbers","steps","checksum","udpChecksum","word","handleChangeOption","hamming","fixHammingCode","resultFix","hammingCodeAsObjects","sumFalseParity","_i3","_pList2","bitObj","originalBinaries","unshift","calculateCrc","crc","G","D","r","count0","R","crcCalculate","g","selectUdpStep","stepIdx","handleChangeRange","currentStep","marginLeft","currentResult","udpSteps","Field","Dropdown","labelPosition","data-name","data-algorithm","disabled","Divider","Select","Statistic","Group","horizontal","Value","overflow","maxHeight","celled","bitIdx","BinaryAlgorithms_ImageModal","subnets","ip","cidr","decimalToBinary","binary","binToDecimal","pow","decimalToHexa","hexa","ipSubnet","subnet","test","ipBinary","octet","subnetBinary","networkAddrBinary","networkAddr","jumpIndex","jump","broadcast","totalNumOfHosts","toLocaleString","wildcardAddr","ipOctets","networks","network","posNetAddr","subnetOptions","IPSubnet","handleChangeIp","handleChangeSubnet","placeholder","selection","ExcelToJson","handleChangeFile","f","files","reader","FileReader","onload","Uint8Array","workbook","XLSX","read","readAsArrayBuffer","handleConvertToTable","titles","sheetName","from","dataLineStart","titleLine","titleStart","titleEnd","dataLineEnd","striped","Routes","react_router","exact","path","component","App","padded","layout_SideMenu","floated","routes","react_toastify","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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a,KAAM,QACNma,KAAM,KAEV,CACID,GAAI,YACJla,KAAM,QACNma,KAAM,KAEV,CACID,GAAI,YACJla,KAAM,QACNma,KAAM,KAEV,CACID,GAAI,YACJla,KAAM,QACNma,KAAM,KAEV,CACID,GAAI,YACJla,KAAM,QACNma,KAAM,KAEV,CACID,GAAI,YACJla,KAAM,QACNma,KAAM,KAEV,CACID,GAAI,YACJla,KAAM,IACNma,KAAM,KAEV,CACID,GAAI,cACJla,KAAM,IACNma,KAAM,KAEV,CACID,GAAI,cACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,cACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,cACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,cACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,cACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,cACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,cACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,gBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,gBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,gBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,gBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,gBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,gBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,gBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,gBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,kBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,kBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,kBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,kBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,kBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,kBACJla,KAAM,IACNma,KAAM,MAEV,CACID,GAAI,kBACJla,KAAM,IACNma,KAAM,MAEV,C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","file":"static/js/main.12b4f792.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.176baacb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/crc-example.680335b0.png\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu, Sidebar, Icon } from \"semantic-ui-react\";\r\n\r\nclass SideMenu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeItem: \"\"\r\n    };\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\r\n\r\n  render() {\r\n    const { activeItem } = this.state;\r\n    return (\r\n      <Sidebar\r\n        as={Menu}\r\n        animation=\"push\"\r\n        icon=\"labeled\"\r\n        inverted\r\n        vertical\r\n        visible={true}\r\n        width=\"thin\"\r\n      >\r\n        <Link to=\"/\">\r\n          <Menu.Item as=\"a\">\r\n            <Icon name=\"home\" />\r\n            Home\r\n          </Menu.Item>\r\n        </Link>\r\n        <Link to=\"/feature/dijkstra\">\r\n          <Menu.Item\r\n            name=\"dijkstra\"\r\n            active={activeItem === \"dijkstra\"}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            Dijkstra / Bellman-Ford\r\n          </Menu.Item>\r\n        </Link>\r\n        <Link to=\"/feature/binary-algorithms\">\r\n          <Menu.Item\r\n            name=\"binary-algorithms\"\r\n            active={activeItem === \"binary-algorithms\"}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            Binary algorithms\r\n          </Menu.Item>\r\n        </Link>\r\n        <Link to=\"/feature/ip-subnet-v4\">\r\n          <Menu.Item\r\n            name=\"ip-subnet-v4\"\r\n            active={activeItem === \"ip-subnet-v4\"}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            IPv4 Subnet\r\n          </Menu.Item>\r\n        </Link>\r\n        <Link to=\"/feature/schedule\">\r\n          <Menu.Item\r\n            name=\"schedule\"\r\n            active={activeItem === \"schedule\"}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            NOC NET Schedule\r\n          </Menu.Item>\r\n        </Link>\r\n        <Link to=\"/feature/excel-json\">\r\n          <Menu.Item\r\n            name=\"excel-json\"\r\n            active={activeItem === \"excel-json\"}\r\n            onClick={this.handleItemClick}\r\n          >\r\n            Excel To Json Converter\r\n          </Menu.Item>\r\n        </Link>\r\n      </Sidebar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from \"react\";\r\nimport { Grid, Icon, Header, Image } from \"semantic-ui-react\";\r\nvar avatar = require(\"./avatar.jpg\");\r\n\r\nfunction AddressRow(props) {\r\n  return (\r\n    <>\r\n      <Icon style={{ width: 25 }} name={props.icon} /> :{\"  \"}\r\n      <span>{props.info}</span>\r\n    </>\r\n  );\r\n}\r\n\r\nclass HeaderCV extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      myName: \"Lê Sơn Tùng\",\r\n      myPosition: \"Intern Developer\",\r\n      myAddress: \"Thuỵ Khuê, quận Tây Hồ, Hà Nội\",\r\n      myEmail: \"stungle154@gmail.com\",\r\n      myPhone: \"+84829093384\"\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid>\r\n        <Grid.Row style={{ marginTop: 25, marginBottom: 25 }}>\r\n          <Grid.Column width={3}>\r\n            <Image src={avatar} circular alt=\"My pic\" />\r\n          </Grid.Column>\r\n          <Grid.Column width={6}>\r\n            <Header>{this.state.myName}</Header>\r\n            <p>\r\n              <i>{this.state.myPosition}</i>\r\n            </p>\r\n          </Grid.Column>\r\n          <Grid.Column width={7} textAlign=\"right\">\r\n            <address>\r\n              <AddressRow icon={\"home\"} info={this.state.myAddress} />\r\n              <br />\r\n              <AddressRow icon={\"envelope\"} info={this.state.myEmail} />\r\n              <br />\r\n              <AddressRow icon={\"phone\"} info={this.state.myPhone} />\r\n            </address>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HeaderCV;\r\n","const sectionList = [\r\n    {\r\n        title: 'HỌC VẤN',\r\n        list: [\r\n            {\r\n                start: '08/2017',\r\n                end: 'Hiện tại',\r\n                title: 'ĐẠI HỌC GIAO THÔNG VẬN TẢI',\r\n                subTitle: 'Chuyên ngành: Công nghệ thông tin',\r\n                info: 'Điểm trung bình tính tới thời điểm hiện tại: 7.57'\r\n            },\r\n            {\r\n                start: '08/2017',\r\n                end: 'Hiện tại',\r\n                title: 'HỆ THỐNG ĐÀO TẠO LẬP TRÌNH VIÊN APTECH',\r\n                subTitle: 'Chuyên ngành: Công nghệ thông tin',\r\n                info: ''\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: 'KINH NGHIỆM LÀM VIỆC',\r\n        list: [\r\n            {\r\n                start: '18/04/2019',\r\n                end: 'Hiện tại',\r\n                title: 'FPT TELECOM',\r\n                subTitle: 'Thực tập sinh',\r\n                info: ''\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: 'HOẠT ĐỘNG',\r\n        list: [\r\n            {\r\n                start: '12/10/2018',\r\n                end: '14/10/2018',\r\n                title: 'THAM GIA SỰ KIỆN HACKATHON JUNCTIONXHANOI',\r\n                subTitle: 'Front-end developer',\r\n                info: 'Kinh nghiệm: Cách làm việc nhóm, phân bố thời gian'\r\n            }\r\n        ]\r\n    }\r\n\r\n];\r\n\r\nexport default sectionList;","import React from \"react\";\r\nimport { Grid, Icon } from \"semantic-ui-react\";\r\n\r\nfunction Item(props) {\r\n  const list = props.list;\r\n  return (\r\n    <Grid>\r\n      <Grid.Row style={{ marginTop: 25 }} divided>\r\n        <Grid.Column width={3}>\r\n          {list.start}\r\n          <br />\r\n          <Icon name=\"arrow down\" />\r\n          <br />\r\n          {list.end}\r\n        </Grid.Column>\r\n        <Grid.Column width={13}>\r\n          <h5>{list.title}</h5>\r\n          <span className=\"text-info\">{list.subTitle}</span>\r\n          <br />\r\n          <span>{list.info}</span>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nclass MainSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: props.title,\r\n      list: props.list\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const list = this.state.list;\r\n    const title = this.state.title;\r\n    return (\r\n      <Grid>\r\n        <Grid.Row style={{ marginTop: 30 }}>\r\n          <Grid.Column width={16}>\r\n            <h4>{title}</h4>\r\n            <hr style={{ height: 2, border: \"none\", color: \"#333\", backgroundColor: \"#333\" }} />\r\n            {list.map((item, index) => {\r\n              return <Item key={index} list={item} />;\r\n            })}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainSection;\r\n","import React from \"react\";\r\nimport sectionList from \"./main-body-data/section-list\";\r\nimport MainSection from \"./main-section\";\r\nimport {Grid} from \"semantic-ui-react\"\r\nclass MainBody extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      linkedIn: \"- LinkedIn: https://www.linkedin.com/in/tung-le-a613a716b/\",\r\n      github: \"- Github: https://github.com/ZaffranLe\"\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const list = sectionList;\r\n    return (\r\n      <>\r\n        {list.map((item, index) => {\r\n          return <MainSection key={index} title={item.title} list={item.list} />;\r\n        })}\r\n        <Grid>\r\n          <Grid.Row style={{ marginTop: 30 }}>\r\n            <Grid.Column width={16}>\r\n              <h4>THÔNG TIN THÊM</h4>\r\n              <hr style={{ height: 2, border: \"none\", color: \"#333\", backgroundColor: \"#333\" }} />\r\n              <Grid.Row style={{ marginTop: 25 }}>\r\n                <Grid.Column width={16}>\r\n                  <p>{this.state.linkedIn}</p>\r\n                  <p>{this.state.github}</p>\r\n                  <p>- Câu nói ưa thích: \"Làm những gì mình thích và thích những gì mình làm\"</p>\r\n                  <p>- Có khả năng tự học, tìm hiểu</p>\r\n                  <p>- Tự nhận xét bản thân là 1 người thẳng thắn, nghiêm túc</p>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainBody;\r\n","const skills = [\r\n    {\r\n        name: \"Tin học văn phòng\",\r\n        stars: 4\r\n    },\r\n    {\r\n        name: \"Tiếng Anh\",\r\n        stars: 3\r\n    },\r\n    {\r\n        name: \"SQL\",\r\n        stars: 3\r\n    },\r\n    {\r\n        name: \"Java\",\r\n        stars: 3\r\n    },\r\n    {\r\n        name: \"Javascript\",\r\n        stars: 4\r\n    },\r\n    {\r\n        name: \"Git/SVN\",\r\n        stars: 3\r\n    }\r\n];\r\n\r\nexport default skills;","const hobbies = [\r\n    \"Đọc sách, tiểu thuyết\",\r\n    \"Thể thao điện tử\",\r\n    \"Nhạc không lời\",\r\n    \"Theo dõi các blog về công nghệ\"\r\n];\r\nexport default hobbies;\r\n","import React from \"react\";\r\nimport skills from \"./right-body-data/skill-list\";\r\nimport hobbies from \"./right-body-data/hobby-list\";\r\nimport { Grid, Icon } from \"semantic-ui-react\";\r\n\r\nfunction SkillRow(props) {\r\n  const name = props.name;\r\n  const stars = [];\r\n  for (let i = 0; i < props.stars; i++) {\r\n    stars.push(<Icon key={i} name={\"star\"} color=\"yellow\" />);\r\n  }\r\n  return (\r\n    <Grid>\r\n    <Grid.Row>\r\n      <Grid.Column width={16}>\r\n        <p>\r\n          <b>{name}</b>: {stars}\r\n        </p>\r\n      </Grid.Column>\r\n    </Grid.Row></Grid>\r\n  );\r\n}\r\n\r\nclass RightBody extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shortTerm:\r\n        \"- Ngắn hạn: Tích luỹ kiến thức, kinh nghiệm, làm quen với môi trường phát triển phần mềm thực tế, thành thạo công việc trong thời gian thực tập\",\r\n      longTerm:\r\n        \"- Dài hạn: Trở thành full-stack developer, nắm vững chuyên môn của một vài ngôn ngữ chủ đạo. \"\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const skillList = skills;\r\n    const hobbyList = hobbies;\r\n    return (\r\n      <Grid>\r\n        <Grid.Row style={{ marginTop: 30 }}>\r\n          <Grid.Column width={16}>\r\n            <h4>MỤC TIÊU NGHỀ NGHIỆP</h4>\r\n            <hr\r\n              style={{\r\n                height: 2,\r\n                border: \"none\",\r\n                color: \"#333\",\r\n                backgroundColor: \"#333\"\r\n              }}\r\n            />\r\n            <Grid.Row style={{ marginTop: 25 }}>\r\n              <Grid.Column width={16}>\r\n                <p>{this.state.shortTerm}</p>\r\n                <p>{this.state.longTerm}</p>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row style={{ marginTop: 30 }}>\r\n          <Grid.Column width={16}>\r\n            <h4>KỸ NĂNG</h4>\r\n            <hr\r\n              style={{\r\n                height: 2,\r\n                border: \"none\",\r\n                color: \"#333\",\r\n                backgroundColor: \"#333\"\r\n              }}\r\n            />\r\n            <Grid.Row style={{ marginTop: 25 }}>\r\n              <Grid.Column width={16}>\r\n                {skillList.map((skill, index) => {\r\n                  return <SkillRow key={index} name={skill.name} stars={skill.stars} />;\r\n                })}\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row style={{ marginTop: 30 }}>\r\n          <Grid.Column width={16}>\r\n            <h4>SỞ THÍCH</h4>\r\n            <hr\r\n              style={{\r\n                height: 2,\r\n                border: \"none\",\r\n                color: \"#333\",\r\n                backgroundColor: \"#333\"\r\n              }}\r\n            />\r\n            <Grid.Row style={{ marginTop: 25 }}>\r\n              <Grid.Column width={16}>\r\n                {hobbyList.map((hobby, index) => {\r\n                  return <li key={index}>{hobby}</li>;\r\n                })}\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RightBody;\r\n","import React from \"react\";\r\nimport MainBody from \"./main-body/main-body\";\r\nimport RightBody from \"./right-body/right-body\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nclass BodyCV extends React.Component {\r\n  render() {\r\n    return (\r\n      <Grid>\r\n        <Grid.Row className=\"row\" style={{ marginBottom: 50 }}>\r\n          <Grid.Column width={10}>\r\n            <MainBody />\r\n          </Grid.Column>\r\n          <Grid.Column width={6}>\r\n            <RightBody />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BodyCV;\r\n","import React from \"react\";\r\nimport HeaderCV from \"./header-cv/header-cv\";\r\nimport BodyCV from \"./body-cv/body-cv\";\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <Grid centered>\r\n      <Grid.Row>\r\n        <Grid.Column width={9}>\r\n          <Grid.Row>\r\n            <Grid.Column id=\"CV\" width={16}>\r\n              <Grid.Row>\r\n                <Grid.Column width={14}>\r\n                  <HeaderCV />\r\n                  <hr\r\n                    style={{\r\n                      height: 5,\r\n                      border: \"none\",\r\n                      color: \"#333\",\r\n                      backgroundColor: \"#333\"\r\n                    }}\r\n                  />\r\n                  <BodyCV />\r\n                  <hr\r\n                    style={{\r\n                      height: 5,\r\n                      border: \"none\",\r\n                      color: \"#333\",\r\n                      backgroundColor: \"#333\"\r\n                    }}\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n","const _ = require(\"lodash\");\r\n\r\nexport default function dijkstra(data) {\r\n  for (let link of data.links) {\r\n    if (link.distance < 0) {\r\n      return false;\r\n    }\r\n  }\r\n  const nodes = [];\r\n  const results = [];\r\n  for (let node of data.nodes) {\r\n    // Cau truc du lieu cua 1 dinh\r\n    let obj = {};\r\n    obj.node = node.id;\r\n    obj.way = node.id;\r\n    obj.currentValue = Infinity;\r\n    obj.values = [];\r\n    obj.links = data.links.filter(link => {\r\n      // Danh sach cac dinh ke voi dinh hien tai\r\n      return link.source === node.id;\r\n    });\r\n    obj.marked = false;\r\n    nodes.push(obj);\r\n  }\r\n\r\n  for (let node of nodes) {\r\n    // Moi vong lap se xuat phat tu 1 dinh khac nhau\r\n    let otherNodes = _.cloneDeep(\r\n      // Loc lay danh sach cac dinh con lai\r\n      nodes.filter(other => {\r\n        return other !== node;\r\n      })\r\n    );\r\n    let min = Infinity;\r\n    let markedNodes = [];\r\n    let currentNode = _.cloneDeep(node);\r\n    currentNode.currentValue = 0;\r\n    markedNodes.push(node);\r\n    while (markedNodes.length < nodes.length) {\r\n      // Dieu kien dung: chung nao chua chon tat ca cac diem thi se khong dung lai\r\n      for (let other of otherNodes) {\r\n        // Xet cac diem con lai\r\n        for (let link of currentNode.links) {\r\n          if (link.target === other.node) {\r\n            if (\r\n              // So sanh gia tri hien tai voi gia tri moi tai diem dang xet\r\n              other.currentValue > // va chon gia tri nho hon\r\n              currentNode.currentValue + parseInt(link.distance, 10)\r\n            ) {\r\n              other.way = currentNode.way + other.node;\r\n              other.currentValue = currentNode.currentValue + parseInt(link.distance, 10);\r\n            }\r\n          }\r\n        }\r\n        if (min > other.currentValue) {\r\n          min = other.currentValue;\r\n        }\r\n        let obj = {};\r\n        obj[\"value\"] = other.currentValue;\r\n        obj[\"lastNode\"] = other.way.slice(other.way.length - 2, other.way.length - 1);\r\n        other.values.push(obj);\r\n        console.log(other.node);\r\n      }\r\n      for (let other of otherNodes) {\r\n        // Vong lap lay ra dinh co gia tri nho nhat lam dinh xuat phat trong buoc tiep theo\r\n        if (other.currentValue === min) {\r\n          other.marked = true;\r\n          currentNode = _.cloneDeep(other);\r\n          markedNodes.push(other);\r\n          otherNodes = otherNodes.filter(node => {\r\n            return node !== other;\r\n          });\r\n          min = Infinity;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    results.push(markedNodes);\r\n  }\r\n  // Cau truc du lieu cac doi tuong de hien thi len giao dien web\r\n  const dijkstraTables = [];\r\n  results.map(result => {\r\n    let dijkstraTable = {};\r\n    dijkstraTable.headerCells = [];\r\n    dijkstraTable.bodyRows = [];\r\n    dijkstraTable.footerCells = [];\r\n    result.map(node => {\r\n      dijkstraTable.headerCells.push(node[\"node\"]);\r\n      dijkstraTable.footerCells.push(node[\"way\"]);\r\n      return true;\r\n    });\r\n    for (let i = 0; i < result.length; i++) {\r\n      let cells = [];\r\n      result.map(node => {\r\n        let cell = {};\r\n        cell.marked = false;\r\n        if (Boolean(node[\"values\"][i])) {\r\n          cell.value = node[\"values\"][i][\"value\"];\r\n          cell.lastNode = node[\"values\"][i][\"lastNode\"];\r\n          if (i === node[\"values\"].length - 1) {\r\n            cell.marked = true;\r\n          }\r\n        } else {\r\n          cell.value = \"-\";\r\n          cell.lastNode = \"-\";\r\n        }\r\n        return cells.push(cell);\r\n      });\r\n      dijkstraTable.bodyRows.push(cells);\r\n    }\r\n    return dijkstraTables.push(dijkstraTable);\r\n  });\r\n  return dijkstraTables;\r\n}\r\n","const _ = require(\"lodash\");\r\n\r\nexport default function bellmanFord(data) {\r\n  for (let link of data.links) {\r\n    if (link.distance < 0) {\r\n      return false;\r\n    }\r\n  }\r\n  const bellmanFordResult = [];\r\n  const originalNodes = [];\r\n  for (let node of data.nodes) {\r\n    // Cau truc du lieu cua 1 dinh\r\n    let obj = {};\r\n    obj.node = node.id;\r\n    obj.way = node.id;\r\n    obj.currentValue = Infinity;\r\n    obj.links = data.links.filter(link => {\r\n      // Danh sach cac dinh ke voi dinh hien tai\r\n      return link.source === node.id;\r\n    });\r\n    obj.marked = false;\r\n    originalNodes.push(obj);\r\n  }\r\n\r\n  for (let originalNode of originalNodes) {\r\n    // Moi vong lap se xuat phat tu 1 dinh moi\r\n    const results = [];\r\n    let startNode = _.cloneDeep(originalNode);\r\n    let firstNodes = [];\r\n    let originalNodesClone = _.cloneDeep(originalNodes);\r\n\r\n    for (let link of startNode.links) {\r\n      // Lay ra danh sach dinh ke voi dinh xuat phat\r\n      for (let otherNode of originalNodesClone) {\r\n        if (link.target === otherNode.node) {\r\n          otherNode.currentValue = parseInt(link.distance, 10);\r\n          firstNodes.push(otherNode);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let firstNode of firstNodes) {\r\n      let currentNodes = [firstNode];\r\n      let nodes = _.cloneDeep(originalNodesClone);\r\n      for (let node of nodes) {\r\n        if (node !== firstNode) {\r\n          node.currentValue = 0;\r\n        }\r\n      }\r\n\r\n      while (currentNodes.length > 0) {\r\n        // Dieu kien dung: chi khi duong di ngan nhat toi cac dinh khac\r\n        // da duoc thiet lap\r\n        for (let currentNode of currentNodes) {\r\n          currentNode.marked = false;\r\n          for (let link of currentNode.links) {\r\n            for (let otherNode of nodes) {\r\n              if (link.target === otherNode.node) {\r\n                if (link.target !== firstNode.node) {\r\n                  if (\r\n                    // So sanh trong so hien tai cua dinh dang xet voi trong so moi no se nhan\r\n                    // neu trong so moi co gia tri nho hon thi tien hanh cap nhat\r\n                    otherNode.currentValue >\r\n                    currentNode.currentValue + parseInt(link.distance, 10)\r\n                  ) {\r\n                    otherNode.currentValue = currentNode.currentValue + parseInt(link.distance, 10);\r\n                    otherNode.marked = true; // Danh dau rang diem dang xet vua duoc cap nhat gia tri moi (1)\r\n                    otherNode.way = currentNode.way + otherNode.node;\r\n                  }\r\n                } else {\r\n                  otherNode.currentValue = firstNode.currentValue;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        currentNodes = currentNodes.filter(node => {\r\n          return node.marked;\r\n        });\r\n        for (let node of nodes) {\r\n          // Cac diem vua duoc danh dau o (1) se thuc hien tinh toan lai\r\n          // do dai toi cac dinh khac\r\n          if (currentNodes.indexOf(node) === -1 && node.marked) {\r\n            currentNodes.push(node);\r\n          }\r\n        }\r\n      }\r\n      nodes = nodes.filter(node => {\r\n        return node.node !== startNode.node;\r\n      });\r\n      results.push(nodes);\r\n    }\r\n\r\n    // Cau truc du lieu cac doi tuong de hien thi ket qua len giao dien web\r\n    let nodeList = _.cloneDeep(data.nodes);\r\n    for (let node of nodeList) {\r\n      node[\"values\"] = [];\r\n      for (let result of results) {\r\n        for (let resultNode of result) {\r\n          if (resultNode.node === node.id) {\r\n            node[\"values\"].push(resultNode);\r\n          }\r\n        }\r\n      }\r\n      node[\"values\"].sort((node1, node2) => {\r\n        return node1.way > node2.way;\r\n      });\r\n      if (node[\"values\"].length > 0) {\r\n        // Tim gia tri duong di ngan nhat\r\n        let minValue = node[\"values\"][0][\"currentValue\"];\r\n        for (let nodeValue of node[\"values\"]) {\r\n          if (minValue > nodeValue[\"currentValue\"]) {\r\n            minValue = nodeValue[\"currentValue\"];\r\n          }\r\n        }\r\n        for (let nodeValue of node[\"values\"]) {\r\n          if (minValue === nodeValue[\"currentValue\"]) {\r\n            nodeValue[\"marked\"] = true;\r\n            nodeValue[\"way\"] = startNode.node + nodeValue[\"way\"];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    firstNodes.sort((node1, node2) => {\r\n      return node1.way > node2.way;\r\n    });\r\n    let singleResult = {}; // Cau truc du lieu hien thi duong di ngan nhat xuat phat tu 1 diem cu the\r\n    singleResult[\"firstNodes\"] = _.cloneDeep(firstNodes); // Diem xuat phat\r\n    singleResult[\"startNode\"] = _.cloneDeep(startNode); // Danh sach cac diem ke voi diem xuat phat\r\n    singleResult[\"nodeList\"] = nodeList.filter(node => {\r\n      // Gia tri duong di ngan nhat toi cac diem con lai\r\n      return node[\"values\"].length > 0;\r\n    });\r\n    bellmanFordResult.push(singleResult);\r\n  }\r\n  return bellmanFordResult; // Ket qua cuoi cung\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  Segment,\r\n  Header,\r\n  Grid,\r\n  Input,\r\n  Modal,\r\n  Button,\r\n  Tab,\r\n  Accordion,\r\n  Icon,\r\n  Table,\r\n  TextArea,\r\n  Form,\r\n  Popup,\r\n  Message\r\n} from \"semantic-ui-react\";\r\nimport { Graph } from \"react-d3-graph\";\r\nimport { toast } from \"react-toastify\";\r\nimport dijkstra from \"./dijkstra-algorithm\";\r\nimport bellmanFord from \"./bellman-ford-algorithm\";\r\nconst data = {\r\n  nodes: [\r\n    {\r\n      id: \"A\"\r\n    }\r\n  ],\r\n  links: []\r\n};\r\n\r\nconst myConfig = {\r\n  height: 400,\r\n  highlightDegree: 1,\r\n  highlightOpacity: 0.2,\r\n  linkHighlightBehavior: true,\r\n  nodeHighlightBehavior: true,\r\n  width: 775,\r\n  node: {\r\n    color: \"#fff\",\r\n    fontColor: \"black\",\r\n    fontSize: 20,\r\n    fontWeight: \"normal\",\r\n    highlightColor: \"red\",\r\n    highlightFontSize: 20,\r\n    highlightFontWeight: \"bold\",\r\n    highlightStrokeColor: \"SAME\",\r\n    highlightStrokeWidth: 1.5,\r\n    labelProperty: \"name\",\r\n    mouseCursor: \"pointer\",\r\n    opacity: 1,\r\n    renderLabel: true,\r\n    size: 450,\r\n    strokeColor: \"#000\",\r\n    strokeWidth: 1.5,\r\n    svg: \"\",\r\n    symbolType: \"circle\"\r\n  },\r\n  link: {\r\n    color: \"#d3d3d3\",\r\n    fontColor: \"black\",\r\n    fontSize: 20,\r\n    fontWeight: \"normal\",\r\n    highlightColor: \"blue\",\r\n    highlightFontSize: 20,\r\n    highlightFontWeight: \"normal\",\r\n    labelProperty: \"label\",\r\n    mouseCursor: \"pointer\",\r\n    opacity: 1,\r\n    renderLabel: true,\r\n    strokeWidth: 4\r\n  },\r\n  d3: {\r\n    gravity: -500\r\n  }\r\n};\r\n\r\nclass NodeModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentNode: \"\",\r\n      numOfLink: 0,\r\n      currentNodeLinks: [],\r\n      currentLink: {\r\n        source: \"\",\r\n        target: \"\",\r\n        label: 0,\r\n        color: \"#d3d3d3\",\r\n        distance: 0\r\n      },\r\n      created: false\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const { currentNode } = nextProps;\r\n    const currentNodeLinks = [];\r\n    for (let link of data.links) {\r\n      if (link.source === currentNode) {\r\n        currentNodeLinks.push(link);\r\n      }\r\n    }\r\n    this.setState({\r\n      currentNode,\r\n      currentNodeLinks,\r\n      numOfLink: currentNodeLinks.length\r\n    });\r\n  }\r\n\r\n  handleAddLinkForm = () => {\r\n    this.setState({\r\n      numOfLink: this.state.numOfLink + 1\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      currentLink: {\r\n        ...this.state.currentLink,\r\n        [e.target.name]: e.target.value\r\n      }\r\n    });\r\n  };\r\n\r\n  handleCreateLink = () => {\r\n    const { currentLink, currentNode } = this.state;\r\n    const links = data.links;\r\n    let link1 = currentLink;\r\n    if (currentLink.distance !== 0 && currentLink.target !== \"\") {\r\n      link1.source = currentNode;\r\n      links.push(link1);\r\n      let link2 = {};\r\n      link2.source = link1.target;\r\n      link2.target = currentNode;\r\n      link2.distance = link1.distance;\r\n      link2.label = link1.distance;\r\n      links.push(link2);\r\n      toast.success(\"Create link succeed!\");\r\n      const currentNodeLinks = [];\r\n      for (let link of data.links) {\r\n        if (link.source === currentNode) {\r\n          currentNodeLinks.push(link);\r\n        }\r\n      }\r\n      this.setState({\r\n        currentNodeLinks,\r\n        numOfLink: currentNodeLinks.length\r\n      });\r\n    } else {\r\n      toast.error(\"Create link failed!\");\r\n    }\r\n  };\r\n\r\n  handleRemoveLink = (link = null) => {\r\n    if (Boolean(link)) {\r\n      let linksFiltered = data.links.filter(value => {\r\n        if (\r\n          (value.source === link.source && value.target === link.target) ||\r\n          (value.source === link.target && value.target === link.source)\r\n        ) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      data.links = linksFiltered;\r\n    }\r\n    this.setState({\r\n      numOfLink: this.state.numOfLink - 1\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { numOfLink, currentNodeLinks, currentNode, currentLink } = this.state;\r\n    const { nodeModal, handleCloseModal } = this.props;\r\n    const rows = [];\r\n    for (let i = 0; i < numOfLink; i++) {\r\n      if (i < currentNodeLinks.length) {\r\n        rows.push(\r\n          <Grid.Row key={i}>\r\n            <Grid.Column width={6}>\r\n              <Input label=\"Target\" value={currentNodeLinks[i].target} type=\"text\" />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n              <Input label=\"Distance\" value={currentNodeLinks[i].distance} type=\"number\" />\r\n              <Button\r\n                onClick={() => this.handleRemoveLink(currentNodeLinks[i])}\r\n                negative\r\n                icon=\"trash\"\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        );\r\n      } else {\r\n        rows.push(\r\n          <Grid.Row key={i}>\r\n            <Grid.Column width={6}>\r\n              <Input\r\n                onChange={this.handleChange}\r\n                name=\"target\"\r\n                label=\"Target\"\r\n                type=\"text\"\r\n                value={currentLink.target}\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n              <Input\r\n                onChange={this.handleChange}\r\n                name=\"distance\"\r\n                label=\"Distance\"\r\n                type=\"number\"\r\n                value={currentLink.distance}\r\n              />\r\n              <Button onClick={this.handleCreateLink} positive icon=\"checkmark\" />\r\n              <Button onClick={() => this.handleRemoveLink()} negative icon=\"trash\" />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <Modal open={nodeModal} onClose={handleCloseModal}>\r\n        <Modal.Header>Node {currentNode} config</Modal.Header>\r\n        <Modal.Content>\r\n          <Segment>\r\n            <Button positive onClick={this.handleAddLinkForm} content=\"Add link\" icon=\"plus\" />\r\n          </Segment>\r\n          <Grid>\r\n            {rows.map((row, indexx) => {\r\n              return row;\r\n            })}\r\n          </Grid>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button onClick={handleCloseModal}>Close</Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nclass ShortestPath extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numOfNode: 1,\r\n      currentNode: \"\",\r\n      nodeModal: false,\r\n      dijkstraResult: [],\r\n      bellmanFordResult: [],\r\n      activeIndex: 0,\r\n      textArea: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      numOfNode: data.nodes.length\r\n    });\r\n  }\r\n\r\n  handleChange = e => {\r\n    let numOfNode = e.target.value;\r\n    this.setState({\r\n      numOfNode\r\n    });\r\n    if (e.target.value != 0 && e.target.value <= 10) {\r\n      let nodes = [];\r\n      for (let i = 0; i < numOfNode; i++) {\r\n        let node = {\r\n          id: String.fromCharCode(65 + i)\r\n        };\r\n        nodes.push(node);\r\n      }\r\n\r\n      data.nodes = nodes;\r\n    }\r\n  };\r\n\r\n  handleOpenModal = currentNode => {\r\n    const currentNodeLink = [];\r\n    for (let link of data.links) {\r\n      if (link.source === currentNode) {\r\n        currentNodeLink.push(link);\r\n      }\r\n    }\r\n    this.setState({\r\n      currentNode,\r\n      nodeModal: true\r\n    });\r\n  };\r\n\r\n  handleCloseModal = () => {\r\n    this.setState({\r\n      nodeModal: false\r\n    });\r\n  };\r\n\r\n  handleChangePathColor = way => {\r\n    const nodes = way.split(\"\");\r\n    for (let link of data.links) {\r\n      link[\"color\"] = \"#d3d3d3\";\r\n    }\r\n    for (let i = 0; i < nodes.length - 1; i++) {\r\n      let source = nodes[i];\r\n      let target = nodes[i + 1];\r\n      for (let link of data.links) {\r\n        if (\r\n          (link.source === source && link.target === target) ||\r\n          (link.source === target && link.target === source)\r\n        ) {\r\n          link[\"color\"] = \"red\";\r\n        }\r\n      }\r\n    }\r\n    this.forceUpdate();\r\n  };\r\n\r\n  getDijkstraResult = () => {\r\n    const dijkstraTables = dijkstra(data);\r\n    const panes = [];\r\n    if (!dijkstraTables) {\r\n      panes.push({\r\n        menuItem: \"Message\",\r\n        render: () => (\r\n          <Tab.Pane>\r\n            <Message warning>\r\n              <Message.Header>Graph contains negative value</Message.Header>\r\n            </Message>\r\n          </Tab.Pane>\r\n        )\r\n      });\r\n    } else {\r\n      for (let table of dijkstraTables) {\r\n        panes.push({\r\n          menuItem: table.headerCells[0],\r\n          render: () => (\r\n            <Tab.Pane>\r\n              <Table>\r\n                <Table.Header>\r\n                  <Table.Row>\r\n                    {table.headerCells.map((cell, index) => {\r\n                      return <Table.HeaderCell key={index}>{cell}</Table.HeaderCell>;\r\n                    })}\r\n                  </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                  {table.bodyRows.map((row, index) => {\r\n                    return (\r\n                      <Table.Row key={index}>\r\n                        {row.map((cell, cellIndex) => {\r\n                          return (\r\n                            <Table.Cell key={cellIndex}>\r\n                              {cell.value !== Infinity ? (\r\n                                <>\r\n                                  ({cell.value},{cell.lastNode}){\" \"}\r\n                                  {cell.marked && <Icon color=\"green\" name=\"checkmark\" />}{\" \"}\r\n                                </>\r\n                              ) : (\r\n                                \"Ꝏ\"\r\n                              )}\r\n                            </Table.Cell>\r\n                          );\r\n                        })}\r\n                      </Table.Row>\r\n                    );\r\n                  })}\r\n                </Table.Body>\r\n                <Table.Footer>\r\n                  <Table.Row>\r\n                    {table.footerCells.map((way, index) => {\r\n                      return (\r\n                        <Table.HeaderCell key={index}>\r\n                          {way.length > 1 ? (\r\n                            <Button positive onClick={() => this.handleChangePathColor(way)}>\r\n                              {way}\r\n                            </Button>\r\n                          ) : (\r\n                            \"X\"\r\n                          )}\r\n                        </Table.HeaderCell>\r\n                      );\r\n                    })}\r\n                  </Table.Row>\r\n                </Table.Footer>\r\n              </Table>\r\n            </Tab.Pane>\r\n          )\r\n        });\r\n      }\r\n    }\r\n    this.setState({\r\n      dijkstraResult: panes\r\n    });\r\n  };\r\n\r\n  getBellmanFordResult = () => {\r\n    const bellmanFordResults = bellmanFord(data);\r\n    const panes = [];\r\n    if (!bellmanFordResults) {\r\n      panes.push({\r\n        menuItem: \"Message\",\r\n        render: () => (\r\n          <Tab.Pane>\r\n            <Message warning>\r\n              <Message.Header>Graph contains negative value</Message.Header>\r\n            </Message>\r\n          </Tab.Pane>\r\n        )\r\n      });\r\n    } else {\r\n      for (let result of bellmanFordResults) {\r\n        panes.push({\r\n          menuItem: result.startNode.node,\r\n          render: () => (\r\n            <Tab.Pane>\r\n              <Table>\r\n                <Table.Header>\r\n                  <Table.Row>\r\n                    <Table.HeaderCell>Start: {result.startNode.node}</Table.HeaderCell>\r\n                    {result.firstNodes.map((node, index) => {\r\n                      return <Table.HeaderCell key={index}>{node.node}</Table.HeaderCell>;\r\n                    })}\r\n                  </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                  {result.nodeList.map((node, index) => {\r\n                    return (\r\n                      <Table.Row key={index}>\r\n                        <Table.Cell>{node.id}</Table.Cell>\r\n                        {node.values.map((value, idx) => {\r\n                          return (\r\n                            <Table.Cell key={idx}>\r\n                              {value.currentValue}{\" \"}\r\n                              {value.marked && (\r\n                                <Fragment>\r\n                                  <Icon color=\"green\" name=\"checkmark\" /> -\r\n                                  <Button\r\n                                    positive\r\n                                    onClick={() => this.handleChangePathColor(value.way)}\r\n                                  >\r\n                                    {value.way}\r\n                                  </Button>\r\n                                </Fragment>\r\n                              )}\r\n                            </Table.Cell>\r\n                          );\r\n                        })}\r\n                      </Table.Row>\r\n                    );\r\n                  })}\r\n                </Table.Body>\r\n              </Table>\r\n            </Tab.Pane>\r\n          )\r\n        });\r\n      }\r\n    }\r\n    this.setState({\r\n      bellmanFordResult: panes\r\n    });\r\n  };\r\n\r\n  handleChooseAccordion = (e, titleProps) => {\r\n    const { index } = titleProps;\r\n    const { activeIndex } = this.state;\r\n    const newIndex = activeIndex === index ? -1 : index;\r\n\r\n    this.setState({ activeIndex: newIndex });\r\n  };\r\n\r\n  handleCalculate = () => {\r\n    this.getBellmanFordResult();\r\n    this.getDijkstraResult();\r\n  };\r\n\r\n  handleChangeTextArea = (e, dataTA) => {\r\n    // eslint-disable-next-line\r\n    if (dataTA.value == \"\") {\r\n      data.links = [];\r\n    } else if (dataTA.value[dataTA.value.length - 1] === \"\\n\") {\r\n      let textArea = dataTA.value\r\n        .toUpperCase()\r\n        .slice(0, dataTA.value.length - 1)\r\n        .split(\"\\n\");\r\n      data.links = [];\r\n      for (let linkText of textArea) {\r\n        linkText = linkText.split(\" \");\r\n        let link1 = {};\r\n        link1[\"source\"] = linkText[0];\r\n        link1[\"target\"] = linkText[1];\r\n        link1[\"distance\"] = linkText[2];\r\n        let link2 = {};\r\n        link2[\"label\"] = linkText[2];\r\n        link2[\"source\"] = linkText[1];\r\n        link2[\"target\"] = linkText[0];\r\n        link2[\"distance\"] = linkText[2];\r\n        data.links.push(link1);\r\n        data.links.push(link2);\r\n      }\r\n      this.setState({\r\n        dijkstraResult: [],\r\n        bellmanFordResult: []\r\n      });\r\n    }\r\n    this.forceUpdate();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      currentNode,\r\n      currentNodeLink,\r\n      nodeModal,\r\n      activeIndex,\r\n      dijkstraResult,\r\n      bellmanFordResult\r\n    } = this.state;\r\n    return (\r\n      <>\r\n        <Segment color=\"black\">\r\n          <Header>Shortest Path</Header>\r\n          <NodeModal\r\n            currentNode={currentNode}\r\n            currentNodeLink={currentNodeLink}\r\n            nodeModal={nodeModal}\r\n            handleCloseModal={this.handleCloseModal}\r\n          />\r\n        </Segment>\r\n        <Segment color=\"black\">\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Grid.Column width={8}>\r\n                <Segment>\r\n                  <Graph\r\n                    id=\"node-graph\"\r\n                    data={data}\r\n                    config={myConfig}\r\n                    onClickNode={this.handleOpenModal}\r\n                  />\r\n                </Segment>\r\n              </Grid.Column>\r\n              <Grid.Column width={8}>\r\n                <Grid.Row>\r\n                  <Grid.Column width={16}>\r\n                    <Segment>\r\n                      <Accordion>\r\n                        <Accordion.Title\r\n                          active={activeIndex === 1}\r\n                          index={1}\r\n                          onClick={this.handleChooseAccordion}\r\n                        >\r\n                          <Header>\r\n                            Dijkstra Algorithm <Icon name=\"dropdown\" />\r\n                          </Header>\r\n                        </Accordion.Title>\r\n                        <Accordion.Content active={activeIndex === 1}>\r\n                          {dijkstraResult.length > 0 ? (\r\n                            <Tab panes={dijkstraResult} />\r\n                          ) : (\r\n                            <Message warning>\r\n                              <Message.Header>Nothing to display</Message.Header>\r\n                            </Message>\r\n                          )}\r\n                        </Accordion.Content>\r\n\r\n                        <Accordion.Title\r\n                          active={activeIndex === 2}\r\n                          index={2}\r\n                          onClick={this.handleChooseAccordion}\r\n                        >\r\n                          <Header>\r\n                            Bellman-Ford Algorithm\r\n                            <Icon name=\"dropdown\" />\r\n                          </Header>\r\n                        </Accordion.Title>\r\n                        <Accordion.Content active={activeIndex === 2}>\r\n                          {bellmanFordResult.length > 0 ? (\r\n                            <Tab panes={bellmanFordResult} />\r\n                          ) : (\r\n                            <Message warning>\r\n                              <Message.Header>Nothing to display</Message.Header>\r\n                            </Message>\r\n                          )}\r\n                        </Accordion.Content>\r\n                      </Accordion>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n          <Segment color=\"black\">\r\n            <Header>Configuration</Header>\r\n            <Grid>\r\n              <Grid.Row>\r\n                <Grid.Column width={3}>\r\n                  <Input\r\n                    name=\"numOfNode\"\r\n                    min={1}\r\n                    max={10}\r\n                    type=\"number\"\r\n                    value={this.state.numOfNode}\r\n                    onChange={this.handleChange}\r\n                    label=\"Number of node\"\r\n                  />\r\n                </Grid.Column>\r\n                <Grid.Column width={11}>\r\n                  {data.nodes.map((node, index) => {\r\n                    return (\r\n                      <Button\r\n                        key={index}\r\n                        color=\"teal\"\r\n                        onClick={() => this.handleOpenModal(node.id)}\r\n                      >\r\n                        {node.id}\r\n                      </Button>\r\n                    );\r\n                  })}\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                  <Button positive onClick={this.handleCalculate} content=\"Find shortest path\" />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n              <Grid.Row>\r\n                <Grid.Column width={16}>\r\n                  <Form>\r\n                    <Popup\r\n                      trigger={<TextArea onChange={this.handleChangeTextArea} />}\r\n                      on=\"focus\"\r\n                      content=\"Example: 'A B 2' => Link from A to B with weight = 2\"\r\n                      header=\"Create link between Nodes\"\r\n                    />\r\n                  </Form>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Segment>\r\n        </Segment>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShortestPath;\r\n","export const empColor = {\r\n  NamNH20: {\r\n    color: \"black\",\r\n    bgColor: \"#00aa99\"\r\n  },\r\n  DatNT11: {\r\n    color: \"black\",\r\n    bgColor: \"#ff6600\"\r\n  },\r\n  GiangHT7: {\r\n    color: \"black\",\r\n    bgColor: \"#ffcc33\"\r\n  },\r\n  VanQTH: {\r\n    color: \"black\",\r\n    bgColor: \"#ffccff\"\r\n  },\r\n  TungPT15: {\r\n    color: \"white\",\r\n    bgColor: \"#000\"\r\n  },\r\n  ToanNV32: {\r\n    color: \"white\",\r\n    bgColor: \"#999\"\r\n  },\r\n  ThoVH3: {\r\n    color: \"black\",\r\n    bgColor: \"#9999ff\"\r\n  },\r\n  LucNV6: {\r\n    color: \"white\",\r\n    bgColor: \"#00cc00\"\r\n  },\r\n  LongTT2: {\r\n    color: \"black\",\r\n    bgColor: \"#ccff00\"\r\n  },\r\n  AnhNTV9: {\r\n    color: \"black\",\r\n    bgColor: \"#999966\"\r\n  },\r\n  TuanNA106: {\r\n    color: \"black\",\r\n    bgColor: \"#00ffff\"\r\n  },\r\n  SangDV4: {\r\n    color: \"white\",\r\n    bgColor: \"#336600\"\r\n  },\r\n  ThuyNN9: {\r\n    color: \"black\",\r\n    bgColor: \"#dddddd\"\r\n  },\r\n  HuanHV3: {\r\n    color: \"black\",\r\n    bgColor: \"#ffcccc\"\r\n  },\r\n  TuTT17: {\r\n    color: \"white\",\r\n    bgColor: \"#0066cc\"\r\n  },\r\n  DungNT173: {\r\n    color: \"black\",\r\n    bgColor: \"#ff3399\"\r\n  },\r\n  TuanLPM: {\r\n    color: \"black\",\r\n    bgColor: \"#ff9933\"\r\n  }\r\n};\r\n\r\nconst LEAD_MAX_SHIFT = 3;\r\nconst PRO_MAX_SHIFT = 4;\r\nconst NORMAL_MAX_SHIFT = 4;\r\n\r\nexport const employeesData = {\r\n  NamNH20: {\r\n    group: 1,\r\n    maxShift: LEAD_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  DatNT11: {\r\n    group: 1,\r\n    maxShift: LEAD_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  VanQTH: {\r\n    group: 1,\r\n    maxShift: LEAD_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  TungPT15: {\r\n    group: 1,\r\n    maxShift: LEAD_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  ThoVH3: {\r\n    group: 1,\r\n    maxShift: PRO_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  GiangHT7: {\r\n    group: 1,\r\n    maxShift: PRO_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  ToanNV32: {\r\n    group: 1,\r\n    maxShift: PRO_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  LucNV6: {\r\n    group: 1,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  LongTT2: {\r\n    group: 1,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  AnhNTV9: {\r\n    group: 1,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  TuanNA106: {\r\n    group: 1,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  SangDV4: {\r\n    group: 1,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  ThuyNN9: {\r\n    group: 2,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  HuanHV3: {\r\n    group: 2,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  TuTT17: {\r\n    group: 2,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  },\r\n  DungNT173: {\r\n    group: 2,\r\n    maxShift: NORMAL_MAX_SHIFT,\r\n    dayShift: 0,\r\n    dayShiftAsFirst: 1,\r\n    dayShiftAsSecond: 1,\r\n    firstOnSecondRate: 1,\r\n    options: [],\r\n    weekendShift: 0,\r\n    dayWithG2: 0,\r\n    done: false\r\n  }\r\n};\r\n","import _ from \"lodash\";\r\n\r\nlet schedule = [];\r\n\r\nfunction checkDayOption(date, option) {\r\n    // 15th day in month = 15\r\n    if (date.getDate() === option) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction checkGroupOf2Emp(emp1, emp2) {\r\n    if (emp1[\"group\"] === 2 && emp2[\"group\"] === 2) {\r\n        return false;\r\n    }\r\n    if (emp1[\"group\"] === 2 || emp2[\"group\"] === 2) {\r\n        if (emp1[\"dayWithG2\"] === 2 || emp2[\"dayWithG2\"] === 2) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction chooseRandom(max, min = 0) {\r\n    let randomPosition = Math.floor(Math.random() * (max - min) + min);\r\n    return randomPosition;\r\n}\r\n\r\nfunction chooseEmployee(empId, listOption, date) {\r\n    let day = date.getDate() - 1;\r\n    if (day >= 0) {\r\n        if (Boolean(schedule[day - 1])) {\r\n            if (\r\n                schedule[day - 1][\"firstShift\"] === empId ||\r\n                schedule[day - 1][\"secondShift\"] === empId\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n        if (Boolean(schedule[day + 1])) {\r\n            if (\r\n                schedule[day + 1][\"firstShift\"] === empId ||\r\n                schedule[day + 1][\"secondShift\"] === empId\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    for (let option of listOption) {\r\n        if (!checkDayOption(date, option)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction removeEmployeeFromList(empId, list) {\r\n    list.splice(list.indexOf(empId), 1);\r\n}\r\n\r\nfunction isWeekend(date, weekends = []) {\r\n    if (\r\n        weekends.indexOf(date.getDate()) !== -1 ||\r\n        date.getDay() === 0 ||\r\n        date.getDay() === 6\r\n    ) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default function getSchedule(year, month, employees, weekends = []) {\r\n    let failureCount = 0;\r\n    let scheduled = false;\r\n    const numOfDaysInMonth = new Date(year, month, 0).getDate();\r\n    while (!scheduled) {\r\n        scheduled = true;\r\n        const employeesClone = _.cloneDeep(employees);\r\n        const listEmployeeId = [\r\n            \"NamNH20\",\r\n            \"DatNT11\",\r\n            \"VanQTH\",\r\n            \"TungPT15\",\r\n            \"ToanNV32\",\r\n            \"ThoVH3\",\r\n            \"GiangHT7\",\r\n            \"LucNV6\",\r\n            \"LongTT2\",\r\n            \"AnhNTV9\",\r\n            \"TuanNA106\",\r\n            \"SangDV4\",\r\n            \"ThuyNN9\",\r\n            \"HuanHV3\",\r\n            \"TuTT17\",\r\n            \"DungNT173\"\r\n        ];\r\n        if (numOfDaysInMonth === 31) {\r\n            let randomEmp1 = chooseRandom(listEmployeeId.length, 7);\r\n            let randomEmp2 = chooseRandom(listEmployeeId.length, 7);\r\n            let emp1 = listEmployeeId[randomEmp1];\r\n            let emp2 = listEmployeeId[randomEmp2];\r\n            if (emp1 !== emp2) {\r\n                employeesClone[emp1][\"maxShift\"] += 1;\r\n                employeesClone[emp2][\"maxShift\"] += 1;\r\n            }\r\n        }\r\n        let days = [];\r\n        for (let i = 0; i < numOfDaysInMonth; i++) {\r\n            days[i] = {};\r\n            days[i][\"day\"] = i + 1;\r\n            days[i][\"numOfUnavailable\"] = 0;\r\n            let today = new Date(year, month, i + 1);\r\n            days[i][\"isWeekend\"] = today.getDay() === 6 || today.getDay() === 0;\r\n        }\r\n        schedule = [];\r\n        for (let emp of listEmployeeId) {\r\n            for (let option of employeesClone[emp][\"options\"]) {\r\n                days[option - 1][\"numOfUnavailable\"] += 1;\r\n            }\r\n        }\r\n        days = _.reverse(_.sortBy(days, [\"numOfUnavailable\", \"isWeekend\"]));\r\n        for (let day of days) {\r\n            let date = new Date(year, month - 1, day[\"day\"]);\r\n            let emp1 = \"\";\r\n            let chooseEmp1 = false;\r\n            let emp2 = \"\";\r\n            let chooseEmp2 = false;\r\n            let listEmployeeIdClone = _.cloneDeep(listEmployeeId);\r\n            while (\r\n                !chooseEmp1 &&\r\n                !chooseEmp2 &&\r\n                listEmployeeIdClone.length > 0\r\n            ) {\r\n                chooseEmp1 = true;\r\n                let randomNumber1 = chooseRandom(listEmployeeIdClone.length);\r\n                emp1 = listEmployeeIdClone[randomNumber1];\r\n                let listOption = employeesClone[emp1][\"options\"];\r\n                if (!chooseEmployee(emp1, listOption, date)) {\r\n                    chooseEmp1 = false;\r\n                }\r\n                if (\r\n                    employeesClone[emp1][\"weekendShift\"] > 1 &&\r\n                    listEmployeeIdClone.length > 1\r\n                ) {\r\n                    chooseEmp1 = false;\r\n                }\r\n                if (!chooseEmp1) {\r\n                    removeEmployeeFromList(emp1, listEmployeeIdClone);\r\n                    continue;\r\n                }\r\n                chooseEmp1 = true;\r\n                if (emp1 === \"NamNH20\" || emp1 === \"DatNT11\") {\r\n                    chooseEmp2 = true;\r\n                    emp2 = emp1 === \"NamNH20\" ? \"DatNT11\" : \"NamNH20\";\r\n                    let listOption = employeesClone[emp2][\"options\"];\r\n                    if (!chooseEmployee(emp2, listOption, date)) {\r\n                        removeEmployeeFromList(emp1, listEmployeeIdClone);\r\n                        removeEmployeeFromList(emp2, listEmployeeIdClone);\r\n                        chooseEmp1 = false;\r\n                        chooseEmp2 = false;\r\n                        continue;\r\n                    }\r\n                }\r\n                let randomNumber2 = 0;\r\n                while (!chooseEmp2 && listEmployeeIdClone.length > 0) {\r\n                    chooseEmp2 = true;\r\n                    randomNumber2 = chooseRandom(listEmployeeIdClone.length);\r\n                    emp2 = listEmployeeIdClone[randomNumber2];\r\n                    if (emp2 === \"NamNH20\" || emp2 === \"DatNT11\") {\r\n                        chooseEmp2 = false;\r\n                    }\r\n                    if (emp1 === emp2) {\r\n                        chooseEmp2 = false;\r\n                    }\r\n                    let listOption = employeesClone[emp2][\"options\"];\r\n                    if (\r\n                        employeesClone[emp1][\"firstOnSecondRate\"] > 1 &&\r\n                        employeesClone[emp2][\"firstOnSecondRate\"] > 1\r\n                    ) {\r\n                        chooseEmp2 = false;\r\n                    }\r\n                    if (\r\n                        checkGroupOf2Emp(\r\n                            employeesClone[emp1],\r\n                            employeesClone[emp2]\r\n                        )\r\n                    ) {\r\n                        if (!chooseEmployee(emp2, listOption, date)) {\r\n                            chooseEmp2 = false;\r\n                        }\r\n                    } else {\r\n                        chooseEmp2 = false;\r\n                    }\r\n                    if (\r\n                        employeesClone[emp2][\"weekendShift\"] > 1 &&\r\n                        listEmployeeIdClone.length > 1\r\n                    ) {\r\n                        chooseEmp2 = false;\r\n                    }\r\n                    if (!chooseEmp2) {\r\n                        removeEmployeeFromList(emp2, listEmployeeIdClone);\r\n                        continue;\r\n                    }\r\n                    chooseEmp2 = true;\r\n                }\r\n                if (chooseEmp1 && chooseEmp2) {\r\n                    let currentDay = day[\"day\"];\r\n                    schedule[currentDay - 1] = {};\r\n                    schedule[currentDay - 1][\"day\"] = currentDay;\r\n\r\n                    if (\r\n                        employeesClone[emp1][\"group\"] === 2 ||\r\n                        employeesClone[emp2][\"group\"] === 2\r\n                    ) {\r\n                        if (employeesClone[emp1][\"group\"] === 2) {\r\n                            employeesClone[emp2][\"dayWithG2\"] += 1;\r\n                        } else {\r\n                            employeesClone[emp1][\"dayWithG2\"] += 1;\r\n                        }\r\n                    }\r\n\r\n                    let rate =\r\n                        employeesClone[emp1][\"firstOnSecondRate\"] -\r\n                        employeesClone[emp2][\"firstOnSecondRate\"];\r\n                    let shift1 = \"\";\r\n                    let shift2 = \"\";\r\n                    if (rate > 0) {\r\n                        shift1 = emp2;\r\n                        shift2 = emp1;\r\n                    } else {\r\n                        shift1 = emp1;\r\n                        shift2 = emp2;\r\n                    }\r\n                    schedule[currentDay - 1][\"firstShift\"] = shift1;\r\n                    employeesClone[shift1][\"dayShift\"] += 1;\r\n                    employeesClone[shift1][\"dayShiftAsFirst\"] += 1;\r\n                    employeesClone[shift1][\"firstOnSecondRate\"] =\r\n                        employeesClone[shift1][\"dayShiftAsFirst\"] /\r\n                        employeesClone[shift1][\"dayShiftAsSecond\"];\r\n                    schedule[currentDay - 1][\"secondShift\"] = shift2;\r\n                    employeesClone[shift2][\"dayShift\"] += 1;\r\n                    employeesClone[shift2][\"dayShiftAsSecond\"] += 1;\r\n                    employeesClone[shift2][\"firstOnSecondRate\"] =\r\n                        employeesClone[shift2][\"dayShiftAsFirst\"] /\r\n                        employeesClone[shift2][\"dayShiftAsSecond\"];\r\n                    if (isWeekend(date, weekends)) {\r\n                        employeesClone[shift1][\"weekendShift\"] += 1;\r\n                        employeesClone[shift2][\"weekendShift\"] += 1;\r\n                    }\r\n\r\n                    if (\r\n                        employeesClone[emp1][\"dayShift\"] ===\r\n                        employeesClone[emp1][\"maxShift\"]\r\n                    ) {\r\n                        employeesClone[emp1][\"done\"] = true;\r\n                        removeEmployeeFromList(emp1, listEmployeeId);\r\n                    }\r\n\r\n                    if (\r\n                        employeesClone[emp2][\"dayShift\"] ===\r\n                        employeesClone[emp2][\"maxShift\"]\r\n                    ) {\r\n                        employeesClone[emp2][\"done\"] = true;\r\n                        removeEmployeeFromList(emp2, listEmployeeId);\r\n                    }\r\n                } else {\r\n                    removeEmployeeFromList(emp1, listEmployeeIdClone);\r\n                }\r\n            }\r\n        }\r\n        for (let day of schedule) {\r\n            if (!Boolean(day)) {\r\n                scheduled = false;\r\n                break;\r\n            }\r\n        }\r\n        let count = 0;\r\n        Object.keys(employeesClone).forEach(emp => {\r\n            if (employeesClone[emp][\"weekendShift\"] == 0) {\r\n                count++;\r\n            }\r\n        });\r\n        if (count > 1) {\r\n            scheduled = false;\r\n        }\r\n        // if (scheduled || failureCount === 100) {\r\n        if (scheduled) {\r\n            let result = {};\r\n            result[\"schedule\"] = schedule;\r\n            result[\"employees\"] = employeesClone;\r\n            console.log(failureCount)\r\n            return result;\r\n        } else {\r\n            failureCount++;\r\n        }\r\n    }\r\n}\r\n","import { empColor, employeesData } from \"./schedule-data.js\";\r\nimport React from \"react\";\r\nimport { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport getSchedule from \"./schedule-algorithm\";\r\n\r\nimport {\r\n  Grid,\r\n  Input,\r\n  Segment,\r\n  Header,\r\n  Button,\r\n  Tab,\r\n  Table,\r\n  Icon,\r\n  TextArea,\r\n  Popup\r\n} from \"semantic-ui-react\";\r\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.scss\";\r\nimport _ from \"lodash\";\r\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\r\n\r\nmoment.locale(\"vi-VN\");\r\nconst localizer = momentLocalizer(moment);\r\n\r\nlet allViews = Object.keys(Views).map(k => Views[k]);\r\n\r\nconst ColoredDateCellWrapper = ({ children }) =>\r\n  React.cloneElement(React.Children.only(children), {\r\n    style: {\r\n      backgroundColor: \"lightblue\"\r\n    }\r\n  });\r\n\r\nclass Schedule extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      events: [],\r\n      year: new Date().getFullYear(),\r\n      month: new Date().getMonth() + 1,\r\n      employees: {},\r\n      currentEmp: \"\",\r\n      empModal: false\r\n    };\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  handleSelectEmp = emp => {\r\n    this.setState({\r\n      empModal: true,\r\n      currentEmp: emp\r\n    });\r\n  };\r\n\r\n  handleCloseModal = () => {\r\n    this.setState({\r\n      empModal: false\r\n    });\r\n  };\r\n\r\n  createSchedule = () => {\r\n    const { year, month } = this.state;\r\n    const result = getSchedule(this.state.year, this.state.month, employeesData);\r\n    const events = [];\r\n    for (let day of result[\"schedule\"]) {\r\n      const event1 = {};\r\n      const event2 = {};\r\n      if (Boolean(day)) {\r\n        event1[\"title\"] = day[\"firstShift\"];\r\n        event1[\"start\"] = new Date(year, month - 1, day[\"day\"], 7, 0, 0, 0);\r\n        event1[\"end\"] = new Date(year, month - 1, day[\"day\"], 9, 0, 0, 0);\r\n        events.push(event1);\r\n        event2[\"title\"] = day[\"secondShift\"];\r\n        event2[\"start\"] = new Date(year, month - 1, day[\"day\"], 11, 0, 0, 0);\r\n        event2[\"end\"] = new Date(year, month - 1, day[\"day\"], 13, 0, 0, 0);\r\n        events.push(event2);\r\n      }\r\n    }\r\n    this.setState({\r\n      events,\r\n      employees: result[\"employees\"]\r\n    });\r\n  };\r\n\r\n  moveEvent = ({ event, start, end, isAllDay: droppedOnAllDaySlot }) => {\r\n    const { events } = this.state;\r\n\r\n    const idx = events.indexOf(event);\r\n    let allDay = event.allDay;\r\n\r\n    if (!event.allDay && droppedOnAllDaySlot) {\r\n      allDay = true;\r\n    } else if (event.allDay && !droppedOnAllDaySlot) {\r\n      allDay = false;\r\n    }\r\n\r\n    const updatedEvent = { ...event, start, end, allDay };\r\n\r\n    const nextEvents = [...events];\r\n    nextEvents.splice(idx, 1, updatedEvent);\r\n\r\n    this.setState({\r\n      events: nextEvents\r\n    });\r\n  };\r\n\r\n  handleSelect = ({ start, end }) => {\r\n    const title = window.prompt(\"Employee ID\");\r\n    if (title)\r\n      this.setState({\r\n        events: [\r\n          ...this.state.events,\r\n          {\r\n            start,\r\n            end,\r\n            title\r\n          }\r\n        ]\r\n      });\r\n  };\r\n\r\n  changeEmpMaxShift = (e, emp) => {\r\n    employeesData[emp][\"maxShift\"] = parseInt(e.target.value);\r\n    console.log(employeesData[emp][\"maxShift\"]);\r\n  };\r\n\r\n  changeEmpOptions = (e, emp) => {\r\n    let options = e.target.value;\r\n    if (options.length > 0) {\r\n      const { year, month } = this.state;\r\n      const optionValue = options.split(\" \");\r\n      const dayOptions = [];\r\n      let numOfDayInMonth = new Date(year, month, 0).getDate();\r\n      const daysInWeek = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\r\n      for (let option of optionValue) {\r\n        if (daysInWeek.indexOf(option) !== -1) {\r\n          let dayInWeek = daysInWeek.indexOf(option);\r\n          for (let i = 0; i < numOfDayInMonth; i++) {\r\n            let date = new Date(year, month - 1, i + 1);\r\n            if (date.getDay() == dayInWeek) {\r\n              dayOptions.push(date.getDate());\r\n            }\r\n          }\r\n        } else if (option.indexOf(\"-\") !== -1) {\r\n          let index = option.indexOf(\"-\");\r\n          let dayStart = parseInt(option.slice(0, index), 10);\r\n          let dayEnd = parseInt(option.slice(index + 1), 10);\r\n          for (let i = dayStart; i <= dayEnd; i++) {\r\n            dayOptions.push(i);\r\n          }\r\n        } else {\r\n          dayOptions.push(parseInt(option, 10));\r\n        }\r\n      }\r\n      employeesData[emp][\"options\"] = _.clone(\r\n        dayOptions\r\n          .filter((option, index) => dayOptions.indexOf(option) === index)\r\n          .sort((a, b) => {\r\n            return a - b;\r\n          })\r\n      );\r\n    } else {\r\n        employeesData[emp][\"options\"] = [];\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { employees } = this.state;\r\n    const rows = [];\r\n    Object.keys(employees).forEach((emp, index) => {\r\n      rows.push(\r\n        <Table.Row key={index}>\r\n          <Table.Cell\r\n            style={{\r\n              backgroundColor: empColor[emp][\"bgColor\"],\r\n              color: empColor[emp][\"color\"]\r\n            }}\r\n          >\r\n            {emp}\r\n          </Table.Cell>\r\n          <Table.Cell>{employees[emp].group}</Table.Cell>\r\n          <Table.Cell>\r\n            {employees[emp].dayShift} - Max: {employees[emp].maxShift}\r\n          </Table.Cell>\r\n          <Table.Cell>{employees[emp].dayShiftAsFirst - 1}</Table.Cell>\r\n          <Table.Cell>{employees[emp].dayShiftAsSecond - 1}</Table.Cell>\r\n          <Table.Cell>{employees[emp].dayWithG2}</Table.Cell>\r\n          <Table.Cell>\r\n            {employees[emp].weekendShift}{\" \"}\r\n            {(employees[emp].weekendShift == 0 || employees[emp].weekendShift == 3) && (\r\n              <Icon name=\"warning sign\" color=\"red\" />\r\n            )}\r\n          </Table.Cell>\r\n          <Table.Cell>{employees[emp].done ? \"True\" : \"False\"} </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    });\r\n\r\n    const panes = [\r\n      {\r\n        menuItem: \"Schedule\",\r\n        render: () => (\r\n          <Segment>\r\n            <DragAndDropCalendar\r\n              selectable\r\n              onEventDrop={this.moveEvent}\r\n              style={{ height: 700 }}\r\n              events={this.state.events}\r\n              views={allViews}\r\n              step={60}\r\n              max={new Date()}\r\n              defaultDate={new Date()}\r\n              components={{\r\n                timeSlotWrapper: ColoredDateCellWrapper\r\n              }}\r\n              onSelectSlot={this.handleSelect}\r\n              localizer={localizer}\r\n              eventPropGetter={event => {\r\n                return {\r\n                  style: {\r\n                    backgroundColor: empColor[event.title][\"bgColor\"],\r\n                    color: empColor[event.title][\"color\"]\r\n                  }\r\n                };\r\n              }}\r\n            />\r\n          </Segment>\r\n        )\r\n      },\r\n      {\r\n        menuItem: \"Stat\",\r\n        render: () => (\r\n          <Segment>\r\n            <Table>\r\n              <Table.Header>\r\n                <Table.Row>\r\n                  <Table.HeaderCell>ID</Table.HeaderCell>\r\n                  <Table.HeaderCell>Group</Table.HeaderCell>\r\n                  <Table.HeaderCell>Number of shift</Table.HeaderCell>\r\n                  <Table.HeaderCell>As first</Table.HeaderCell>\r\n                  <Table.HeaderCell>As second</Table.HeaderCell>\r\n                  <Table.HeaderCell>Shift with group 2</Table.HeaderCell>\r\n                  <Table.HeaderCell>Shift on weekend</Table.HeaderCell>\r\n                  <Table.HeaderCell>Done</Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>\r\n                {rows.map(row => {\r\n                  return row;\r\n                })}\r\n              </Table.Body>\r\n            </Table>\r\n          </Segment>\r\n        )\r\n      },\r\n      {\r\n        menuItem: \"Employee Info\",\r\n        render: () => (\r\n          <Segment>\r\n            <Table>\r\n              <Table.Header>\r\n                <Table.Row>\r\n                  <Table.HeaderCell>Employee ID</Table.HeaderCell>\r\n                  <Table.HeaderCell>Employee Max shift</Table.HeaderCell>\r\n                  <Table.HeaderCell>Employee Day off</Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>\r\n                {Object.keys(employeesData).map(emp => {\r\n                  return (\r\n                    <Table.Row>\r\n                      <Table.Cell>\r\n                        <Button\r\n                          style={{\r\n                            backgroundColor: empColor[emp][\"bgColor\"],\r\n                            color: empColor[emp][\"color\"]\r\n                          }}\r\n                          onClick={() => this.handleSelectEmp(emp)}\r\n                        >\r\n                          {emp}\r\n                        </Button>\r\n                      </Table.Cell>\r\n                      <Table.Cell>\r\n                        <Input\r\n                          type=\"number\"\r\n                          defaultValue={employeesData[emp][\"maxShift\"]}\r\n                          onBlur={e => this.changeEmpMaxShift(e, emp)}\r\n                        />\r\n                      </Table.Cell>\r\n                      <Table.Cell>\r\n                        <Popup\r\n                          content={\r\n                            \"Example: '1 2 3 4 sun wed 10-15' with from 1 to 31 is the date, sun is Sunday and 1-15 means from day 1 to day 15\"\r\n                          }\r\n                          trigger={\r\n                            <TextArea\r\n                              onBlur={e => this.changeEmpOptions(e, emp)}\r\n                              defaultValue={employeesData[emp][\"options\"].join(\" \").toString()}\r\n                            />\r\n                          }\r\n                          on=\"focus\"\r\n                          inverted\r\n                        />\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                  );\r\n                })}\r\n              </Table.Body>\r\n            </Table>\r\n          </Segment>\r\n        )\r\n      }\r\n    ];\r\n    return (\r\n      <>\r\n        <Segment>\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Grid.Column width={6}>\r\n                <Header>NOC NET Scheudle</Header>\r\n              </Grid.Column>\r\n              <Grid.Column width={4}>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"year\"\r\n                  label=\"Year\"\r\n                  min={new Date().getFullYear()}\r\n                  onChange={this.handleChange}\r\n                  value={this.state.year}\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column width={4}>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"month\"\r\n                  label=\"Month\"\r\n                  min={1}\r\n                  max={12}\r\n                  onChange={this.handleChange}\r\n                  value={this.state.month}\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column width={2}>\r\n                <Button onClick={this.createSchedule} positive content=\"Create schedule\" />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n        <Segment>\r\n          <Tab panes={panes} />\r\n        </Segment>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Schedule;\r\n","const BIN_CARRY_OUT = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];\r\nconst _ = require(\"lodash\");\r\nfunction sum2Bin(bin1, bin2) {\r\n  // Ham thuc hien cong 2 chuoi 16 bit\r\n  let sum = [];\r\n  let isCarryOut = false;\r\n  for (let i = 15; i >= 0; i--) {\r\n    let bin = bin1[i] + bin2[i];\r\n    if (isCarryOut) {\r\n      bin++;\r\n      isCarryOut = false;\r\n    }\r\n    if (bin >= 2) {\r\n      bin -= 2;\r\n      isCarryOut = true;\r\n    }\r\n    sum[i] = bin;\r\n  }\r\n  if (isCarryOut) {\r\n    // Neu nhu co du 1 sau khi cong bit cuoi cung\r\n    // thi se thuc hien cong 1 bit du day vao ket qua\r\n    return sum2Bin(sum, BIN_CARRY_OUT);\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport default function udp16CheckSum(input, type) {\r\n  let binaryString = \"\";\r\n  // type gom 2 loai: chuoi ky tu - chuoi bit\r\n  if (type === \"word\") { // Neu la chuoi ky tu\r\n    for (let i = 0; i < input.length; i++) {\r\n      // Doi chuoi ky tu sang chuoi bit\r\n      binaryString += \"0\" + input[i].charCodeAt(0).toString(2);\r\n    }\r\n  } else {\r\n    binaryString = input;\r\n  }\r\n  let leftOver = binaryString.length % 16;\r\n  for (let i = 0; i < 16 - leftOver; i++) { // Bo sung them so bit 0 de do dai chuoi la boi so cua 16\r\n    binaryString += \"0\";\r\n  }\r\n\r\n  let udp16bNumbers = [];\r\n  for (let i = 0; i < binaryString.length; i += 16) { // Tach chuoi bit ra cac chuoi con co do dai la 16 bit\r\n    udp16bNumbers.push(\r\n      binaryString\r\n        .slice(i, i + 16)\r\n        .split(\"\")\r\n        .map(bit => {\r\n          return parseInt(bit, 16);\r\n        })\r\n    );\r\n  }\r\n  let steps = [];\r\n  while (udp16bNumbers.length > 1) {\r\n    // Vong lap cong lan luot 2 so lai voi nhau cho toi khi ra ket qua cuoi cung\r\n    let step = {};\r\n    step[\"first\"] = _.clone(udp16bNumbers[0].join(\" \"));\r\n    step[\"second\"] = _.clone(udp16bNumbers[1].join(\" \"));\r\n    udp16bNumbers[0] = sum2Bin(udp16bNumbers[0], udp16bNumbers[1]);\r\n    step[\"result\"] = _.clone(udp16bNumbers[0].join(\" \"));\r\n    udp16bNumbers.splice(1, 1);\r\n    steps.push(step);\r\n  }\r\n  const checksum = udp16bNumbers[0] // Dao nguoc gia tri bit cua chuoi ket qua\r\n    .map(bin => {\r\n      if (bin) return \"0\";\r\n      return \"1\";\r\n    })\r\n    .join(\"\");\r\n  const result = {};\r\n  result[\"checksum\"] = checksum; // Ket qua cuoi cung\r\n  result[\"steps\"] = steps; // So buoc thuc hien\r\n  return result;\r\n}\r\n","const _ = require(\"lodash\")\r\n\r\nfunction isExponentOf2(num) { // Ham kiem tra xem 1 so co phai la luy thua cua 2 hay khong\r\n    return Math.log2(num) === Math.round(Math.log2(num));\r\n}\r\n\r\nfunction calculateHammingCode(hammingCode) { // Ham tinh toan hamming code\r\n    const pList = []; // Danh sach cac parity bit (cac bit la luy thua cua 2)\r\n    for (let i = 0; i < hammingCode.length; i++) {\r\n        if (isExponentOf2(i + 1)) { // Neu bit la 1 parity bit\r\n            let binaries = [];\r\n            let indexes = [];\r\n            for (let j = i; j < hammingCode.length; j += (i + 1) * 2) { // Lay ra cac bit con lai de tinh toan theo quy luat\r\n                binaries = binaries.concat(\r\n                    hammingCode.slice(j, j < hammingCode.length && i + 1 + j)\r\n                );\r\n                let max = j < hammingCode.length ? i + j + 1 : hammingCode.length;\r\n                for (let k = j; k < max; k++) {\r\n                    indexes.push(k);\r\n                }\r\n            }\r\n            let p = {};\r\n            p[\"binaries\"] = binaries.slice(1);\r\n            p[\"index\"] = i;\r\n            p[\"indexes\"] = indexes;\r\n            pList.push(p);\r\n        }\r\n    }\r\n    for (let p of pList) { // Thuc hien tinh toan parity bit theo quy luat \"So chan\"\r\n        let countBit1 = 0;\r\n        for (let bit of p[\"binaries\"]) {\r\n            countBit1 += parseInt(bit, 10);\r\n        }\r\n        hammingCode[p[\"index\"]] = countBit1 % 2;\r\n    }\r\n    // Cau truc du lieu hien thi ket qua len giao dien web\r\n    const result = {};\r\n    result[\"hammingCode\"] = hammingCode.join(\"\");\r\n    let pListClone = _.cloneDeep(pList);\r\n    pListClone.forEach(p => {\r\n        let binaries = [];\r\n        for (let i = 0; i < hammingCode.length; i++) {\r\n            if (p[\"indexes\"].indexOf(i) === -1) {\r\n                binaries.push(\"\");\r\n            } else {\r\n                binaries.push(hammingCode[i]);\r\n            }\r\n        }\r\n        p[\"binaries\"] = binaries;\r\n    });\r\n    result[\"pList\"] = pListClone;\r\n    return result; // Tra ve ket qua cuoi cung\r\n}\r\n\r\nexport function hammingCode(input, type) { // Ham tinh hamming code\r\n    let bin = \"\";\r\n    // Type co 2 loai: chuoi bit - chuoi ky tu\r\n    if (type === \"bin\") {\r\n        bin = input;\r\n    } else {\r\n        for (let char of input) {\r\n            bin += \"0\" + char.charCodeAt(0).toString(2); // Doi chuoi ky tu sang chuoi bit\r\n        }\r\n    }\r\n    let bitArr = bin.split(\"\");\r\n    let hammingCode = [];\r\n    let index = 0;\r\n    while (bitArr.length > 0) { // Tinh ra chuoi bit ket qua voi cac bit luy thua cua 2\r\n        if (!isExponentOf2(index + 1)) {\r\n            hammingCode[index] = parseInt(bitArr.shift(), 10);\r\n        } else { // Danh dau cac bit luy thua cua 2\r\n            hammingCode[index] = false;\r\n        }\r\n        index++;\r\n    }\r\n    return calculateHammingCode(hammingCode);\r\n}\r\n\r\nexport function fixHammingCode(hammingCode) { // Ham sua loi hamming code\r\n    hammingCode = hammingCode.split(\"\");\r\n    let hammingCodeAsObjects = hammingCode.map((bit, i) => {\r\n        let obj = {};\r\n        obj[\"bit\"] = bit;\r\n        obj[\"index\"] = i;\r\n        obj[\"isTrue\"] = false;\r\n        obj[\"falseCount\"] = 0;\r\n        return obj;\r\n    });\r\n    const pList = [];\r\n    for (let i = 0; i < hammingCodeAsObjects.length; i++) { // Tim kiem cac parity bit\r\n        if (isExponentOf2(i + 1)) {\r\n            let binaries = [];\r\n            for (let j = i; j < hammingCodeAsObjects.length; j += (i + 1) * 2) { // Loc ra cac bit con lai dung de tinh toan\r\n                binaries = binaries.concat(                                     // ung voi moi 1 parity bit\r\n                    hammingCodeAsObjects.slice(\r\n                        j,\r\n                        j < hammingCodeAsObjects.length && i + 1 + j\r\n                    )\r\n                );\r\n            }\r\n            let p = {};\r\n            p[\"binaries\"] = binaries.slice(1);\r\n            p[\"parityBit\"] = binaries[0];\r\n            pList.push(p);\r\n        }\r\n    }\r\n    let sumFalseParity = 0;\r\n    for (let p of pList) { // Kiem tra su chinh xac cua cac parity bit\r\n        let countBit1 = 0;\r\n        for (let bitObj of p[\"binaries\"]) {\r\n            countBit1 += parseInt(bitObj[\"bit\"], 10);\r\n        }\r\n        // eslint-disable-next-line\r\n        if (p[\"parityBit\"][\"bit\"] == countBit1 % 2) { // Neu parity bit chinh xac\r\n            p[\"parityBit\"][\"isTrue\"] = true; // thi se danh dau cac bit dung\r\n            for (let bitObj of p[\"binaries\"]) { \r\n                bitObj[\"isTrue\"] = true;\r\n            }\r\n        } else { // Danh dau cac bit sai\r\n            sumFalseParity += p[\"parityBit\"][\"index\"] +1;\r\n        }\r\n    }\r\n\r\n    let result = {};\r\n\r\n    if (sumFalseParity === 0) { // Neu vi tri cua bit sai = -1, tuc la khong co bit nao sai trong chuoi dau vao\r\n        result[\"hammingCode\"] = \"Hamming code is good!\";\r\n        return result;\r\n    } else { // Bit bi sai se la bit xuat hien nhieu lan nhat trong cac parity bit khong chinh xac\r\n        // eslint-disable-next-line\r\n        hammingCode[sumFalseParity-1] =\r\n            hammingCode[sumFalseParity-1] == 1 ? \"0\" : \"1\";\r\n    }\r\n    let originalBinaries = hammingCode.filter((bit, i) => { // Tra ve chuoi ban dau\r\n        return !isExponentOf2(i + 1);\r\n    });\r\n    // Cau truc du lieu luu tru ket qua hien thi len giao dien web\r\n    originalBinaries = originalBinaries.join(\"\");\r\n    hammingCode = hammingCode.join(\"\");\r\n    result[\"hammingCode\"] = hammingCode;\r\n    result[\"char\"] = String.fromCharCode(\r\n        parseInt(originalBinaries, 2).toString(10)\r\n    );\r\n\r\n    let pListClone = _.cloneDeep(pList);\r\n    pListClone.forEach(p => {\r\n        let binaries = [];\r\n        let indexes = p[\"binaries\"].map(bin => {\r\n            return bin[\"index\"];\r\n        });\r\n        indexes.unshift(p[\"parityBit\"][\"index\"]);\r\n        for (let i =0 ;i < hammingCode.length; i++) {\r\n            if (indexes.indexOf(i) === -1) {\r\n                binaries.push(\"\");\r\n            } else {\r\n                binaries.push(hammingCode[i]);\r\n            }\r\n        }\r\n        p[\"binaries\"] = binaries;\r\n    })\r\n    result[\"pList\"] = pListClone;\r\n    return result; // Ket qua cuoi cung\r\n}\r\n","const _ = require(\"lodash\");\r\n\r\nexport default function crcCalculate(input, type, G) {\r\n  let D = \"\";\r\n  // Type co 2 loai: chuoi ky tu - chuoi bit\r\n  if (type === \"bin\") {\r\n    D = input;\r\n  } else {\r\n    for (let char of input) {\r\n      D += \"0\" + char.charCodeAt(0).toString(2); // Doi chuoi ky tu ra chuoi bit\r\n    }\r\n  }\r\n  let r = G.length - 1;\r\n  for (let i = 0; i < r; i++) {\r\n    // Cong them r = G-1 bit 0 vao cuoi chuoi D\r\n    D += \"0\";\r\n  }\r\n  D = D.split(\"\");\r\n  // eslint-disable-next-line\r\n  if (D[0] == 0) {\r\n    // Neu bit dau tien cua D la 0 thi loai bo\r\n    D.shift();\r\n  }\r\n  G = G.split(\"\");\r\n  let result = {};\r\n  result[\"calcResult\"] = [];\r\n  result[\"D\"] = _.clone(D);\r\n  let count0 = 0;\r\n  while (D.length >= G.length) {\r\n    let obj = {};\r\n    obj[\"D\"] = D.slice(0, G.length);\r\n\r\n    for (let i = 0; i < G.length; i++) {\r\n      // Thuc hien phep tinh XOR voi G tu dau chuoi D toi cuoi\r\n      D[i] = D[i] ^ G[i];\r\n    }\r\n    obj[\"result\"] = D.slice(0, G.length);\r\n    // eslint-disable-next-line\r\n    obj[\"count\"] = count0;\r\n    while (D[0] == 0 && D.length >= G.length) {\r\n      // Xoa cac bit 0 dau tien sau khi thuc hien moi buoc tinh toan\r\n      D.shift();\r\n      count0++;\r\n    }\r\n    result[\"calcResult\"].push(obj);\r\n  }\r\n  let R = D.join(\"\");\r\n  result[\"R\"] = R;\r\n  result[\"G\"] = G;\r\n  return result; // Ket qua cuoi cung\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport {\r\n  Segment,\r\n  Header,\r\n  Grid,\r\n  Image,\r\n  Modal,\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Divider,\r\n  Dropdown,\r\n  Select,\r\n  Statistic,\r\n  Table,\r\n  Icon\r\n} from \"semantic-ui-react\";\r\nimport udpChecksum from \"./udp-checksum-algorithm\";\r\nimport { hammingCode, fixHammingCode } from \"./hamming-algorithm\";\r\nimport crcCalculate from \"./crc-algorithm\";\r\nconst crcExample = require(\"./crc-example.png\");\r\n\r\nconst options = [\r\n  {\r\n    key: \"binary\",\r\n    text: \"Binary\",\r\n    value: \"bin\"\r\n  },\r\n  {\r\n    key: \"word\",\r\n    text: \"Word\",\r\n    value: \"word\"\r\n  }\r\n];\r\n\r\nclass ImageModal extends Component {\r\n  render() {\r\n    const { img, imgModal, handleCloseModal } = this.props;\r\n    return (\r\n      <Modal onClose={handleCloseModal} open={imgModal} size=\"large\">\r\n        <Modal.Content>\r\n          <Image src={img} bordered fluid />\r\n        </Modal.Content>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nclass BinaryAlgorithms extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      imgModal: false,\r\n      img: \"\",\r\n      udpChecksum: {\r\n        word: \"\",\r\n        result: \"\",\r\n        type: \"word\",\r\n        stepIdx: 0\r\n      },\r\n      hammingCode: {\r\n        input: \"\",\r\n        type: \"word\",\r\n        result: \"\",\r\n        hammingCode: \"\",\r\n        resultFix: \"\"\r\n      },\r\n      crc: {\r\n        word: \"\",\r\n        type: \"word\",\r\n        result: \"\",\r\n        g: \"\",\r\n        marginLeft: 0,\r\n        currentStep: 0\r\n      }\r\n    };\r\n  }\r\n\r\n  handleZoomImage = img => {\r\n    this.setState({\r\n      imgModal: true,\r\n      img\r\n    });\r\n  };\r\n\r\n  handleCloseModal = () => {\r\n    this.setState({\r\n      imgModal: false\r\n    });\r\n  };\r\n\r\n  handleChangeInput = e => {\r\n    const algorithm = e.target.parentElement.dataset.algorithm;\r\n    const name = e.target.parentElement.dataset.name;\r\n    this.setState({\r\n      [algorithm]: {\r\n        ...this.state[algorithm],\r\n        [name]: e.target.value\r\n      }\r\n    });\r\n  };\r\n\r\n  calculateUDPChecksum = () => {\r\n    const result = udpChecksum(this.state.udpChecksum.word, this.state.udpChecksum.type);\r\n    this.setState({\r\n      udpChecksum: {\r\n        ...this.state.udpChecksum,\r\n        result\r\n      }\r\n    });\r\n  };\r\n\r\n  handleChangeOption = (e, data) => {\r\n    const { algorithm, value } = data;\r\n    this.setState({\r\n      [algorithm]: {\r\n        ...this.state[algorithm],\r\n        type: value\r\n      }\r\n    });\r\n  };\r\n\r\n  calculateHammingCode = () => {\r\n    const hamming = this.state.hammingCode;\r\n    const result = hammingCode(hamming.input, hamming.type);\r\n    this.setState({\r\n      hammingCode: {\r\n        ...this.state.hammingCode,\r\n        result\r\n      }\r\n    });\r\n  };\r\n\r\n  fixHammingCode = () => {\r\n    const resultFix = fixHammingCode(this.state.hammingCode.hammingCode);\r\n    this.setState({\r\n      hammingCode: {\r\n        ...this.state.hammingCode,\r\n        resultFix\r\n      }\r\n    });\r\n  };\r\n\r\n  calculateCrc = () => {\r\n    const { crc } = this.state;\r\n    const result = crcCalculate(crc.word, crc.type, crc.g);\r\n    this.setState({\r\n      crc: {\r\n        ...crc,\r\n        result\r\n      }\r\n    });\r\n  };\r\n\r\n  selectUdpStep = (e, data) => {\r\n    this.setState({\r\n      udpChecksum: {\r\n        ...this.state.udpChecksum,\r\n        stepIdx: data.value\r\n      }\r\n    });\r\n  };\r\n\r\n  handleChangeRange = e => {\r\n    let currentStep = e.target.value;\r\n    let marginLeft = 16.25 * this.state.crc.result[\"calcResult\"][currentStep][\"count\"];\r\n    let currentResult = this.state.crc.result[\"calcResult\"][currentStep][\"result\"];\r\n    this.setState({\r\n      crc: {\r\n        ...this.state.crc,\r\n        marginLeft,\r\n        currentResult,\r\n        currentStep\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { img, imgModal, udpChecksum, hammingCode, crc } = this.state;\r\n    let udpSteps = [];\r\n    if (Boolean(udpChecksum.result[\"steps\"])) {\r\n      udpChecksum.result[\"steps\"].forEach((step, idx) => {\r\n        let obj = {};\r\n        obj[\"key\"] = idx;\r\n        obj[\"value\"] = idx;\r\n        obj[\"text\"] = \"Step \" + (idx + 1);\r\n        udpSteps.push(obj);\r\n      });\r\n    }\r\n    return (\r\n      <>\r\n        <Segment color=\"black\">\r\n          <Header>BinaryAlgorithms</Header>\r\n        </Segment>\r\n        <Segment>\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Grid.Column width={16}>\r\n                <Grid.Row>\r\n                  <Grid.Column width={16}>\r\n                    <Segment color=\"black\">\r\n                      <Header>UDP Checksum Algorithm</Header>\r\n                    </Segment>\r\n                    <Segment>\r\n                      <Grid>\r\n                        <Grid.Row>\r\n                          <Grid.Column width={16}>\r\n                            <Grid.Row>\r\n                              <Grid.Column width={8}>\r\n                                <Form>\r\n                                  <Form.Field>\r\n                                    <Input\r\n                                      label={\r\n                                        <Dropdown\r\n                                          defaultValue=\"word\"\r\n                                          algorithm=\"udpChecksum\"\r\n                                          onChange={this.handleChangeOption}\r\n                                          options={options}\r\n                                        />\r\n                                      }\r\n                                      labelPosition=\"left\"\r\n                                      data-name=\"word\"\r\n                                      data-algorithm=\"udpChecksum\"\r\n                                      value={udpChecksum.word}\r\n                                      fluid\r\n                                      size=\"large\"\r\n                                      onChange={this.handleChangeInput}\r\n                                    />\r\n                                  </Form.Field>\r\n                                  <Form.Field>\r\n                                    <Button\r\n                                      color=\"teal\"\r\n                                      content={\r\n                                        udpChecksum.word\r\n                                          ? \"Calculate UDP checksum 16-bit\"\r\n                                          : \"Input a word first\"\r\n                                      }\r\n                                      icon=\"calculator\"\r\n                                      fluid\r\n                                      onClick={this.calculateUDPChecksum}\r\n                                      disabled={\r\n                                        (udpChecksum.type === \"word\" && !udpChecksum.word) ||\r\n                                        (udpChecksum.type === \"bin\" &&\r\n                                          udpChecksum.word.length <= 16)\r\n                                      }\r\n                                    />\r\n                                  </Form.Field>\r\n                                  <Form.Field>\r\n                                    <Input\r\n                                      label=\"Result\"\r\n                                      data-name=\"result\"\r\n                                      data-algorithm=\"udpChecksum\"\r\n                                      value={udpChecksum.result[\"checksum\"]}\r\n                                      fluid\r\n                                      size=\"large\"\r\n                                    />\r\n                                  </Form.Field>\r\n                                </Form>\r\n                              </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Divider />\r\n                            {Boolean(udpChecksum.result[\"steps\"]) && (\r\n                              <Segment>\r\n                                <Select\r\n                                  defaultValue={0}\r\n                                  options={udpSteps}\r\n                                  onChange={this.selectUdpStep}\r\n                                />\r\n                              </Segment>\r\n                            )}\r\n                            {Boolean(udpChecksum.result[\"steps\"]) && (\r\n                              <Segment>\r\n                                <Statistic.Group horizontal size=\"small\">\r\n                                  {udpChecksum.result[\"steps\"].length > 0 && (\r\n                                    <>\r\n                                      <Statistic>\r\n                                        <Statistic.Value>\r\n                                          {\r\n                                            udpChecksum.result[\"steps\"][udpChecksum.stepIdx][\r\n                                              \"first\"\r\n                                            ]\r\n                                          }\r\n                                        </Statistic.Value>\r\n                                      </Statistic>\r\n                                      <Statistic>\r\n                                        <Statistic.Value>\r\n                                          {\r\n                                            udpChecksum.result[\"steps\"][udpChecksum.stepIdx][\r\n                                              \"second\"\r\n                                            ]\r\n                                          }\r\n                                        </Statistic.Value>\r\n                                      </Statistic>\r\n                                      <Statistic>\r\n                                        <Statistic.Value>\r\n                                          -----------------------------------\r\n                                        </Statistic.Value>\r\n                                      </Statistic>\r\n                                      <Statistic>\r\n                                        <Statistic.Value>\r\n                                          {\r\n                                            udpChecksum.result[\"steps\"][udpChecksum.stepIdx][\r\n                                              \"result\"\r\n                                            ]\r\n                                          }\r\n                                        </Statistic.Value>\r\n                                      </Statistic>\r\n                                    </>\r\n                                  )}\r\n                                </Statistic.Group>\r\n                              </Segment>\r\n                            )}\r\n                          </Grid.Column>\r\n                        </Grid.Row>\r\n                      </Grid>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column width={16}>\r\n                <Grid.Row>\r\n                  <Grid.Column width={16}>\r\n                    <Segment color=\"black\">\r\n                      <Header>Hamming Code Algorithm</Header>\r\n                    </Segment>\r\n                    <Segment>\r\n                      <Grid>\r\n                        <Grid.Row>\r\n                          <Grid.Column width={16}>\r\n                            <Form>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  data-name=\"input\"\r\n                                  data-algorithm=\"hammingCode\"\r\n                                  value={hammingCode.input}\r\n                                  size=\"large\"\r\n                                  fluid\r\n                                  onChange={this.handleChangeInput}\r\n                                  label={\r\n                                    <Dropdown\r\n                                      defaultValue=\"word\"\r\n                                      algorithm=\"hammingCode\"\r\n                                      onChange={this.handleChangeOption}\r\n                                      options={options}\r\n                                    />\r\n                                  }\r\n                                  labelPosition=\"left\"\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field>\r\n                                <Button\r\n                                  color=\"teal\"\r\n                                  content={\r\n                                    hammingCode.input\r\n                                      ? \"Calculate Hamming code of \" + hammingCode.input\r\n                                      : \"You need to provide input first\"\r\n                                  }\r\n                                  icon=\"calculator\"\r\n                                  fluid\r\n                                  onClick={this.calculateHammingCode}\r\n                                  disabled={!hammingCode.input}\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Result\"\r\n                                  data-name=\"result\"\r\n                                  data-algorithm=\"hammingCode\"\r\n                                  value={hammingCode.result[\"hammingCode\"]}\r\n                                  fluid\r\n                                  size=\"large\"\r\n                                />\r\n                              </Form.Field>\r\n                            </Form>\r\n                          </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                          <Grid.Column width={16}>\r\n                            {Boolean(hammingCode.result[\"pList\"]) && (\r\n                              <Segment style={{ overflow: \"auto\", maxHeight: 500 }}>\r\n                                <Table celled>\r\n                                  <Table.Header>\r\n                                    <Table.Row>\r\n                                      <Table.HeaderCell>Bit position</Table.HeaderCell>\r\n                                      {hammingCode.result[\"hammingCode\"]\r\n                                        .split(\"\")\r\n                                        .map((bit, index) => {\r\n                                          return (\r\n                                            <Table.HeaderCell key={index}>\r\n                                              {index + 1}\r\n                                            </Table.HeaderCell>\r\n                                          );\r\n                                        })}\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                      <Table.HeaderCell>Encoded data bits</Table.HeaderCell>\r\n                                      {hammingCode.result[\"hammingCode\"].split(\"\").map(bit => {\r\n                                        return <Table.HeaderCell>{bit}</Table.HeaderCell>;\r\n                                      })}\r\n                                    </Table.Row>\r\n                                  </Table.Header>\r\n                                  <Table.Body>\r\n                                    {Boolean(hammingCode.result[\"pList\"]) && (\r\n                                      <>\r\n                                        {hammingCode.result[\"pList\"].map((p, idx) => {\r\n                                          return (\r\n                                            <Table.Row key={idx}>\r\n                                              <Table.Cell>P{p[\"indexes\"][0] + 1}</Table.Cell>\r\n                                              {p[\"binaries\"].map((bit, bitIdx) => {\r\n                                                return <Table.Cell key={bitIdx}>{bit}</Table.Cell>;\r\n                                              })}\r\n                                            </Table.Row>\r\n                                          );\r\n                                        })}\r\n                                      </>\r\n                                    )}\r\n                                  </Table.Body>\r\n                                </Table>\r\n                              </Segment>\r\n                            )}\r\n                          </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Divider />\r\n                        <Grid.Row>\r\n                          <Grid.Column width={8}>\r\n                            <Form>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Hamming code\"\r\n                                  data-name=\"hammingCode\"\r\n                                  data-algorithm=\"hammingCode\"\r\n                                  value={hammingCode.hammingCode}\r\n                                  size=\"large\"\r\n                                  fluid\r\n                                  onChange={this.handleChangeInput}\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field>\r\n                                <Button\r\n                                  color=\"teal\"\r\n                                  content=\"Fix hamming Code\"\r\n                                  icon=\"calculator\"\r\n                                  fluid\r\n                                  onClick={this.fixHammingCode}\r\n                                  disabled={!hammingCode.hammingCode}\r\n                                />\r\n                              </Form.Field>\r\n                            </Form>\r\n                          </Grid.Column>\r\n                          <Grid.Column width={8}>\r\n                            <Form>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Result\"\r\n                                  data-name=\"hammingCode\"\r\n                                  data-algorithm=\"hammingCode\"\r\n                                  value={\r\n                                    typeof hammingCode.resultFix == \"object\"\r\n                                      ? hammingCode.resultFix[\"hammingCode\"]\r\n                                      : \"\"\r\n                                  }\r\n                                  fluid\r\n                                  size=\"large\"\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field>\r\n                                <Input\r\n                                  label=\"Original character\"\r\n                                  data-name=\"char\"\r\n                                  data-algorithm=\"hammingCode\"\r\n                                  value={\r\n                                    typeof hammingCode.resultFix == \"object\"\r\n                                      ? hammingCode.resultFix[\"char\"]\r\n                                      : \"\"\r\n                                  }\r\n                                  fluid\r\n                                  size=\"large\"\r\n                                />\r\n                              </Form.Field>\r\n                            </Form>\r\n                          </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                          <Grid.Column width={16}>\r\n                            {Boolean(hammingCode.resultFix) && (\r\n                              <Segment style={{ overflow: \"auto\", maxHeight: 500 }}>\r\n                                <Table celled>\r\n                                  <Table.Header>\r\n                                    <Table.Row>\r\n                                      <Table.HeaderCell>Bit position</Table.HeaderCell>\r\n                                      {hammingCode.resultFix[\"hammingCode\"]\r\n                                        .split(\"\")\r\n                                        .map((bit, index) => {\r\n                                          return (\r\n                                            <Table.HeaderCell key={index}>\r\n                                              {index + 1}\r\n                                            </Table.HeaderCell>\r\n                                          );\r\n                                        })}\r\n                                    </Table.Row>\r\n                                    <Table.Row>\r\n                                      <Table.HeaderCell>Encoded data bits</Table.HeaderCell>\r\n                                      {hammingCode.resultFix[\"hammingCode\"].split(\"\").map(bit => {\r\n                                        return <Table.HeaderCell>{bit}</Table.HeaderCell>;\r\n                                      })}\r\n                                    </Table.Row>\r\n                                  </Table.Header>\r\n                                  <Table.Body>\r\n                                    {Boolean(hammingCode.resultFix[\"pList\"]) && (\r\n                                      <>\r\n                                        {hammingCode.resultFix[\"pList\"].map((p, idx) => {\r\n                                          return (\r\n                                            <Table.Row key={idx}>\r\n                                              <Table.Cell>\r\n                                                P{p[\"parityBit\"][\"index\"] + 1}\r\n                                              </Table.Cell>\r\n                                              {p[\"binaries\"].map((bit, bitIdx) => {\r\n                                                return <Table.Cell key={bitIdx}>{bit}</Table.Cell>;\r\n                                              })}\r\n                                              <Table.Cell>\r\n                                                {p[\"parityBit\"][\"isTrue\"] ? \"True\" : \"False\"}\r\n                                                <Icon\r\n                                                  name={\r\n                                                    p[\"parityBit\"][\"isTrue\"] ? \"checkmark\" : \"close\"\r\n                                                  }\r\n                                                  color={p[\"parityBit\"][\"isTrue\"] ? \"green\" : \"red\"}\r\n                                                />\r\n                                              </Table.Cell>\r\n                                            </Table.Row>\r\n                                          );\r\n                                        })}\r\n                                      </>\r\n                                    )}\r\n                                  </Table.Body>\r\n                                </Table>\r\n                              </Segment>\r\n                            )}\r\n                          </Grid.Column>\r\n                        </Grid.Row>\r\n                      </Grid>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column width={16}>\r\n                <Segment color=\"black\">\r\n                  <Header>CRC Algorithm</Header>\r\n                </Segment>\r\n                <Segment>\r\n                  <Grid>\r\n                    <Grid.Row>\r\n                      <Grid.Column width={16}>\r\n                        <Form>\r\n                          <Form.Field>\r\n                            <Input\r\n                              label={\r\n                                <Dropdown\r\n                                  defaultValue=\"word\"\r\n                                  algorithm=\"crc\"\r\n                                  onChange={this.handleChangeOption}\r\n                                  options={options}\r\n                                />\r\n                              }\r\n                              data-name=\"word\"\r\n                              data-algorithm=\"crc\"\r\n                              value={crc.word}\r\n                              size=\"large\"\r\n                              fluid\r\n                              onChange={this.handleChangeInput}\r\n                            />\r\n                          </Form.Field>\r\n                          <Form.Field>\r\n                            <Input\r\n                              label=\"G\"\r\n                              data-name=\"g\"\r\n                              data-algorithm=\"crc\"\r\n                              value={crc.g}\r\n                              size=\"large\"\r\n                              fluid\r\n                              onChange={this.handleChangeInput}\r\n                            />\r\n                          </Form.Field>\r\n                          <Form.Field>\r\n                            <Button\r\n                              color=\"teal\"\r\n                              content={crc.word ? \"Calculate R\" : \"Input a word first\"}\r\n                              icon=\"calculator\"\r\n                              fluid\r\n                              onClick={this.calculateCrc}\r\n                              disabled={!crc.word}\r\n                            />\r\n                          </Form.Field>\r\n                          <Form.Field>\r\n                            <Input\r\n                              label=\"Result\"\r\n                              data-name=\"result\"\r\n                              data-algorithm=\"crc\"\r\n                              value={crc.result[\"R\"]}\r\n                              fluid\r\n                              size=\"large\"\r\n                            />\r\n                          </Form.Field>\r\n                        </Form>\r\n                      </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                      <Grid.Column width={16}>\r\n                        {Boolean(crc.result !== \"\") && (\r\n                          <>\r\n                            <Form.Input\r\n                              value={crc.currentStep}\r\n                              type=\"range\"\r\n                              min={0}\r\n                              max={crc.result[\"calcResult\"].length - 1}\r\n                              onChange={this.handleChangeRange}\r\n                            />\r\n                            <Segment style={{ overflow: \"auto\" }}>\r\n                              <Statistic.Group horizontal size=\"small\">\r\n                                <Statistic>\r\n                                  <Statistic.Value>{crc.result[\"D\"]}</Statistic.Value>\r\n                                </Statistic>\r\n                                <Statistic style={{ marginLeft: crc.marginLeft }}>\r\n                                  <Statistic.Value>\r\n                                    {crc.result[\"calcResult\"][crc.currentStep][\"D\"]}\r\n                                  </Statistic.Value>\r\n                                </Statistic>\r\n                                <Statistic style={{ marginLeft: crc.marginLeft }}>\r\n                                  <Statistic.Value>{crc.result[\"G\"]}</Statistic.Value>\r\n                                </Statistic>\r\n                                <Statistic style={{ marginLeft: crc.marginLeft }}>\r\n                                  <Statistic.Value>\r\n                                    {crc.result[\"calcResult\"][crc.currentStep][\"result\"]}\r\n                                  </Statistic.Value>\r\n                                </Statistic>\r\n                              </Statistic.Group>\r\n                            </Segment>\r\n                          </>\r\n                        )}\r\n                      </Grid.Column>\r\n                    </Grid.Row>\r\n                  </Grid>\r\n                </Segment>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n        <ImageModal img={img} imgModal={imgModal} handleCloseModal={this.handleCloseModal} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BinaryAlgorithms;\r\n","const subnets = [ // Danh sach 32 subnet mask\r\n    {\r\n        ip: \"128.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"1\"\r\n    },\r\n    {\r\n        ip: \"192.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"2\"\r\n    },\r\n    {\r\n        ip: \"224.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"3\"\r\n    },\r\n    {\r\n        ip: \"240.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"4\"\r\n    },\r\n    {\r\n        ip: \"248.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"5\"\r\n    },\r\n    {\r\n        ip: \"252.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"6\"\r\n    },\r\n    {\r\n        ip: \"254.0.0.0\",\r\n        type: \"Other\",\r\n        cidr: \"7\"\r\n    },\r\n    {\r\n        ip: \"255.0.0.0\",\r\n        type: \"A\",\r\n        cidr: \"8\"\r\n    },\r\n    {\r\n        ip: \"255.128.0.0\",\r\n        type: \"A\",\r\n        cidr: \"9\"\r\n    },\r\n    {\r\n        ip: \"255.192.0.0\",\r\n        type: \"A\",\r\n        cidr: \"10\"\r\n    },\r\n    {\r\n        ip: \"255.224.0.0\",\r\n        type: \"A\",\r\n        cidr: \"11\"\r\n    },\r\n    {\r\n        ip: \"255.240.0.0\",\r\n        type: \"A\",\r\n        cidr: \"12\"\r\n    },\r\n    {\r\n        ip: \"255.248.0.0\",\r\n        type: \"A\",\r\n        cidr: \"13\"\r\n    },\r\n    {\r\n        ip: \"255.252.0.0\",\r\n        type: \"A\",\r\n        cidr: \"14\"\r\n    },\r\n    {\r\n        ip: \"255.254.0.0\",\r\n        type: \"A\",\r\n        cidr: \"15\"\r\n    },\r\n    {\r\n        ip: \"255.255.0.0\",\r\n        type: \"B\",\r\n        cidr: \"16\"\r\n    },\r\n    {\r\n        ip: \"255.255.128.0\",\r\n        type: \"B\",\r\n        cidr: \"17\"\r\n    },\r\n    {\r\n        ip: \"255.255.192.0\",\r\n        type: \"B\",\r\n        cidr: \"18\"\r\n    },\r\n    {\r\n        ip: \"255.255.224.0\",\r\n        type: \"B\",\r\n        cidr: \"19\"\r\n    },\r\n    {\r\n        ip: \"255.255.240.0\",\r\n        type: \"B\",\r\n        cidr: \"20\"\r\n    },\r\n    {\r\n        ip: \"255.255.248.0\",\r\n        type: \"B\",\r\n        cidr: \"21\"\r\n    },\r\n    {\r\n        ip: \"255.255.252.0\",\r\n        type: \"B\",\r\n        cidr: \"22\"\r\n    },\r\n    {\r\n        ip: \"255.255.254.0\",\r\n        type: \"B\",\r\n        cidr: \"23\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.0\",\r\n        type: \"C\",\r\n        cidr: \"24\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.128\",\r\n        type: \"C\",\r\n        cidr: \"25\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.192\",\r\n        type: \"C\",\r\n        cidr: \"26\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.224\",\r\n        type: \"C\",\r\n        cidr: \"27\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.240\",\r\n        type: \"C\",\r\n        cidr: \"28\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.248\",\r\n        type: \"C\",\r\n        cidr: \"29\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.252\",\r\n        type: \"C\",\r\n        cidr: \"30\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.254\",\r\n        type: \"C\",\r\n        cidr: \"31\"\r\n    },\r\n    {\r\n        ip: \"255.255.255.255\",\r\n        type: \"C\",\r\n        cidr: \"32\"\r\n    }\r\n];\r\n\r\nexport default subnets;\r\n","const _ = require(\"lodash\");\r\n\r\nfunction decimalToBinary(num) { // Ham doi so thap phan sang chuoi bit\r\n    const binary = [];\r\n    while (num !== 0 || binary.length < 8) {\r\n        binary.push(num % 2);\r\n        num = Math.floor(num / 2);\r\n    }\r\n    return binary.reverse().join(\"\");\r\n}\r\n\r\nfunction binToDecimal(binary) { // Ham doi chuoi bit sang so thap phan\r\n    binary = binary.split(\"\").reverse();\r\n    let num = 0;\r\n    for (let i = 0; i < binary.length; i++) {\r\n        num += binary[i] * Math.pow(2, i);\r\n    }\r\n    return num;\r\n}\r\n\r\nfunction binToHexa(binary) { // Ham doi chuoi bit sang he thap luc phan\r\n    return parseInt(binary, 2).toString(16);\r\n}\r\n\r\nfunction decimalToHexa(num) { // Ham doi so thap phan sang he thap luc phan\r\n    let hexa = parseInt(num, 10).toString(16);\r\n    if (hexa.length === 1) {\r\n        hexa = \"0\" + hexa;\r\n    }\r\n    return hexa;\r\n}\r\n\r\nexport default function ipSubnet(ip, subnet = \"\") {\r\n    const result = {};\r\n    result[\"networks\"] = {};\r\n    result[\"networks\"][\"networks\"] = [];\r\n    const data = {};\r\n    // Mau kiem tra xem dau vao co phai IPv4 hay khong\r\n    let ipv4Reg = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\r\n    if (!ipv4Reg.test(ip)) {\r\n        data[\"notIP\"] = {};\r\n        data[\"notIP\"][\"name\"] = \"Wrong IP Address\";\r\n        data[\"notIP\"][\"value\"] = \"This isn't a valid IPv4 Address.\";\r\n        result[\"data\"] = data;\r\n        return result;\r\n    }\r\n    if (subnet === \"\") {\r\n        data[\"forgotSubnet\"] = {};\r\n        data[\"forgotSubnet\"][\"name\"] = \"Missing Subnet mask\";\r\n        data[\"forgotSubnet\"][\"value\"] =\r\n            \"You have to choose a subnet mask first.\";\r\n        result[\"data\"] = data;\r\n        return result;\r\n    }\r\n    // Cau truc du lieu luu IPv4 dau vao\r\n    data[\"ipAddr\"] = {};\r\n    data[\"ipAddr\"][\"name\"] = \"IP Address\";\r\n    data[\"ipAddr\"][\"value\"] = ip;\r\n    let ipBinary = _.clone( // Doi IPv4 dau vao sang chuoi bit\r\n        ip\r\n            .split(\".\")\r\n            .map(octet => {\r\n                return decimalToBinary(octet);\r\n            })\r\n            .join(\"\")\r\n    );\r\n    let subnetBinary = _.clone( // Doi subnet mák sang chuoi bit\r\n        subnet[\"ip\"]\r\n            .split(\".\")\r\n            .map(octet => {\r\n                return decimalToBinary(octet);\r\n            })\r\n            .join(\"\")\r\n    );\r\n    let networkAddrBinary = \"\";\r\n    for (let i = 0; i < ipBinary.length; i++) { // Tinh toan network address\r\n                                               // bang phep tinh AND giua 2 chuoi bit cua IPv4 va Subnet mask\r\n        networkAddrBinary += ipBinary[i] == 1 && subnetBinary[i] == 1 ? 1 : 0;\r\n    }\r\n    let networkAddr = [];\r\n    for (let i = 0; i < networkAddrBinary.length; i += 8) {\r\n        networkAddr = networkAddr.concat(networkAddrBinary.slice(i, i + 8));\r\n    }\r\n    networkAddr = networkAddr.map(binary => { // Doi chuoi bit cua network address sang he thap phan\r\n        return binToDecimal(binary);\r\n    });\r\n\r\n    // Cau truc du lieu luu Network address\r\n    data[\"networkAddr\"] = {};\r\n    data[\"networkAddr\"][\"value\"] = _.clone(networkAddr.join(\".\"));\r\n    data[\"networkAddr\"][\"name\"] = \"Network Address\";\r\n\r\n    let start = _.clone(networkAddr); // IP dau tien trong khoang host IP co the su dung = Network address + 1\r\n    start[start.length - 1] = start[start.length - 1] + 1;\r\n\r\n    // Cau truc du lieu luu khoang host IP co the su dung\r\n    data[\"range\"] = {};\r\n    data[\"range\"][\"value\"] = start.join(\".\") + \" - \";\r\n    data[\"range\"][\"name\"] = \"Usable Host IP Range\";\r\n    let jumpIndex = -1;\r\n    switch (subnet[\"type\"]) { // Lay ra octet de tinh buoc nhay\r\n        case \"Other\":\r\n            jumpIndex = 0;\r\n            break;\r\n        case \"A\":\r\n            jumpIndex = 1;\r\n            break;\r\n        case \"B\":\r\n            jumpIndex = 2;\r\n            break;\r\n        case \"C\":\r\n            jumpIndex = 3;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    let jump = 255 - subnet[\"ip\"].split(\".\")[jumpIndex];\r\n    // Tinh toan broadcast address\r\n    networkAddr[jumpIndex] = networkAddr[jumpIndex] + jump; \r\n    for (let i = jumpIndex + 1; i < networkAddr.length; i++) {\r\n        networkAddr[i] = 255;\r\n    }\r\n    let broadcast = _.clone(networkAddr);\r\n    // ----------------------------\r\n\r\n    // Cau truc du lieu luu Broadcast Address\r\n    data[\"broadcastAddr\"] = {};\r\n    data[\"broadcastAddr\"][\"name\"] = \"Broadcast Address\";\r\n    data[\"broadcastAddr\"][\"value\"] = broadcast.join(\".\");\r\n    let end = _.clone(networkAddr); // IP ket thuc trong khoang host IP co the su dung = broadcast address - 1\r\n    end[end.length - 1] = end[end.length - 1] - 1;\r\n    data[\"range\"][\"value\"] += end.join(\".\");\r\n    let totalNumOfHosts = Math.pow(2, 32 - parseInt(subnet[\"cidr\"], 10)); // Tinh tong so host\r\n\r\n    // Cau truc du lieu luu tong so luong host\r\n    data[\"totalNumOfHosts\"] = {};\r\n    data[\"totalNumOfHosts\"][\"value\"] = totalNumOfHosts.toLocaleString();\r\n    data[\"totalNumOfHosts\"][\"name\"] = \"Total Number of Hosts\";\r\n\r\n    // Cau truc du lieu luu so luong host co the dung\r\n    data[\"numOfUsableHosts\"] = {};\r\n    data[\"numOfUsableHosts\"][\"value\"] = (totalNumOfHosts - 2).toLocaleString(); // So luong host co the dung = tong so luong host - 2\r\n                                                                                // (Loai bo Network address va Broadcast)\r\n    data[\"numOfUsableHosts\"][\"name\"] = \"Number of Usable Hosts\";\r\n\r\n    // Cau truc du lieu luu subnet mask\r\n    data[\"subnet\"] = {};\r\n    data[\"subnet\"][\"name\"] = \"Subnet Mask\";\r\n    data[\"subnet\"][\"value\"] = subnet[\"ip\"];\r\n    let wildcardAddr = _.clone( // Wildcard Address = 255.255.255.255 - Subnet mask\r\n        subnet[\"ip\"]\r\n            .split(\".\")\r\n            .map(octet => {\r\n                return 255 - parseInt(octet, 10);\r\n            })\r\n            .join(\".\")\r\n    );\r\n\r\n    // Cau truc du lieu luu Wildcard Address\r\n    data[\"wildcardAddr\"] = {};\r\n    data[\"wildcardAddr\"][\"name\"] = \"Wildcard Address\";\r\n    data[\"wildcardAddr\"][\"value\"] = wildcardAddr;\r\n\r\n    // Cau truc du lieu luu Subnet mask duoi dang chuoi bit\r\n    data[\"binSubnetMask\"] = {};\r\n    data[\"binSubnetMask\"][\"name\"] = \"Binary Subnet Mask\";\r\n    data[\"binSubnetMask\"][\"value\"] = subnet[\"ip\"] // Doi subnet mask sang chuoi bit\r\n        .split(\".\")\r\n        .map(octet => {\r\n            return decimalToBinary(octet);\r\n        })\r\n        .join(\".\");\r\n\r\n    // Cau truc du lieu luu class cua subnet mask\r\n    data[\"subnetClass\"] = {};\r\n    data[\"subnetClass\"][\"name\"] = \"Subnet Mask Class\";\r\n    data[\"subnetClass\"][\"value\"] = subnet[\"type\"];\r\n\r\n    // Cau truc du lieu luu phuong phap CIDR\r\n    data[\"cidr\"] = {};\r\n    data[\"cidr\"][\"name\"] = \"CIDR Notation\";\r\n    data[\"cidr\"][\"value\"] = \"/\" + subnet[\"cidr\"];\r\n\r\n    // Cau truc du lieu luu loai IP (Public / Private)\r\n    data[\"ipType\"] = {};\r\n    data[\"ipType\"][\"name\"] = \"IP Type\";\r\n    let ipOctets = ip.split(\".\");\r\n    data[\"ipType\"][\"value\"] = // Kiem tra IP dau vao la Public hay Private\r\n        ipOctets[0] == 10 ||\r\n        (ipOctets[0] == 172 && ipOctets[1] >= 16 && ipOctets[1] <= 31) ||\r\n        (ipOctets[0] == 192 && ipOctets[1] == 168)\r\n            ? \"Private\"\r\n            : \"Public\";\r\n\r\n    // Cau truc du lieu luu dang rut gon cua IP va Ssubnet mask      \r\n    data[\"short\"] = {};\r\n    data[\"short\"][\"name\"] = \"Short\";\r\n    data[\"short\"][\"value\"] = ip + \" \" + subnet[\"cidr\"];\r\n\r\n    // Cau truc du lieu luu IPv4 duoi dang chuoi bit\r\n    data[\"binaryId\"] = {};\r\n    data[\"binaryId\"][\"name\"] = \"Binary ID\";\r\n    data[\"binaryId\"][\"value\"] = ip\r\n        .split(\".\")\r\n        .map(octet => {\r\n            return decimalToBinary(octet);\r\n        })\r\n        .join(\"\");\r\n\r\n    // Cau truc du lieu luu IPv4 duoi dang chuoi thap phan\r\n    data[\"intId\"] = {};\r\n    data[\"intId\"][\"name\"] = \"Integer ID\";\r\n    data[\"intId\"][\"value\"] = binToDecimal(data[\"binaryId\"][\"value\"]);\r\n\r\n    // Cau truc du lieu luu IPv4 duoi dang chuoi thap nhi phan\r\n    data[\"hexaId\"] = {};\r\n    data[\"hexaId\"][\"name\"] = \"Hex ID\";\r\n    data[\"hexaId\"][\"value\"] = \"0x\" + binToHexa(data[\"binaryId\"][\"value\"]);\r\n\r\n    // Cau truc du lieu luu in-addr.arpa\r\n    data[\"arpa\"] = {};\r\n    data[\"arpa\"][\"name\"] = \"in-addr.arpa\";\r\n    data[\"arpa\"][\"value\"] = // Tinh in-addr.arpa bang cach dao nguoc vi tri cua cac octet trong IPv4, sau do them duoi .in-addr.arpa\r\n        ip\r\n            .split(\".\")\r\n            .reverse()\r\n            .join(\".\") + \".in-addr.arpa\";\r\n    // Cau truc du lieu luu IPv4 Mapped Address\r\n    data[\"ipv4MappedAddr\"] = {};\r\n    data[\"ipv4MappedAddr\"][\"name\"] = \"IPv4 Mapped Address\";\r\n    data[\"ipv4MappedAddr\"][\"value\"] =\r\n        \"::ffff:\" +\r\n        decimalToHexa(ipOctets[0]) +\r\n        decimalToHexa(ipOctets[1]) +\r\n        \".\" +\r\n        decimalToHexa(ipOctets[2]) +\r\n        decimalToHexa(ipOctets[3]);\r\n\r\n    // Cau truc du lieu luu 6 to 4 prefix\r\n    data[\"6to4Prefix\"] = {};\r\n    data[\"6to4Prefix\"][\"name\"] = \"6to4 Prefix\";\r\n    data[\"6to4Prefix\"][\"value\"] =\r\n        \"2002:\" +\r\n        decimalToHexa(ipOctets[0]) +\r\n        decimalToHexa(ipOctets[1]) +\r\n        \".\" +\r\n        decimalToHexa(ipOctets[2]) +\r\n        decimalToHexa(ipOctets[3]) +\r\n        \"::/48\";\r\n\r\n    result[\"data\"] = data;\r\n\r\n    let networks = []; // Danh sach cac network co the su dung ung voi dai IP\r\n    while (networks.length < 256 / (jump + 1) && jump !== 255) {\r\n        let network = {};\r\n        let posNetAddr = _.clone(ipOctets);\r\n        posNetAddr[jumpIndex] = (jump + 1) * networks.length;\r\n        for (let i = jumpIndex + 1; i < posNetAddr.length; i++) {\r\n            posNetAddr[i] = 0;\r\n        }\r\n        network[\"addr\"] = posNetAddr.join(\".\");\r\n        let start = _.clone(posNetAddr);\r\n        start[start.length - 1] = start[start.length - 1] + 1;\r\n        network[\"range\"] = start.join(\".\") + \" - \";\r\n        posNetAddr[jumpIndex] = posNetAddr[jumpIndex] + jump;\r\n        for (let i = jumpIndex + 1; i < posNetAddr.length; i++) {\r\n            posNetAddr[i] = 255;\r\n        }\r\n        network[\"broadcast\"] = posNetAddr.join(\".\");\r\n        let end = _.clone(posNetAddr);\r\n        end[end.length - 1] = end[end.length - 1] - 1;\r\n        network[\"range\"] += end.join(\".\");\r\n        networks.push(network);\r\n    }\r\n    for (let i = jumpIndex; i < ipOctets.length; i++) {\r\n        ipOctets[i] = \"*\";\r\n    }\r\n\r\n    // Cau truc du lieu luu tru ket qua de hien thi len giao dien web\r\n    result[\"networks\"][\"ip\"] = ipOctets.join(\".\");\r\n    result[\"networks\"][\"cidr\"] = \"/\" + subnet[\"cidr\"];\r\n    result[\"networks\"][\"networks\"] = networks;\r\n    return result; // Ket qua cuoi cung\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n    Header,\r\n    Grid,\r\n    Segment,\r\n    Input,\r\n    Form,\r\n    Dropdown,\r\n    Button,\r\n    Table,\r\n    Message\r\n} from \"semantic-ui-react\";\r\nimport subnets from \"./subnet-data\";\r\nimport ipSubnet from \"./ip-subnet-algorithm\";\r\nimport \"./IPSubnet.css\";\r\nconst subnetOptions = subnets.map((subnet, idx) => {\r\n    let obj = {};\r\n    obj[\"ip\"] = subnet[\"ip\"];\r\n    obj[\"cidr\"] = subnet[\"cidr\"];\r\n    obj[\"type\"] = subnet[\"type\"];\r\n    obj[\"text\"] = subnet[\"ip\"] + \" /\" + subnet[\"cidr\"];\r\n    obj[\"key\"] = idx;\r\n    obj[\"value\"] = subnet;\r\n    return obj;\r\n});\r\n\r\nclass IPSubnet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ip: \"\",\r\n            subnet: \"\",\r\n            result: \"\"\r\n        };\r\n    }\r\n\r\n    handleChangeIp = e => {\r\n        this.setState({\r\n            ip: e.target.value\r\n        });\r\n    };\r\n\r\n    handleChangeSubnet = (e, data) => {\r\n        this.setState({\r\n            subnet: data.value\r\n        });\r\n    };\r\n\r\n    handleCalculate = () => {\r\n        const { ip, subnet } = this.state;\r\n        const result = ipSubnet(ip, subnet);\r\n        this.setState({\r\n            result\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { ip, result } = this.state;\r\n        return (\r\n            <Fragment>\r\n                <Segment color=\"black\">\r\n                    <Header>IPv4 Subnet Calculator</Header>\r\n                </Segment>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={8}>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={16}>\r\n                                    <Segment color=\"black\">\r\n                                        <Form>\r\n                                            <Form.Field>\r\n                                                <label>IP Address</label>\r\n                                                <Input\r\n                                                    value={ip}\r\n                                                    onChange={\r\n                                                        this.handleChangeIp\r\n                                                    }\r\n                                                />\r\n                                            </Form.Field>\r\n                                            <Form.Field>\r\n                                                <label>Subnet</label>\r\n                                                <Dropdown\r\n                                                    placeholder=\"Choose one subnet\"\r\n                                                    selection\r\n                                                    fluid\r\n                                                    onChange={\r\n                                                        this.handleChangeSubnet\r\n                                                    }\r\n                                                    options={subnetOptions}\r\n                                                />\r\n                                            </Form.Field>\r\n                                            <Form.Field>\r\n                                                <Button\r\n                                                    color=\"teal\"\r\n                                                    content=\"Calculate\"\r\n                                                    icon=\"play\"\r\n                                                    fluid\r\n                                                    onClick={\r\n                                                        this.handleCalculate\r\n                                                    }\r\n                                                />\r\n                                            </Form.Field>\r\n                                        </Form>\r\n                                    </Segment>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={16}>\r\n                                    {result !== \"\" && (\r\n                                        <>\r\n                                            {result[\"networks\"][\"networks\"]\r\n                                                .length > 0 && (\r\n                                                <>\r\n                                                    <Segment style={{ overflow: \"auto\", maxHeight: 500 }}\r\n                                color=\"black\">\r\n                                                        <Header>\r\n                                                            All{\" \"}\r\n                                                            {\r\n                                                                result[\r\n                                                                    \"networks\"\r\n                                                                ][\"networks\"]\r\n                                                                    .length\r\n                                                            }{\" \"}\r\n                                                            of the Possible{\" \"}\r\n                                                            {\r\n                                                                result[\r\n                                                                    \"networks\"\r\n                                                                ][\"cidr\"]\r\n                                                            }{\" \"}\r\n                                                            Networks for{\" \"}\r\n                                                            {\r\n                                                                result[\r\n                                                                    \"networks\"\r\n                                                                ][\"ip\"]\r\n                                                            }\r\n                                                        </Header>\r\n                                                        <Table celled color=\"teal\">\r\n                                                            <Table.Header>\r\n                                                                <Table.Row>\r\n                                                                    <Table.HeaderCell>\r\n                                                                        Network\r\n                                                                        Address\r\n                                                                    </Table.HeaderCell>\r\n                                                                    <Table.HeaderCell>\r\n                                                                        Usable\r\n                                                                        Host\r\n                                                                        Range\r\n                                                                    </Table.HeaderCell>\r\n                                                                    <Table.HeaderCell>\r\n                                                                        Broadcast\r\n                                                                        Address\r\n                                                                    </Table.HeaderCell>\r\n                                                                </Table.Row>\r\n                                                            </Table.Header>\r\n                                                            <Table.Body>\r\n                                                                {result[\r\n                                                                    \"networks\"\r\n                                                                ][\r\n                                                                    \"networks\"\r\n                                                                ].map(\r\n                                                                    (\r\n                                                                        network,\r\n                                                                        idx\r\n                                                                    ) => {\r\n                                                                        return (\r\n                                                                            <Table.Row\r\n                                                                                key={\r\n                                                                                    idx\r\n                                                                                }\r\n                                                                            >\r\n                                                                                <Table.Cell>\r\n                                                                                    {\r\n                                                                                        network[\r\n                                                                                            \"addr\"\r\n                                                                                        ]\r\n                                                                                    }\r\n                                                                                </Table.Cell>\r\n                                                                                <Table.Cell>\r\n                                                                                    {\r\n                                                                                        network[\r\n                                                                                            \"range\"\r\n                                                                                        ]\r\n                                                                                    }\r\n                                                                                </Table.Cell>\r\n                                                                                <Table.Cell>\r\n                                                                                    {\r\n                                                                                        network[\r\n                                                                                            \"broadcast\"\r\n                                                                                        ]\r\n                                                                                    }\r\n                                                                                </Table.Cell>\r\n                                                                            </Table.Row>\r\n                                                                        );\r\n                                                                    }\r\n                                                                )}\r\n                                                            </Table.Body>\r\n                                                        </Table>\r\n                                                    </Segment>\r\n                                                </>\r\n                                            )}\r\n                                        </>\r\n                                    )}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={8}>\r\n                            <Segment\r\n                                style={{ overflow: \"auto\", maxHeight: 900 }}\r\n                                color=\"black\"\r\n                            >\r\n                                {result === \"\" ? (\r\n                                    <Message warning>\r\n                                        <Message.Header>\r\n                                            Nothing to display\r\n                                        </Message.Header>\r\n                                    </Message>\r\n                                ) : (\r\n                                    <>\r\n                                        <Header>Result</Header>\r\n                                        <Table color=\"teal\">\r\n                                            <Table.Body>\r\n                                                {Object.keys(\r\n                                                    result[\"data\"]\r\n                                                ).map(item => {\r\n                                                    return (\r\n                                                        <Table.Row key={item}>\r\n                                                            <Table.Cell>\r\n                                                                <b>\r\n                                                                    {\r\n                                                                        result[\r\n                                                                            \"data\"\r\n                                                                        ][item][\r\n                                                                            \"name\"\r\n                                                                        ]\r\n                                                                    }\r\n                                                                </b>\r\n                                                            </Table.Cell>\r\n                                                            <Table.Cell>\r\n                                                                {\r\n                                                                    result[\r\n                                                                        \"data\"\r\n                                                                    ][item][\r\n                                                                        \"value\"\r\n                                                                    ]\r\n                                                                }\r\n                                                            </Table.Cell>\r\n                                                        </Table.Row>\r\n                                                    );\r\n                                                })}\r\n                                            </Table.Body>\r\n                                        </Table>\r\n                                    </>\r\n                                )}\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IPSubnet;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport XLSX from \"xlsx\";\r\nimport { Input, Button, Grid, Segment, Header, Table, Message } from \"semantic-ui-react\";\r\nclass ExcelToJson extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      workbook: \"\",\r\n      data: \"\",\r\n      titleStart: \"\",\r\n      titleEnd: \"\",\r\n      titleLine: \"\",\r\n      dataLineStart: \"\",\r\n      dataLineEnd: \"\",\r\n      sheetName: \"\"\r\n    };\r\n  }\r\n\r\n  handleChangeFile = e => {\r\n    var files = e.target.files,\r\n      f = files[0];\r\n    var reader = new FileReader();\r\n    let obj = {};\r\n    reader.onload = function(e) {\r\n      let data = new Uint8Array(e.target.result);\r\n      let workbook = XLSX.read(data, { type: \"array\" });\r\n      obj[\"sheetNames\"] = workbook[\"SheetNames\"];\r\n      obj[\"sheets\"] = workbook[\"Sheets\"];\r\n    };\r\n    reader.readAsArrayBuffer(f);\r\n    this.setState({\r\n      workbook: obj\r\n    });\r\n    console.log(obj);\r\n  };\r\n\r\n  handleConvertToTable = () => {\r\n    let titles = [];\r\n    let titleStart = \"G\";\r\n    let titleEnd = \"P\";\r\n    let titleLine = 3;\r\n    let sheetName = \"Kho NOC Hà Nội\";\r\n    const { workbook } = this.state;\r\n    const from = workbook[\"sheets\"][sheetName][\"J2\"][\"w\"];\r\n    const to = workbook[\"sheets\"][sheetName][\"M2\"][\"w\"];\r\n    for (let i = titleStart.charCodeAt(0); i <= titleEnd.charCodeAt(0); i++) {\r\n      let cell = String.fromCharCode(i) + titleLine;\r\n      titles.push(workbook[\"sheets\"][sheetName][cell][\"w\"]);\r\n    }\r\n    let rows = [];\r\n    let dataLineStart = titleLine + 1;\r\n    while (true) {\r\n      let row = [];\r\n      for (let i = titleStart.charCodeAt(0); i <= titleEnd.charCodeAt(0); i++) {\r\n        let cell = String.fromCharCode(i) + dataLineStart;\r\n        if (Boolean(workbook[\"sheets\"][sheetName][cell])) {\r\n          row.push(workbook[\"sheets\"][sheetName][cell][\"w\"]);\r\n        } else {\r\n          row.push(\"\");\r\n        }\r\n      }\r\n      if (row.join(\"\") === \"\") {\r\n        break;\r\n      }\r\n      dataLineStart++;\r\n      rows.push(row);\r\n    }\r\n    console.log(rows);\r\n    let data = {};\r\n    data[\"titles\"] = titles;\r\n    data[\"rows\"] = rows;\r\n    this.setState({\r\n      data,\r\n      from,\r\n      to\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data, from, to } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <Segment>\r\n          <Header>Convert Excel to Json</Header>\r\n        </Segment>\r\n\r\n        <Segment>\r\n          <Input label=\"File to convert\" type=\"file\" onChange={this.handleChangeFile} />{\" \"}\r\n          <Button onClick={this.handleConvertToTable} color=\"teal\">\r\n            Convert\r\n          </Button>\r\n        </Segment>\r\n        <Segment>\r\n          {data !== \"\" ? (\r\n            <>\r\n              <Input value={from} label=\"From\" size=\"large\" />{\" \"}\r\n              <Input value={to} label=\"To\" size=\"large\" />\r\n              <Table celled striped>\r\n                <Table.Header>\r\n                  <Table.Row>\r\n                    {data[\"titles\"].map((title, index) => {\r\n                      return (\r\n                        <Table.HeaderCell key={index} title={title}>\r\n                          {title}\r\n                        </Table.HeaderCell>\r\n                      );\r\n                    })}\r\n                  </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                  {data[\"rows\"].map((row, index) => {\r\n                    return (\r\n                      <Table.Row key={index}>\r\n                        {row.map((cell, idx) => {\r\n                          return (\r\n                            <Table.Cell key={idx} title={cell}>\r\n                              {cell}\r\n                            </Table.Cell>\r\n                          );\r\n                        })}\r\n                      </Table.Row>\r\n                    );\r\n                  })}\r\n                </Table.Body>\r\n              </Table>\r\n            </>\r\n          ) : (\r\n            <Message warning>\r\n              <Message.Header>Nothing to display!</Message.Header>\r\n            </Message>\r\n          )}\r\n        </Segment>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExcelToJson;\r\n","import React from \"react\";\r\n// eslint-disable-next-line no-unused-vars\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Index from \"./component/layout/Index\";\r\nimport ShortestPath from \"./component/feature/shortest-path/ShortestPath\";\r\nimport Schedule from \"./component/feature/schedule/schedule\";\r\nimport BinaryAlgorithms from \"./component/feature/binary-algorithms/BinaryAlgorithms\";\r\nimport IPSubnet from \"./component/feature/ip-subnet/IPSubnet\";\r\nimport ExcelToJson from \"./component/feature/xlsx-to-json/ExcelToJson\"\r\nconst Routes = () => {\r\n  return (\r\n    <>\r\n      <Route exact path=\"/\" component={Index} />\r\n      <Route path=\"/feature/dijkstra/\" component={ShortestPath} />\r\n      <Route path=\"/feature/schedule/\" component={Schedule} />\r\n      <Route path=\"/feature/binary-algorithms/\" component={BinaryAlgorithms} />\r\n      <Route path=\"/feature/ip-subnet-v4/\" component={IPSubnet} />\r\n      <Route path=\"/feature/excel-json/\" component={ExcelToJson} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport SideMenu from \"./component/layout/SideMenu\";\r\nimport \"./App.css\";\r\n// eslint-disable-next-line\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\nimport Routes from \"./routes\";\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <Grid padded>\r\n            <Grid.Column width={2}>\r\n              <SideMenu />\r\n            </Grid.Column>\r\n            <Grid.Column width={14} floated=\"right\" id=\"content\">\r\n              <Routes />\r\n            </Grid.Column>\r\n          </Grid>\r\n          <ToastContainer />\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}